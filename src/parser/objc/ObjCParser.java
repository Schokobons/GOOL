/* Generated By:JavaCC: Do not edit this line. ObjCParser.java */
package parser.objc;

import gool.parser.objc.jtb.core.*;

import java.io.*;
import java.util.*;


public class ObjCParser implements ObjCParserConstants {

  /*
   * JTB generated return variables declarations
   */

  /** Return variable for {@link #ObjCIDENT} production */
  Token jtbrt_ObjCIDENT;

  private static final boolean verbose = false;

  private static final Set omissions = new HashSet();

  static {
    omissions.add("Foundation.h");
    omissions.add("AppKit.h");
    omissions.add("AppKitDefines.h");
    omissions.add("NSSpellServer.h");
    omissions.add("NSNibDeclarations.h");
    omissions.add("CoreData.h");
    omissions.add("CoreFoundation.h");
    omissions.add("CoreLocation.h");
    omissions.add("CoreAnimation.h");
    omissions.add("CoreImage.h");
    omissions.add("CoreVideo.h");
    omissions.add("CVBase.h");
    omissions.add("CVBuffer.h");
    omissions.add("CVDisplayLink.h");
    omissions.add("CVHostTime.h");
    omissions.add("CVImageBuffer.h");
    omissions.add("CVOpenGLBuffer.h");
    omissions.add("CVOpenGLBufferPool.h");
    omissions.add("CVOpenGLTexture.h");
    omissions.add("CVOpenGLTextureCache.h");
    omissions.add("CVPixelBuffer.h");
    omissions.add("CVPixelBufferPool.h");
    omissions.add("CVPixelFormatDescription.h");
    omissions.add("CVReturn.h");
    omissions.add("QuartzCore.h");
    omissions.add("DOM.h");
    omissions.add("DOMCore.h");
    omissions.add("DOMEvents.h");
    omissions.add("DOMHTML.h");
    omissions.add("DOMRanges.h");
    omissions.add("DOMStylesheets.h");
    omissions.add("DOMTraversal.h");
    omissions.add("DOMViews.h");
    omissions.add("DOMXPath.h");
    omissions.add("WebKit.h");
    omissions.add("PreferencePanes.h");
  }

  private static Set types = new HashSet();

  private static Stack typedefParsingStack = new Stack();

  private static boolean isType(String type) {
    return types.contains(type);
  }

  private static boolean isOmitted(String fileName) {
    return omissions.contains(fileName);
  }

  private static void addType(String type) {
    types.add(type);
  }

  private static void printTypes() {
    for (Iterator i = types.iterator(); i.hasNext(); ) {
      System.out.println(i.next());
    }
  }

  public ObjCParser(String fileName)  {
    this (System.in);
    try {
      ReInit(new FileInputStream(new File(fileName)));
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }

  public static void main(String args[]) {
    ObjCParser parser = null;
    String ps = System.getProperty("path.separator");
    types.add("__signed__");
    types.add("__const");
    types.add("__inline__");
    types.add("__signed");
    if (args.length == 0) {
      System.out.println("ObjectiveC 2.0 Parser Version 1.0:  Reading from standard input . . .");
      parser = new ObjCParser(System.in);
    } else
      if (args.length == 1) {
        if (new File(args[0]).isDirectory()) {
          String[] files = new File(args[0]).list();
          for (int i = 0; i < files.length; i++)
            if (!isOmitted(files[i]))
              processFile(new StringBuffer(args[0]).append(File.separator).append(files[i]).toString());

        } else
          processFile(args[0]);

      } else {
        System.out.println("ObjectiveC 2.0 Parser Version 1.0:  Usage is one of:");
        System.out.println("         java ObjCParser < inputfile");
        System.out.println("OR");
        System.out.println("         java ObjCParser inputfile");
        return;
      }

  }

  private static void processFile(String fileName) {
    ObjCParser parser = null;
    System.out.println("ObjectiveC 2.0 Parser Version 1.0:  Reading from file " + fileName + " . . .");
    try {
      parser = new ObjCParser(new java.io.FileInputStream(fileName));
    }
    catch (java.io.FileNotFoundException e) {
      System.out.println("ObjectiveC 2.0 Parser Version 1.0:  File " + fileName + " not found.");
      return;
    }
    try {
      parser.TranslationUnit();
      System.out.println("ObjectiveC 2.0 Parser Version 1.0:  ObjectiveC program parsed successfully.");
    }
    catch (ParseException e) {
      System.out.println(e.getMessage());
      System.out.println("ObjectiveC 2.0 Parser Version 1.0:  Encountered errors during parse.");
    }
  }

/***********************************************
 * THE OBJECTIVEC LANGUAGE GRAMMAR STARTS HERE *
 ***********************************************/
  final public TranslationUnit TranslationUnit() throws ParseException {
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  ExternalDeclaration n1 = null;
    label_1:
    while (true) {
      n1 = ExternalDeclaration();
      n0.addNode(n1);
      if (jj_2_1(1)) {
        ;
      } else {
        break label_1;
      }
    }
    n0.nodes.trimToSize();
    {if (true) return new TranslationUnit(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ExternalDeclaration ExternalDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  FunctionDefinition n1 = null;
  StrippedParens n2 = null;
  Declaration n3 = null;
  ClassInterface n4 = null;
  ClassImplementation n5 = null;
  CategoryInterface n6 = null;
  CategoryImplementation n7 = null;
  ProtocolDeclaration n8 = null;
  ClassDeclarationList n9 = null;
    if (jj_2_2(2147483647)) {
      n1 = FunctionDefinition();
        n0 = new NodeChoice(n1, 0, 9);
    } else if (jj_2_3(3)) {
      n2 = StrippedParens();
        n0 = new NodeChoice(n2, 1, 9);
    } else if (jj_2_4(1)) {
      n3 = Declaration();
        n0 = new NodeChoice(n3, 2, 9);
    } else if (jj_2_5(3)) {
      n4 = ClassInterface();
        n0 = new NodeChoice(n4, 3, 9);
    } else if (jj_2_6(3)) {
      n5 = ClassImplementation();
        n0 = new NodeChoice(n5, 4, 9);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT_INTERFACE:
        n6 = CategoryInterface();
        n0 = new NodeChoice(n6, 5, 9);
        break;
      case AT_IMPLEMENTATION:
        n7 = CategoryImplementation();
        n0 = new NodeChoice(n7, 6, 9);
        break;
      case AT_PROTOCOL:
        n8 = ProtocolDeclaration();
        n0 = new NodeChoice(n8, 7, 9);
        break;
      case AT_CLASS:
        n9 = ClassDeclarationList();
        n0 = new NodeChoice(n9, 8, 9);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new ExternalDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StrippedParens StrippedParens() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  StrippedParens n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(LEFT_PAREN);
    n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      n3 = StrippedParens();
      n2.addNode(n3);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    n5 = jj_consume_token(RIGHT_PAREN);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new StrippedParens(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  final public FunctionDefinition FunctionDefinition() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  DeclarationSpecifiers n1 = null;
  Declarator n2 = null;
  NodeOptional n3 = new NodeOptional();
  DeclarationList n4 = null;
  CompoundStatement n5 = null;
    if (jj_2_7(2147483647)) {
      n1 = DeclarationSpecifiers();
      n0.addNode(n1);
    } else {
      ;
    }
    n2 = Declarator();
    if (jj_2_8(1)) {
      n4 = DeclarationList();
      n3.addNode(n4);
    } else {
      ;
    }
    n5 = CompoundStatement();
    {if (true) return new FunctionDefinition(n0, n2, n3, n5);}
    throw new Error("Missing return statement in function");
  }

  final public Declaration Declaration() throws ParseException {
  // --- JTB generated node declarations ---
  DeclarationSpecifiers n0 = null;
  NodeOptional n1 = new NodeOptional();
  InitDeclaratorList n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeSequence n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  ParameterTypeList n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  ParameterTypeList n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
    n0 = DeclarationSpecifiers();
    if (jj_2_9(1)) {
      n2 = InitDeclaratorList();
      n1.addNode(n2);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXPORTED_CALLBACK:
      n4 = new NodeSequence(7);
      n6 = jj_consume_token(EXPORTED_CALLBACK);
      n5 = JTBToolkit.makeNodeToken(n6);
      n4.addNode(n5);
      n8 = jj_consume_token(LEFT_PAREN);
      n7 = JTBToolkit.makeNodeToken(n8);
      n4.addNode(n7);
      n9 = ParameterTypeList();
      n4.addNode(n9);
      n11 = jj_consume_token(RIGHT_PAREN);
      n10 = JTBToolkit.makeNodeToken(n11);
      n4.addNode(n10);
      n13 = jj_consume_token(LEFT_PAREN);
      n12 = JTBToolkit.makeNodeToken(n13);
      n4.addNode(n12);
      n14 = ParameterTypeList();
      n4.addNode(n14);
      n16 = jj_consume_token(RIGHT_PAREN);
      n15 = JTBToolkit.makeNodeToken(n16);
      n4.addNode(n15);
      n3.addNode(n4);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    n18 = jj_consume_token(SEMICOLON);
    n17 = JTBToolkit.makeNodeToken(n18);
    {if (true) return new Declaration(n0, n1, n3, n17);}
    throw new Error("Missing return statement in function");
  }

  final public ClassInterface ClassInterface() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ClassName n2 = null;
  NodeOptional n3 = new NodeOptional();
  ColonSuperClassName n4 = null;
  NodeOptional n5 = new NodeOptional();
  ProtocolReferenceList n6 = null;
  NodeOptional n7 = new NodeOptional();
  NodeSequence n8 = null;
  NodeOptional n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  ClassName n14 = null;
  NodeOptional n15 = null;
  ColonSuperClassName n16 = null;
  NodeOptional n17 = null;
  ProtocolReferenceList n18 = null;
  NodeOptional n19 = new NodeOptional();
  InstanceVariables n20 = null;
  NodeListOptional n21 = new NodeListOptional();
  InterfaceDeclaration n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
    n1 = jj_consume_token(AT_INTERFACE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ClassName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      n4 = ColonSuperClassName();
      n3.addNode(n4);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      n6 = ProtocolReferenceList();
      n5.addNode(n6);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    if (jj_2_10(2)) {
      n9 = new NodeOptional();
      n15 = new NodeOptional();
      n17 = new NodeOptional();
      n8 = new NodeSequence(5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACE:
        n11 = jj_consume_token(LEFT_BRACE);
        n10 = JTBToolkit.makeNodeToken(n11);
        n9.addNode(n10);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      n8.addNode(n9);
      n13 = jj_consume_token(AT_INTERFACE);
      n12 = JTBToolkit.makeNodeToken(n13);
      n8.addNode(n12);
      n14 = ClassName();
      n8.addNode(n14);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        n16 = ColonSuperClassName();
        n15.addNode(n16);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      n8.addNode(n15);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        n18 = ProtocolReferenceList();
        n17.addNode(n18);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      n8.addNode(n17);
      n7.addNode(n8);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_BRACE:
      n20 = InstanceVariables();
      n19.addNode(n20);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      if (jj_2_11(1)) {
        ;
      } else {
        break label_2;
      }
      n22 = InterfaceDeclaration();
      n21.addNode(n22);
    }
    n21.nodes.trimToSize();
    n24 = jj_consume_token(AT_END);
    n23 = JTBToolkit.makeNodeToken(n24);
    {if (true) return new ClassInterface(n0, n2, n3, n5, n7, n19, n21, n23);}
    throw new Error("Missing return statement in function");
  }

  final public ClassImplementation ClassImplementation() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ClassName n2 = null;
  NodeOptional n3 = new NodeOptional();
  ColonSuperClassName n4 = null;
  NodeOptional n5 = new NodeOptional();
  InstanceVariables n6 = null;
  NodeListOptional n7 = new NodeListOptional();
  ImplementationDefinition n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
    n1 = jj_consume_token(AT_IMPLEMENTATION);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ClassName();
    if (jj_2_12(2)) {
      n4 = ColonSuperClassName();
      n3.addNode(n4);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_BRACE:
      n6 = InstanceVariables();
      n5.addNode(n6);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      if (jj_2_13(1)) {
        ;
      } else {
        break label_3;
      }
      n8 = ImplementationDefinition();
      n7.addNode(n8);
    }
    n7.nodes.trimToSize();
    n10 = jj_consume_token(AT_END);
    n9 = JTBToolkit.makeNodeToken(n10);
    {if (true) return new ClassImplementation(n0, n2, n3, n5, n7, n9);}
    throw new Error("Missing return statement in function");
  }

  final public CategoryInterface CategoryInterface() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ClassName n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  CategoryName n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeOptional n9 = new NodeOptional();
  ProtocolReferenceList n10 = null;
  NodeListOptional n11 = new NodeListOptional();
  InterfaceDeclaration n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
    n1 = jj_consume_token(AT_INTERFACE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ClassName();
    n4 = jj_consume_token(LEFT_PAREN);
    n3 = JTBToolkit.makeNodeToken(n4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POSSIBLE_COCOA_TYPE:
    case POSSIBLE_CORE_TYPE:
    case IDENT:
      n6 = CategoryName();
      n5.addNode(n6);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    n8 = jj_consume_token(RIGHT_PAREN);
    n7 = JTBToolkit.makeNodeToken(n8);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      n10 = ProtocolReferenceList();
      n9.addNode(n10);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      if (jj_2_14(1)) {
        ;
      } else {
        break label_4;
      }
      n12 = InterfaceDeclaration();
      n11.addNode(n12);
    }
    n11.nodes.trimToSize();
    n14 = jj_consume_token(AT_END);
    n13 = JTBToolkit.makeNodeToken(n14);
    {if (true) return new CategoryInterface(n0, n2, n3, n5, n7, n9, n11, n13);}
    throw new Error("Missing return statement in function");
  }

  final public CategoryImplementation CategoryImplementation() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ClassName n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  CategoryName n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeListOptional n8 = new NodeListOptional();
  ImplementationDefinition n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
    n1 = jj_consume_token(AT_IMPLEMENTATION);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ClassName();
    n4 = jj_consume_token(LEFT_PAREN);
    n3 = JTBToolkit.makeNodeToken(n4);
    n5 = CategoryName();
    n7 = jj_consume_token(RIGHT_PAREN);
    n6 = JTBToolkit.makeNodeToken(n7);
    label_5:
    while (true) {
      if (jj_2_15(1)) {
        ;
      } else {
        break label_5;
      }
      n9 = ImplementationDefinition();
      n8.addNode(n9);
    }
    n8.nodes.trimToSize();
    n11 = jj_consume_token(AT_END);
    n10 = JTBToolkit.makeNodeToken(n11);
    {if (true) return new CategoryImplementation(n0, n2, n3, n5, n6, n8, n10);}
    throw new Error("Missing return statement in function");
  }

  final public ProtocolDeclaration ProtocolDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ProtocolList n2 = null;
  NodeOptional n3 = new NodeOptional();
  ProtocolReferenceList n4 = null;
  ProtocolInterfaceDeclaration n5 = null;
  NodeChoice n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
    n1 = jj_consume_token(AT_PROTOCOL);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ProtocolList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      n4 = ProtocolReferenceList();
      n3.addNode(n4);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    n5 = ProtocolInterfaceDeclaration();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT_END:
      n8 = jj_consume_token(AT_END);
        n7 = JTBToolkit.makeNodeToken(n8);
        n6 = new NodeChoice(n7, 0, 2);
      break;
    case SEMICOLON:
      n10 = jj_consume_token(SEMICOLON);
        n9 = JTBToolkit.makeNodeToken(n10);
        n6 = new NodeChoice(n9, 1, 2);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new ProtocolDeclaration(n0, n2, n3, n5, n6);}
    throw new Error("Missing return statement in function");
  }

  final public ClassDeclarationList ClassDeclarationList() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ClassList n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n1 = jj_consume_token(AT_CLASS);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ClassList();
    n4 = jj_consume_token(SEMICOLON);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new ClassDeclarationList(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

  final public ClassList ClassList() throws ParseException {
  // --- JTB generated node declarations ---
  ClassName n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ClassList n5 = null;
    n0 = ClassName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 222:
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(222);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = ClassList();
      n2.addNode(n5);
      n1.addNode(n2);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    {if (true) return new ClassList(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public ProtocolReferenceList ProtocolReferenceList() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  ProtocolList n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = new NodeOptional();
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  ProtocolList n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
    n1 = jj_consume_token(LT);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = ProtocolList();
    n4 = jj_consume_token(GT);
    n3 = JTBToolkit.makeNodeToken(n4);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      n6 = new NodeSequence(3);
      n8 = jj_consume_token(LT);
      n7 = JTBToolkit.makeNodeToken(n8);
      n6.addNode(n7);
      n9 = ProtocolList();
      n6.addNode(n9);
      n11 = jj_consume_token(GT);
      n10 = JTBToolkit.makeNodeToken(n11);
      n6.addNode(n10);
      n5.addNode(n6);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    {if (true) return new ProtocolReferenceList(n0, n2, n3, n5);}
    throw new Error("Missing return statement in function");
  }

  final public ProtocolList ProtocolList() throws ParseException {
  // --- JTB generated node declarations ---
  ProtocolName n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ProtocolList n5 = null;
    n0 = ProtocolName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 222:
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(222);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = ProtocolList();
      n2.addNode(n5);
      n1.addNode(n2);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    {if (true) return new ProtocolList(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public ObjCIDENT ObjCIDENT() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  // --- user BNFProduction java block ---
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POSSIBLE_COCOA_TYPE:
      n2 = jj_consume_token(POSSIBLE_COCOA_TYPE);
      n1 = JTBToolkit.makeNodeToken(n2);
      t = n2;
      jtbrt_ObjCIDENT = t;
      n0 = new NodeChoice(n1, 0, 3);
      break;
    case POSSIBLE_CORE_TYPE:
      n4 = jj_consume_token(POSSIBLE_CORE_TYPE);
      n3 = JTBToolkit.makeNodeToken(n4);
      t = n4;
      jtbrt_ObjCIDENT = t;
      n0 = new NodeChoice(n3, 1, 3);
      break;
    case IDENT:
      n6 = jj_consume_token(IDENT);
      n5 = JTBToolkit.makeNodeToken(n6);
      t = n6;
      jtbrt_ObjCIDENT = t;
      n0 = new NodeChoice(n5, 2, 3);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new ObjCIDENT(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ClassName ClassName() throws ParseException {
  // --- JTB generated node declarations ---
  ObjCIDENT n0 = null;
    n0 = ObjCIDENT();
    {if (true) return new ClassName(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SuperClassName SuperClassName() throws ParseException {
  // --- JTB generated node declarations ---
  ObjCIDENT n0 = null;
    n0 = ObjCIDENT();
    {if (true) return new SuperClassName(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ColonSuperClassName ColonSuperClassName() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  SuperClassName n2 = null;
    n1 = jj_consume_token(COLON);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = SuperClassName();
    {if (true) return new ColonSuperClassName(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public CategoryName CategoryName() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POSSIBLE_COCOA_TYPE:
      n2 = jj_consume_token(POSSIBLE_COCOA_TYPE);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 3);
      break;
    case POSSIBLE_CORE_TYPE:
      n4 = jj_consume_token(POSSIBLE_CORE_TYPE);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 3);
      break;
    case IDENT:
      n6 = jj_consume_token(IDENT);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 2, 3);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new CategoryName(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ProtocolName ProtocolName() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POSSIBLE_COCOA_TYPE:
      n2 = jj_consume_token(POSSIBLE_COCOA_TYPE);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 3);
      break;
    case POSSIBLE_CORE_TYPE:
      n4 = jj_consume_token(POSSIBLE_CORE_TYPE);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 3);
      break;
    case IDENT:
      n6 = jj_consume_token(IDENT);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 2, 3);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new ProtocolName(n0);}
    throw new Error("Missing return statement in function");
  }

  final public InstanceVariables InstanceVariables() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  InstanceVariableDeclaration n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeToken n7 = null;
  Token n8 = null;
    n1 = jj_consume_token(LEFT_BRACE);
    n0 = JTBToolkit.makeNodeToken(n1);
    label_6:
    while (true) {
      if (jj_2_16(1)) {
        ;
      } else {
        break label_6;
      }
      n3 = InstanceVariableDeclaration();
      n2.addNode(n3);
    }
    n2.nodes.trimToSize();
    n5 = jj_consume_token(RIGHT_BRACE);
    n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      n8 = jj_consume_token(SEMICOLON);
      n7 = JTBToolkit.makeNodeToken(n8);
      n6.addNode(n7);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    {if (true) return new InstanceVariables(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  final public InstanceVariableDeclaration InstanceVariableDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  VisibilitySpecification n1 = null;
  InstanceVariableDeclarator n2 = null;
  StructDeclaration n3 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT_PRIVATE:
    case AT_PACKAGE:
    case AT_PUBLIC:
    case AT_PROTECTED:
      n1 = VisibilitySpecification();
      n0 = new NodeChoice(n1, 0, 3);
      break;
    default:
      jj_la1[21] = jj_gen;
      if (jj_2_17(3)) {
        n2 = InstanceVariableDeclarator();
      n0 = new NodeChoice(n2, 1, 3);
      } else if (jj_2_18(1)) {
        n3 = StructDeclaration();
      n0 = new NodeChoice(n3, 2, 3);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new InstanceVariableDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  final public InstanceVariableDeclarator InstanceVariableDeclarator() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeOptional n2 = new NodeOptional();
  IBOutlet n3 = null;
  NodeChoice n4 = null;
  NodeSequence n5 = null;
  ClassName n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeSequence n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeOptional n12 = new NodeOptional();
  ProtocolReferenceList n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  Declaration n18 = null;
    if (jj_2_20(3)) {
        n1 = new NodeSequence(4);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IBOUTLET:
        n3 = IBOutlet();
          n2.addNode(n3);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
        n1.addNode(n2);
      if (jj_2_19(2)) {
            n5 = new NodeSequence(2);
        n6 = ClassName();
            n5.addNode(n6);
        n8 = jj_consume_token(STAR);
            n7 = JTBToolkit.makeNodeToken(n8);
            n5.addNode(n7);
            n4 = new NodeChoice(n5, 0, 2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
            n9 = new NodeSequence(2);
          n11 = jj_consume_token(ID);
            n10 = JTBToolkit.makeNodeToken(n11);
            n9.addNode(n10);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LT:
            n13 = ProtocolReferenceList();
              n12.addNode(n13);
            break;
          default:
            jj_la1[23] = jj_gen;
            ;
          }
            n9.addNode(n12);
            n4 = new NodeChoice(n9, 1, 2);
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        n1.addNode(n4);
      n15 = jj_consume_token(IDENT);
        n14 = JTBToolkit.makeNodeToken(n15);
        n1.addNode(n14);
      n17 = jj_consume_token(SEMICOLON);
        n16 = JTBToolkit.makeNodeToken(n17);
        n1.addNode(n16);
        n0 = new NodeChoice(n1, 0, 2);
    } else if (jj_2_21(1)) {
      n18 = Declaration();
        n0 = new NodeChoice(n18, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new InstanceVariableDeclarator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public VisibilitySpecification VisibilitySpecification() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT_PRIVATE:
      n1 = new NodeSequence(2);
      n3 = jj_consume_token(AT_PRIVATE);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        n6 = jj_consume_token(SEMICOLON);
        n5 = JTBToolkit.makeNodeToken(n6);
        n4.addNode(n5);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      n1.addNode(n4);
      n0 = new NodeChoice(n1, 0, 4);
      break;
    case AT_PROTECTED:
      n8 = jj_consume_token(AT_PROTECTED);
      n7 = JTBToolkit.makeNodeToken(n8);
      n0 = new NodeChoice(n7, 1, 4);
      break;
    case AT_PACKAGE:
      n10 = jj_consume_token(AT_PACKAGE);
      n9 = JTBToolkit.makeNodeToken(n10);
      n0 = new NodeChoice(n9, 2, 4);
      break;
    case AT_PUBLIC:
      n12 = jj_consume_token(AT_PUBLIC);
      n11 = JTBToolkit.makeNodeToken(n12);
      n0 = new NodeChoice(n11, 3, 4);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new VisibilitySpecification(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IBOutlet IBOutlet() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
    n1 = jj_consume_token(IBOUTLET);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new IBOutlet(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ProtocolInterfaceDeclaration ProtocolInterfaceDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeListOptional n0 = new NodeListOptional();
  InterfaceDeclaration n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  QualifiedProtocolInterfaceDeclaration n3 = null;
    label_7:
    while (true) {
      if (jj_2_22(1)) {
        ;
      } else {
        break label_7;
      }
      n1 = InterfaceDeclaration();
      n0.addNode(n1);
    }
    n0.nodes.trimToSize();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT_OPTIONAL:
      case AT_REQUIRED:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_8;
      }
      n3 = QualifiedProtocolInterfaceDeclaration();
      n2.addNode(n3);
    }
    n2.nodes.trimToSize();
    {if (true) return new ProtocolInterfaceDeclaration(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public QualifiedProtocolInterfaceDeclaration QualifiedProtocolInterfaceDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  InterfaceDeclaration n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeListOptional n9 = new NodeListOptional();
  InterfaceDeclaration n10 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT_OPTIONAL:
      n1 = new NodeSequence(2);
      n3 = jj_consume_token(AT_OPTIONAL);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      label_9:
      while (true) {
        if (jj_2_23(1)) {
          ;
        } else {
          break label_9;
        }
        n5 = InterfaceDeclaration();
        n4.addNode(n5);
      }
      n4.nodes.trimToSize();
      n1.addNode(n4);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case AT_REQUIRED:
      n6 = new NodeSequence(2);
      n8 = jj_consume_token(AT_REQUIRED);
      n7 = JTBToolkit.makeNodeToken(n8);
      n6.addNode(n7);
      label_10:
      while (true) {
        if (jj_2_24(1)) {
          ;
        } else {
          break label_10;
        }
        n10 = InterfaceDeclaration();
        n9.addNode(n10);
      }
      n9.nodes.trimToSize();
      n6.addNode(n9);
      n0 = new NodeChoice(n6, 1, 2);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new QualifiedProtocolInterfaceDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  final public InterfaceDeclaration InterfaceDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Declaration n1 = null;
  PropertyDeclaration n2 = null;
  MethodDeclaration n3 = null;
    if (jj_2_25(1)) {
      n1 = Declaration();
      n0 = new NodeChoice(n1, 0, 3);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT_PROPERTY:
        n2 = PropertyDeclaration();
      n0 = new NodeChoice(n2, 1, 3);
        break;
      case PLUS:
      case MINUS:
        n3 = MethodDeclaration();
      n0 = new NodeChoice(n3, 2, 3);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new InterfaceDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PropertyDeclaration PropertyDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  PropertyAttributesDeclaration n3 = null;
  NodeChoice n4 = null;
  StructDeclaration n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeOptional n9 = new NodeOptional();
  ProtocolReferenceList n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
    n1 = jj_consume_token(AT_PROPERTY);
    n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      n3 = PropertyAttributesDeclaration();
      n2.addNode(n3);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    if (jj_2_26(3)) {
      n5 = StructDeclaration();
        n4 = new NodeChoice(n5, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        n6 = new NodeSequence(4);
        n8 = jj_consume_token(ID);
        n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          n10 = ProtocolReferenceList();
          n9.addNode(n10);
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        n6.addNode(n9);
        n12 = jj_consume_token(IDENT);
        n11 = JTBToolkit.makeNodeToken(n12);
        n6.addNode(n11);
        n14 = jj_consume_token(SEMICOLON);
        n13 = JTBToolkit.makeNodeToken(n14);
        n6.addNode(n13);
        n4 = new NodeChoice(n6, 1, 2);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new PropertyDeclaration(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  final public PropertyAttributesDeclaration PropertyAttributesDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  PropertyAttributesList n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    n1 = jj_consume_token(LEFT_PAREN);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = PropertyAttributesList();
    n4 = jj_consume_token(RIGHT_PAREN);
    n3 = JTBToolkit.makeNodeToken(n4);
    {if (true) return new PropertyAttributesDeclaration(n0, n2, n3);}
    throw new Error("Missing return statement in function");
  }

  final public PropertyAttributesList PropertyAttributesList() throws ParseException {
  // --- JTB generated node declarations ---
  PropertyAttribute n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  PropertyAttributesList n5 = null;
    n0 = PropertyAttribute();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 222:
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(222);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = PropertyAttributesList();
      n2.addNode(n5);
      n1.addNode(n2);
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    {if (true) return new PropertyAttributesList(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public PropertyAttribute PropertyAttribute() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeOptional n8 = new NodeOptional();
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
    if (jj_2_27(3)) {
      n1 = new NodeSequence(4);
      n3 = jj_consume_token(IDENT);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      n5 = jj_consume_token(ASSIGN);
      n4 = JTBToolkit.makeNodeToken(n5);
      n1.addNode(n4);
      n7 = jj_consume_token(IDENT);
      n6 = JTBToolkit.makeNodeToken(n7);
      n1.addNode(n6);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        n10 = jj_consume_token(COLON);
        n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      n1.addNode(n8);
      n0 = new NodeChoice(n1, 0, 3);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        n12 = jj_consume_token(IDENT);
      n11 = JTBToolkit.makeNodeToken(n12);
      n0 = new NodeChoice(n11, 1, 3);
        break;
      case POSSIBLE_COCOA_TYPE:
        n14 = jj_consume_token(POSSIBLE_COCOA_TYPE);
      n13 = JTBToolkit.makeNodeToken(n14);
      n0 = new NodeChoice(n13, 2, 3);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new PropertyAttribute(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclaration MethodDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  ClassMethodDeclaration n1 = null;
  InstanceMethodDeclaration n2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      n1 = ClassMethodDeclaration();
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case MINUS:
      n2 = InstanceMethodDeclaration();
      n0 = new NodeChoice(n2, 1, 2);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new MethodDeclaration(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ClassMethodDeclaration ClassMethodDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  MethodType n3 = null;
  MethodSelector n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    n1 = jj_consume_token(PLUS);
    n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      n3 = MethodType();
      n2.addNode(n3);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    n4 = MethodSelector();
    n6 = jj_consume_token(SEMICOLON);
    n5 = JTBToolkit.makeNodeToken(n6);
    {if (true) return new ClassMethodDeclaration(n0, n2, n4, n5);}
    throw new Error("Missing return statement in function");
  }

  final public InstanceMethodDeclaration InstanceMethodDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  MethodType n3 = null;
  MethodSelector n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    n1 = jj_consume_token(MINUS);
    n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      n3 = MethodType();
      n2.addNode(n3);
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    n4 = MethodSelector();
    n6 = jj_consume_token(SEMICOLON);
    n5 = JTBToolkit.makeNodeToken(n6);
    {if (true) return new InstanceMethodDeclaration(n0, n2, n4, n5);}
    throw new Error("Missing return statement in function");
  }

  final public ImplementationDefinition ImplementationDefinition() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  FunctionDefinition n1 = null;
  Declaration n2 = null;
  PropertyImplementation n3 = null;
  MethodDefinition n4 = null;
    if (jj_2_28(2147483647)) {
      n1 = FunctionDefinition();
        n0 = new NodeChoice(n1, 0, 4);
    } else if (jj_2_29(1)) {
      n2 = Declaration();
        n0 = new NodeChoice(n2, 1, 4);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT_SYNTHESIZE:
      case AT_DYNAMIC:
        n3 = PropertyImplementation();
        n0 = new NodeChoice(n3, 2, 4);
        break;
      case PLUS:
      case MINUS:
        n4 = MethodDefinition();
        n0 = new NodeChoice(n4, 3, 4);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new ImplementationDefinition(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PropertyImplementation PropertyImplementation() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  PropertySynthesizeList n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  PropertySynthesizeList n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT_SYNTHESIZE:
      n1 = new NodeSequence(3);
      n3 = jj_consume_token(AT_SYNTHESIZE);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      n4 = PropertySynthesizeList();
      n1.addNode(n4);
      n6 = jj_consume_token(SEMICOLON);
      n5 = JTBToolkit.makeNodeToken(n6);
      n1.addNode(n5);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case AT_DYNAMIC:
      n7 = new NodeSequence(3);
      n9 = jj_consume_token(AT_DYNAMIC);
      n8 = JTBToolkit.makeNodeToken(n9);
      n7.addNode(n8);
      n10 = PropertySynthesizeList();
      n7.addNode(n10);
      n12 = jj_consume_token(SEMICOLON);
      n11 = JTBToolkit.makeNodeToken(n12);
      n7.addNode(n11);
      n0 = new NodeChoice(n7, 1, 2);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new PropertyImplementation(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PropertySynthesizeList PropertySynthesizeList() throws ParseException {
  // --- JTB generated node declarations ---
  PropertySynthesizeItem n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  PropertySynthesizeList n5 = null;
    n0 = PropertySynthesizeItem();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 222:
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(222);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = PropertySynthesizeList();
      n2.addNode(n5);
      n1.addNode(n2);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    {if (true) return new PropertySynthesizeList(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public PropertySynthesizeItem PropertySynthesizeItem() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
    if (jj_2_30(2)) {
      n2 = jj_consume_token(IDENT);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
      n3 = new NodeSequence(3);
        n5 = jj_consume_token(IDENT);
      n4 = JTBToolkit.makeNodeToken(n5);
      n3.addNode(n4);
        n7 = jj_consume_token(EQ);
      n6 = JTBToolkit.makeNodeToken(n7);
      n3.addNode(n6);
        n9 = jj_consume_token(IDENT);
      n8 = JTBToolkit.makeNodeToken(n9);
      n3.addNode(n8);
      n0 = new NodeChoice(n3, 1, 2);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new PropertySynthesizeItem(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDefinition MethodDefinition() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  ClassMethodDefinition n1 = null;
  InstanceMethodDefinition n2 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      n1 = ClassMethodDefinition();
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case MINUS:
      n2 = InstanceMethodDefinition();
      n0 = new NodeChoice(n2, 1, 2);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new MethodDefinition(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ClassMethodDefinition ClassMethodDefinition() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  MethodType n3 = null;
  MethodSelectorNoList n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  Declaration n6 = null;
  NodeOptional n7 = new NodeOptional();
  NodeToken n8 = null;
  Token n9 = null;
  CompoundStatement n10 = null;
    n1 = jj_consume_token(PLUS);
    n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      n3 = MethodType();
      n2.addNode(n3);
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    n4 = MethodSelectorNoList();
    label_11:
    while (true) {
      if (jj_2_31(1)) {
        ;
      } else {
        break label_11;
      }
      n6 = Declaration();
      n5.addNode(n6);
    }
    n5.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      n9 = jj_consume_token(SEMICOLON);
      n8 = JTBToolkit.makeNodeToken(n9);
      n7.addNode(n8);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    n10 = CompoundStatement();
    {if (true) return new ClassMethodDefinition(n0, n2, n4, n5, n7, n10);}
    throw new Error("Missing return statement in function");
  }

  final public InstanceMethodDefinition InstanceMethodDefinition() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  MethodType n3 = null;
  MethodSelectorNoList n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  Declaration n6 = null;
  NodeOptional n7 = new NodeOptional();
  NodeToken n8 = null;
  Token n9 = null;
  CompoundStatement n10 = null;
    n1 = jj_consume_token(MINUS);
    n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      n3 = MethodType();
      n2.addNode(n3);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    n4 = MethodSelectorNoList();
    label_12:
    while (true) {
      if (jj_2_32(1)) {
        ;
      } else {
        break label_12;
      }
      n6 = Declaration();
      n5.addNode(n6);
    }
    n5.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      n9 = jj_consume_token(SEMICOLON);
      n8 = JTBToolkit.makeNodeToken(n9);
      n7.addNode(n8);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    n10 = CompoundStatement();
    {if (true) return new InstanceMethodDefinition(n0, n2, n4, n5, n7, n10);}
    throw new Error("Missing return statement in function");
  }

  final public MethodSelectorNoList MethodSelectorNoList() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  KeywordSelector n2 = null;
  NodeOptional n3 = new NodeOptional();
  NodeChoice n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  UnarySelector n12 = null;
    if (jj_2_34(3)) {
      n1 = new NodeSequence(2);
      n2 = KeywordSelector();
      n1.addNode(n2);
      if (jj_2_33(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 223:
          n6 = jj_consume_token(223);
            n5 = JTBToolkit.makeNodeToken(n6);
            n4 = new NodeChoice(n5, 0, 2);
          break;
        case 222:
            n7 = new NodeSequence(2);
          n9 = jj_consume_token(222);
            n8 = JTBToolkit.makeNodeToken(n9);
            n7.addNode(n8);
          n11 = jj_consume_token(ELLIPSIS);
            n10 = JTBToolkit.makeNodeToken(n11);
            n7.addNode(n10);
            n4 = new NodeChoice(n7, 1, 2);
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        n3.addNode(n4);
      } else {
        ;
      }
      n1.addNode(n3);
      n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        n12 = UnarySelector();
      n0 = new NodeChoice(n12, 1, 2);
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new MethodSelectorNoList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MethodSelector MethodSelector() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  MethodSelectorNoList n1 = null;
  NodeSequence n2 = null;
  KeywordSelector n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  ParameterTypeList n6 = null;
    if (jj_2_35(3)) {
      n1 = MethodSelectorNoList();
      n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
      case IDENT:
      n2 = new NodeSequence(3);
        n3 = KeywordSelector();
      n2.addNode(n3);
        n5 = jj_consume_token(222);
      n4 = JTBToolkit.makeNodeToken(n5);
      n2.addNode(n4);
        n6 = ParameterTypeList();
      n2.addNode(n6);
      n0 = new NodeChoice(n2, 1, 2);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new MethodSelector(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UnarySelector UnarySelector() throws ParseException {
  // --- JTB generated node declarations ---
  Selector n0 = null;
    n0 = Selector();
    {if (true) return new UnarySelector(n0);}
    throw new Error("Missing return statement in function");
  }

  final public KeywordSelector KeywordSelector() throws ParseException {
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  KeywordDeclarator n1 = null;
    label_13:
    while (true) {
      n1 = KeywordDeclarator();
      n0.addNode(n1);
      if (jj_2_36(2)) {
        ;
      } else {
        break label_13;
      }
    }
    n0.nodes.trimToSize();
    {if (true) return new KeywordSelector(n0);}
    throw new Error("Missing return statement in function");
  }

  final public KeywordDeclarator KeywordDeclarator() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  Selector n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  MethodType n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      n1 = Selector();
      n0.addNode(n1);
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      n5 = MethodType();
      n4.addNode(n5);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    n7 = jj_consume_token(IDENT);
    n6 = JTBToolkit.makeNodeToken(n7);
    {if (true) return new KeywordDeclarator(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  final public Selector Selector() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
    n1 = jj_consume_token(IDENT);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new Selector(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MethodType MethodType() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  Block n3 = null;
  TypeNameWithUnknownType n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    n1 = jj_consume_token(LEFT_PAREN);
    n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_37(3)) {
      n3 = Block();
        n2 = new NodeChoice(n3, 0, 2);
    } else if (jj_2_38(1)) {
      n4 = TypeNameWithUnknownType();
        n2 = new NodeChoice(n4, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    n6 = jj_consume_token(RIGHT_PAREN);
    n5 = JTBToolkit.makeNodeToken(n6);
    {if (true) return new MethodType(n0, n2, n5);}
    throw new Error("Missing return statement in function");
  }

  final public SelectorExpression SelectorExpression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  SelectorName n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    n1 = jj_consume_token(AT_SELECTOR);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LEFT_PAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = SelectorName();
    n6 = jj_consume_token(RIGHT_PAREN);
    n5 = JTBToolkit.makeNodeToken(n6);
    {if (true) return new SelectorExpression(n0, n2, n4, n5);}
    throw new Error("Missing return statement in function");
  }

  final public SelectorName SelectorName() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Selector n1 = null;
  NodeList n2 = new NodeList();
  KeywordName n3 = null;
    if (jj_2_39(2)) {
      n1 = Selector();
      n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
      case IDENT:
        label_14:
        while (true) {
          n3 = KeywordName();
        n2.addNode(n3);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COLON:
          case IDENT:
            ;
            break;
          default:
            jj_la1[53] = jj_gen;
            break label_14;
          }
        }
      n2.nodes.trimToSize();
      n0 = new NodeChoice(n2, 1, 2);
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new SelectorName(n0);}
    throw new Error("Missing return statement in function");
  }

  final public KeywordName KeywordName() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  Selector n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      n1 = Selector();
      n0.addNode(n1);
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
    n3 = jj_consume_token(COLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    {if (true) return new KeywordName(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public ProtocolExpression ProtocolExpression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  ProtocolName n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    n1 = jj_consume_token(AT_PROTOCOL);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LEFT_PAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = ProtocolName();
    n6 = jj_consume_token(RIGHT_PAREN);
    n5 = JTBToolkit.makeNodeToken(n6);
    {if (true) return new ProtocolExpression(n0, n2, n4, n5);}
    throw new Error("Missing return statement in function");
  }

  final public EncodeExpression EncodeExpression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  TypeNameWithUnknownType n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    n1 = jj_consume_token(AT_ENCODE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LEFT_PAREN);
    n2 = JTBToolkit.makeNodeToken(n3);
    n4 = TypeNameWithUnknownType();
    n6 = jj_consume_token(RIGHT_PAREN);
    n5 = JTBToolkit.makeNodeToken(n6);
    {if (true) return new EncodeExpression(n0, n2, n4, n5);}
    throw new Error("Missing return statement in function");
  }

  final public DeclarationList DeclarationList() throws ParseException {
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  Declaration n1 = null;
    label_15:
    while (true) {
      n1 = Declaration();
      n0.addNode(n1);
      if (jj_2_40(2147483647)) {
        ;
      } else {
        break label_15;
      }
    }
    n0.nodes.trimToSize();
    {if (true) return new DeclarationList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DeclarationSpecifiers DeclarationSpecifiers() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  TypeSpecifier n2 = null;
  NodeOptional n3 = new NodeOptional();
  StorageClassSpecifier n4 = null;
  NodeOptional n5 = new NodeOptional();
  TypeQualifier n6 = null;
  NodeSequence n7 = null;
  TypeSpecifier n8 = null;
  NodeOptional n9 = new NodeOptional();
  TypeQualifier n10 = null;
  NodeOptional n11 = new NodeOptional();
  StorageClassSpecifier n12 = null;
  NodeSequence n13 = null;
  StorageClassSpecifier n14 = null;
  NodeOptional n15 = new NodeOptional();
  TypeQualifier n16 = null;
  NodeOptional n17 = new NodeOptional();
  TypeSpecifier n18 = null;
  NodeSequence n19 = null;
  StorageClassSpecifier n20 = null;
  NodeOptional n21 = new NodeOptional();
  TypeSpecifier n22 = null;
  NodeOptional n23 = new NodeOptional();
  TypeQualifier n24 = null;
  NodeSequence n25 = null;
  TypeQualifier n26 = null;
  NodeOptional n27 = new NodeOptional();
  StorageClassSpecifier n28 = null;
  NodeOptional n29 = new NodeOptional();
  TypeSpecifier n30 = null;
  NodeSequence n31 = null;
  TypeQualifier n32 = null;
  NodeOptional n33 = new NodeOptional();
  TypeSpecifier n34 = null;
  NodeOptional n35 = new NodeOptional();
  StorageClassSpecifier n36 = null;
    if (jj_2_45(3)) {
      n1 = new NodeSequence(3);
      n2 = TypeSpecifier();
      n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
      case TYPEDEF:
      case EXTERN:
      case STATIC:
      case AUTO:
        n4 = StorageClassSpecifier();
        n3.addNode(n4);
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      n1.addNode(n3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOLATILE:
      case CONST:
        n6 = TypeQualifier();
        n5.addNode(n6);
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      n1.addNode(n5);
      n0 = new NodeChoice(n1, 0, 6);
    } else if (jj_2_46(1)) {
      n7 = new NodeSequence(3);
      n8 = TypeSpecifier();
      n7.addNode(n8);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOLATILE:
      case CONST:
        n10 = TypeQualifier();
        n9.addNode(n10);
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      n7.addNode(n9);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
      case TYPEDEF:
      case EXTERN:
      case STATIC:
      case AUTO:
        n12 = StorageClassSpecifier();
        n11.addNode(n12);
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      n7.addNode(n11);
      n0 = new NodeChoice(n7, 1, 6);
    } else if (jj_2_47(3)) {
      n13 = new NodeSequence(3);
      n14 = StorageClassSpecifier();
      n13.addNode(n14);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOLATILE:
      case CONST:
        n16 = TypeQualifier();
        n15.addNode(n16);
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      n13.addNode(n15);
      if (jj_2_41(2)) {
        n18 = TypeSpecifier();
        n17.addNode(n18);
      } else {
        ;
      }
      n13.addNode(n17);
      n0 = new NodeChoice(n13, 2, 6);
    } else if (jj_2_48(3)) {
      n19 = new NodeSequence(3);
      n20 = StorageClassSpecifier();
      n19.addNode(n20);
      if (jj_2_42(2)) {
        n22 = TypeSpecifier();
        n21.addNode(n22);
      } else {
        ;
      }
      n19.addNode(n21);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOLATILE:
      case CONST:
        n24 = TypeQualifier();
        n23.addNode(n24);
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      n19.addNode(n23);
      n0 = new NodeChoice(n19, 3, 6);
    } else if (jj_2_49(3)) {
      n25 = new NodeSequence(3);
      n26 = TypeQualifier();
      n25.addNode(n26);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
      case TYPEDEF:
      case EXTERN:
      case STATIC:
      case AUTO:
        n28 = StorageClassSpecifier();
        n27.addNode(n28);
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      n25.addNode(n27);
      if (jj_2_43(2)) {
        n30 = TypeSpecifier();
        n29.addNode(n30);
      } else {
        ;
      }
      n25.addNode(n29);
      n0 = new NodeChoice(n25, 4, 6);
    } else if (jj_2_50(2)) {
      n31 = new NodeSequence(3);
      n32 = TypeQualifier();
      n31.addNode(n32);
      if (jj_2_44(2)) {
        n34 = TypeSpecifier();
        n33.addNode(n34);
      } else {
        ;
      }
      n31.addNode(n33);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REGISTER:
      case TYPEDEF:
      case EXTERN:
      case STATIC:
      case AUTO:
        n36 = StorageClassSpecifier();
        n35.addNode(n36);
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      n31.addNode(n35);
      n0 = new NodeChoice(n31, 5, 6);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new DeclarationSpecifiers(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StorageClassSpecifier StorageClassSpecifier() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AUTO:
      n2 = jj_consume_token(AUTO);
        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0, 5);
      break;
    case REGISTER:
      n4 = jj_consume_token(REGISTER);
        n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1, 5);
      break;
    case STATIC:
      n6 = jj_consume_token(STATIC);
        n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2, 5);
      break;
    case EXTERN:
      n8 = jj_consume_token(EXTERN);
        n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3, 5);
      break;
    case TYPEDEF:
      n10 = jj_consume_token(TYPEDEF);
        n9 = JTBToolkit.makeNodeToken(n10);
        typedefParsingStack.push(Boolean.TRUE);
        n0 = new NodeChoice(n9, 4, 5);
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new StorageClassSpecifier(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TypeSpecifier TypeSpecifier() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  GreedyFixedNumType n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
  NodeToken n34 = null;
  Token n35 = null;
  NodeToken n36 = null;
  Token n37 = null;
  NodeToken n38 = null;
  Token n39 = null;
  NodeToken n40 = null;
  Token n41 = null;
  StructOrUnionSpecifier n42 = null;
  EnumSpecifier n43 = null;
  TypedefName n44 = null;
  PossibleCocoaType n45 = null;
  PossibleCoreType n46 = null;
  PossibleUnknownType n47 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FIXED_NUM_TYPE:
    case UNSIGNED:
    case SIGNED:
      n1 = GreedyFixedNumType();
        n0 = new NodeChoice(n1, 0, 27);
      break;
    case VOID:
      n3 = jj_consume_token(VOID);
        n2 = JTBToolkit.makeNodeToken(n3);
        n0 = new NodeChoice(n2, 1, 27);
      break;
    case CHAR:
      n5 = jj_consume_token(CHAR);
        n4 = JTBToolkit.makeNodeToken(n5);
        n0 = new NodeChoice(n4, 2, 27);
      break;
    case FLOAT:
      n7 = jj_consume_token(FLOAT);
        n6 = JTBToolkit.makeNodeToken(n7);
        n0 = new NodeChoice(n6, 3, 27);
      break;
    case DOUBLE:
      n9 = jj_consume_token(DOUBLE);
        n8 = JTBToolkit.makeNodeToken(n9);
        n0 = new NodeChoice(n8, 4, 27);
      break;
    case BOOL:
      n11 = jj_consume_token(BOOL);
        n10 = JTBToolkit.makeNodeToken(n11);
        n0 = new NodeChoice(n10, 5, 27);
      break;
    case IBACTION:
      n13 = jj_consume_token(IBACTION);
        n12 = JTBToolkit.makeNodeToken(n13);
        n0 = new NodeChoice(n12, 6, 27);
      break;
    case ID:
      n15 = jj_consume_token(ID);
        n14 = JTBToolkit.makeNodeToken(n15);
        n0 = new NodeChoice(n14, 7, 27);
      break;
    case INT32_T:
      n17 = jj_consume_token(INT32_T);
        n16 = JTBToolkit.makeNodeToken(n17);
        n0 = new NodeChoice(n16, 8, 27);
      break;
    case CGFLOAT:
      n19 = jj_consume_token(CGFLOAT);
        n18 = JTBToolkit.makeNodeToken(n19);
        n0 = new NodeChoice(n18, 9, 27);
      break;
    case NSRECT:
      n21 = jj_consume_token(NSRECT);
        n20 = JTBToolkit.makeNodeToken(n21);
        n0 = new NodeChoice(n20, 10, 27);
      break;
    case NSUINTEGER:
      n23 = jj_consume_token(NSUINTEGER);
        n22 = JTBToolkit.makeNodeToken(n23);
        n0 = new NodeChoice(n22, 11, 27);
      break;
    case NSINTEGER:
      n25 = jj_consume_token(NSINTEGER);
        n24 = JTBToolkit.makeNodeToken(n25);
        n0 = new NodeChoice(n24, 12, 27);
      break;
    case NSSIZE:
      n27 = jj_consume_token(NSSIZE);
        n26 = JTBToolkit.makeNodeToken(n27);
        n0 = new NodeChoice(n26, 13, 27);
      break;
    case SEL:
      n29 = jj_consume_token(SEL);
        n28 = JTBToolkit.makeNodeToken(n29);
        n0 = new NodeChoice(n28, 14, 27);
      break;
    case CLASS:
      n31 = jj_consume_token(CLASS);
        n30 = JTBToolkit.makeNodeToken(n31);
        n0 = new NodeChoice(n30, 15, 27);
      break;
    case IMP:
      n33 = jj_consume_token(IMP);
        n32 = JTBToolkit.makeNodeToken(n33);
        n0 = new NodeChoice(n32, 16, 27);
      break;
    case SINT32:
      n35 = jj_consume_token(SINT32);
        n34 = JTBToolkit.makeNodeToken(n35);
        n0 = new NodeChoice(n34, 17, 27);
      break;
    case BOOLEAN:
      n37 = jj_consume_token(BOOLEAN);
        n36 = JTBToolkit.makeNodeToken(n37);
        n0 = new NodeChoice(n36, 18, 27);
      break;
    case SCHAR:
      n39 = jj_consume_token(SCHAR);
        n38 = JTBToolkit.makeNodeToken(n39);
        n0 = new NodeChoice(n38, 19, 27);
      break;
    case UCHAR:
      n41 = jj_consume_token(UCHAR);
        n40 = JTBToolkit.makeNodeToken(n41);
        n0 = new NodeChoice(n40, 20, 27);
      break;
    case STRUCT:
    case UNION:
      n42 = StructOrUnionSpecifier();
        n0 = new NodeChoice(n42, 21, 27);
      break;
    case ENUM:
      n43 = EnumSpecifier();
        n0 = new NodeChoice(n43, 22, 27);
      break;
    default:
      jj_la1[65] = jj_gen;
      if (isType(getToken(1).image)) {
        n44 = TypedefName();
        n0 = new NodeChoice(n44, 23, 27);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POSSIBLE_COCOA_TYPE:
          n45 = PossibleCocoaType();
        n0 = new NodeChoice(n45, 24, 27);
          break;
        case POSSIBLE_CORE_TYPE:
          n46 = PossibleCoreType();
        n0 = new NodeChoice(n46, 25, 27);
          break;
        case IDENT:
          n47 = PossibleUnknownType();
        n0 = new NodeChoice(n47, 26, 27);
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return new TypeSpecifier(n0);}
    throw new Error("Missing return statement in function");
  }

  final public GreedyFixedNumType GreedyFixedNumType() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeOptional n10 = new NodeOptional();
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
    if (jj_2_52(2)) {
      n1 = new NodeSequence(3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED:
      case SIGNED:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SIGNED:
          n5 = jj_consume_token(SIGNED);
          n4 = JTBToolkit.makeNodeToken(n5);
          n3 = new NodeChoice(n4, 0, 2);
          break;
        case UNSIGNED:
          n7 = jj_consume_token(UNSIGNED);
          n6 = JTBToolkit.makeNodeToken(n7);
          n3 = new NodeChoice(n6, 1, 2);
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        n2.addNode(n3);
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      n1.addNode(n2);
      n9 = jj_consume_token(FIXED_NUM_TYPE);
      n8 = JTBToolkit.makeNodeToken(n9);
      n1.addNode(n8);
      if (jj_2_51(2)) {
        n12 = jj_consume_token(FIXED_NUM_TYPE);
        n11 = JTBToolkit.makeNodeToken(n12);
        n10.addNode(n11);
      } else {
        ;
      }
      n1.addNode(n10);
      n0 = new NodeChoice(n1, 0, 3);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIGNED:
        n14 = jj_consume_token(SIGNED);
      n13 = JTBToolkit.makeNodeToken(n14);
      n0 = new NodeChoice(n13, 1, 3);
        break;
      case UNSIGNED:
        n16 = jj_consume_token(UNSIGNED);
      n15 = JTBToolkit.makeNodeToken(n16);
      n0 = new NodeChoice(n15, 2, 3);
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new GreedyFixedNumType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PossibleCocoaType PossibleCocoaType() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  // --- user BNFProduction java block ---
  Token t;
    n1 = jj_consume_token(POSSIBLE_COCOA_TYPE);
    n0 = JTBToolkit.makeNodeToken(n1);
    t = n1;
    if (verbose)
      System.out.println("WARNING: Adding typedef on possible Cocoa type " + t.image + " at line number " + t.beginLine + ", column number " + t.beginColumn);
    addType(t.image);
    {if (true) return new PossibleCocoaType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PossibleCoreType PossibleCoreType() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  // --- user BNFProduction java block ---
  Token t;
    n1 = jj_consume_token(POSSIBLE_CORE_TYPE);
    n0 = JTBToolkit.makeNodeToken(n1);
    t = n1;
    if (verbose)
      System.out.println("WARNING: Adding typedef on possible CoreFoundation type " + t.image + " at line number " + t.beginLine + ", column number " + t.beginColumn);
    addType(t.image);
    {if (true) return new PossibleCoreType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PossibleUnknownType PossibleUnknownType() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  // --- user BNFProduction java block ---
  Token t;
    n1 = jj_consume_token(IDENT);
    n0 = JTBToolkit.makeNodeToken(n1);
    t = n1;
    if (verbose)
      System.out.println("WARNING: Adding typedef on unknown identifier " + t.image + " at line number " + t.beginLine + ", column number " + t.beginColumn);
    addType(t.image);
    {if (true) return new PossibleUnknownType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TypeSpecifierWithUnknownType TypeSpecifierWithUnknownType() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeChoice n2 = null;
  ObjCIDENT n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  ProtocolReferenceList n7 = null;
  TypeSpecifier n8 = null;
    if (jj_2_53(2)) {
      n1 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSSIBLE_COCOA_TYPE:
      case POSSIBLE_CORE_TYPE:
      case IDENT:
        n3 = ObjCIDENT();
          n2 = new NodeChoice(n3, 0, 2);
        break;
      case ID:
        n5 = jj_consume_token(ID);
          n4 = JTBToolkit.makeNodeToken(n5);
          n2 = new NodeChoice(n4, 1, 2);
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        n7 = ProtocolReferenceList();
        n6.addNode(n7);
        break;
      default:
        jj_la1[71] = jj_gen;
        ;
      }
      n1.addNode(n6);
      n0 = new NodeChoice(n1, 0, 2);
    } else if (jj_2_54(1)) {
      n8 = TypeSpecifier();
      n0 = new NodeChoice(n8, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new TypeSpecifierWithUnknownType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TypeQualifier TypeQualifier() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      n2 = jj_consume_token(CONST);
        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0, 2);
      break;
    case VOLATILE:
      n4 = jj_consume_token(VOLATILE);
        n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1, 2);
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new TypeQualifier(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StructOrUnionSpecifier StructOrUnionSpecifier() throws ParseException {
  // --- JTB generated node declarations ---
  StructOrUnion n0 = null;
  NodeChoice n1 = null;
  NodeSequence n2 = null;
  NodeOptional n3 = new NodeOptional();
  ObjCIDENT n4 = null;
  NodeChoice n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  StructDeclarationList n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  ObjCIDENT n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
    typedefParsingStack.push(Boolean.FALSE);
    n0 = StructOrUnion();
    if (jj_2_56(3)) {
        n2 = new NodeSequence(2);
      if (jj_2_55(2)) {
        n4 = ObjCIDENT();
          n3.addNode(n4);
      } else {
        ;
      }
        n2.addNode(n3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACE:
            n6 = new NodeSequence(3);
        n8 = jj_consume_token(LEFT_BRACE);
            n7 = JTBToolkit.makeNodeToken(n8);
            n6.addNode(n7);
        n9 = StructDeclarationList();
            n6.addNode(n9);
        n11 = jj_consume_token(RIGHT_BRACE);
            n10 = JTBToolkit.makeNodeToken(n11);
            n6.addNode(n10);
            n5 = new NodeChoice(n6, 0, 2);
        break;
      case POSSIBLE_COCOA_TYPE:
      case POSSIBLE_CORE_TYPE:
      case IDENT:
        n12 = ObjCIDENT();
            n5 = new NodeChoice(n12, 1, 2);
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n2.addNode(n5);
        n1 = new NodeChoice(n2, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        n14 = jj_consume_token(IDENT);
        n13 = JTBToolkit.makeNodeToken(n14);
        n1 = new NodeChoice(n13, 1, 2);
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    typedefParsingStack.pop();
    {if (true) return new StructOrUnionSpecifier(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public StructOrUnion StructOrUnion() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRUCT:
      n2 = jj_consume_token(STRUCT);
        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0, 2);
      break;
    case UNION:
      n4 = jj_consume_token(UNION);
        n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1, 2);
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new StructOrUnion(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StructDeclarationList StructDeclarationList() throws ParseException {
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  StructDeclaration n1 = null;
    label_16:
    while (true) {
      n1 = StructDeclaration();
      n0.addNode(n1);
      if (jj_2_57(1)) {
        ;
      } else {
        break label_16;
      }
    }
    n0.nodes.trimToSize();
    {if (true) return new StructDeclarationList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public InitDeclaratorList InitDeclaratorList() throws ParseException {
  // --- JTB generated node declarations ---
  InitDeclarator n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  InitDeclarator n5 = null;
    n0 = InitDeclarator();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 222:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_17;
      }
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(222);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = InitDeclarator();
      n2.addNode(n5);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    if (!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()) {
      typedefParsingStack.pop();
    }
    {if (true) return new InitDeclaratorList(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public InitDeclarator InitDeclarator() throws ParseException {
  // --- JTB generated node declarations ---
  Declarator n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Initializer n5 = null;
    n0 = Declarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(ASSIGN);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = Initializer();
      n2.addNode(n5);
      n1.addNode(n2);
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    {if (true) return new InitDeclarator(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public ProtocolQualifier ProtocolQualifier() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  In n3 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROTOCOL_QUALIFIER_EXCEPT_IN:
      n2 = jj_consume_token(PROTOCOL_QUALIFIER_EXCEPT_IN);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    default:
      jj_la1[78] = jj_gen;
      if (jj_2_58(1)) {
        n3 = In();
      n0 = new NodeChoice(n3, 1, 2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new ProtocolQualifier(n0);}
    throw new Error("Missing return statement in function");
  }

  final public In In() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
    if (getToken(0).image.equals("in")) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    n1 = jj_consume_token(IDENT);
    n0 = JTBToolkit.makeNodeToken(n1);
    {if (true) return new In(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StructDeclaration StructDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  SpecifierQualifierList n0 = null;
  NodeChoice n1 = null;
  StructDeclaratorList n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  ConstantExpression n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
    n0 = SpecifierQualifierList();
    if (jj_2_59(1)) {
      n2 = StructDeclaratorList();
        n1 = new NodeChoice(n2, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_SQUARE:
        n3 = new NodeSequence(3);
        n5 = jj_consume_token(LEFT_SQUARE);
        n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
        n6 = ConstantExpression();
        n3.addNode(n6);
        n8 = jj_consume_token(RIGHT_SQUARE);
        n7 = JTBToolkit.makeNodeToken(n8);
        n3.addNode(n7);
        n1 = new NodeChoice(n3, 1, 2);
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    n10 = jj_consume_token(SEMICOLON);
    n9 = JTBToolkit.makeNodeToken(n10);
    {if (true) return new StructDeclaration(n0, n1, n9);}
    throw new Error("Missing return statement in function");
  }

  final public SpecifierQualifierWithUnknownType SpecifierQualifierWithUnknownType() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  TypeSpecifierWithUnknownType n1 = null;
  TypeQualifier n2 = null;
  ProtocolQualifier n3 = null;
    if (jj_2_60(2)) {
      n1 = TypeSpecifierWithUnknownType();
      n0 = new NodeChoice(n1, 0, 3);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOLATILE:
      case CONST:
        n2 = TypeQualifier();
      n0 = new NodeChoice(n2, 1, 3);
        break;
      default:
        jj_la1[80] = jj_gen;
        if (jj_2_61(1)) {
          n3 = ProtocolQualifier();
      n0 = new NodeChoice(n3, 2, 3);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return new SpecifierQualifierWithUnknownType(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SpecifierQualifierList SpecifierQualifierList() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  TypeSpecifier n2 = null;
  NodeOptional n3 = new NodeOptional();
  TypeQualifier n4 = null;
  NodeSequence n5 = null;
  TypeQualifier n6 = null;
  TypeSpecifier n7 = null;
    if (jj_2_62(1)) {
      n1 = new NodeSequence(2);
      n2 = TypeSpecifier();
      n1.addNode(n2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOLATILE:
      case CONST:
        n4 = TypeQualifier();
        n3.addNode(n4);
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
      n1.addNode(n3);
      n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOLATILE:
      case CONST:
      n5 = new NodeSequence(2);
        n6 = TypeQualifier();
      n5.addNode(n6);
        n7 = TypeSpecifier();
      n5.addNode(n7);
      n0 = new NodeChoice(n5, 1, 2);
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new SpecifierQualifierList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public StructDeclaratorList StructDeclaratorList() throws ParseException {
  // --- JTB generated node declarations ---
  StructDeclarator n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  StructDeclarator n5 = null;
    n0 = StructDeclarator();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 222:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_18;
      }
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(222);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = StructDeclarator();
      n2.addNode(n5);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new StructDeclaratorList(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public StructDeclarator StructDeclarator() throws ParseException {
  // --- JTB generated node declarations ---
  Declarator n0 = null;
    n0 = Declarator();
    {if (true) return new StructDeclarator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public EnumSpecifier EnumSpecifier() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeSequence n3 = null;
  NodeOptional n4 = new NodeOptional();
  ObjCIDENT n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  EnumeratorList n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
    n1 = jj_consume_token(ENUM);
    n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_63(3)) {
        n3 = new NodeSequence(4);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSSIBLE_COCOA_TYPE:
      case POSSIBLE_CORE_TYPE:
      case IDENT:
        n5 = ObjCIDENT();
          n4.addNode(n5);
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
        n3.addNode(n4);
      n7 = jj_consume_token(LEFT_BRACE);
        n6 = JTBToolkit.makeNodeToken(n7);
        n3.addNode(n6);
      n8 = EnumeratorList();
        n3.addNode(n8);
      n10 = jj_consume_token(RIGHT_BRACE);
        n9 = JTBToolkit.makeNodeToken(n10);
        n3.addNode(n9);
        n2 = new NodeChoice(n3, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        n12 = jj_consume_token(IDENT);
        n11 = JTBToolkit.makeNodeToken(n12);
        n2 = new NodeChoice(n11, 1, 2);
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new EnumSpecifier(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public EnumeratorList EnumeratorList() throws ParseException {
  // --- JTB generated node declarations ---
  Enumerator n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeOptional n5 = null;
  Enumerator n6 = null;
    n0 = Enumerator();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 222:
        ;
        break;
      default:
        jj_la1[86] = jj_gen;
        break label_19;
      }
      n5 = new NodeOptional();
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(222);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSSIBLE_COCOA_TYPE:
      case POSSIBLE_CORE_TYPE:
      case IDENT:
        n6 = Enumerator();
        n5.addNode(n6);
        break;
      default:
        jj_la1[87] = jj_gen;
        ;
      }
      n2.addNode(n5);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new EnumeratorList(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public Enumerator Enumerator() throws ParseException {
  // --- JTB generated node declarations ---
  ObjCIDENT n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ConstantExpression n5 = null;
    n0 = ObjCIDENT();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(ASSIGN);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = ConstantExpression();
      n2.addNode(n5);
      n1.addNode(n2);
      break;
    default:
      jj_la1[88] = jj_gen;
      ;
    }
    {if (true) return new Enumerator(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public Declarator Declarator() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Block n1 = null;
  NodeSequence n2 = null;
  NodeOptional n3 = new NodeOptional();
  Pointer n4 = null;
  DirectDeclarator n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  ConstantExpression n10 = null;
  NodeSequence n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  ConstantExpression n14 = null;
  TypeSpecifier n15 = null;
    if (jj_2_64(3)) {
      n1 = Block();
      n0 = new NodeChoice(n1, 0, 4);
    } else if (jj_2_65(3)) {
      n2 = new NodeSequence(3);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        n4 = Pointer();
        n3.addNode(n4);
        break;
      default:
        jj_la1[89] = jj_gen;
        ;
      }
      n2.addNode(n3);
      n5 = DirectDeclarator();
      n2.addNode(n5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        n7 = new NodeSequence(2);
        n9 = jj_consume_token(COLON);
        n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
        n10 = ConstantExpression();
        n7.addNode(n10);
        n6.addNode(n7);
        break;
      default:
        jj_la1[90] = jj_gen;
        ;
      }
      n2.addNode(n6);
      n0 = new NodeChoice(n2, 1, 4);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
      n11 = new NodeSequence(2);
        n13 = jj_consume_token(COLON);
      n12 = JTBToolkit.makeNodeToken(n13);
      n11.addNode(n12);
        n14 = ConstantExpression();
      n11.addNode(n14);
      n0 = new NodeChoice(n11, 2, 4);
        break;
      default:
        jj_la1[91] = jj_gen;
        if (jj_2_66(2)) {
          n15 = TypeSpecifier();
      n0 = new NodeChoice(n15, 3, 4);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return new Declarator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Block Block() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  NodeChoice n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeSequence n8 = null;
  ObjCIDENT n9 = null;
  NodeOptional n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeOptional n15 = new NodeOptional();
  ObjCIDENT n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  ParameterList n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
    case VOID:
    case ID:
    case POSSIBLE_COCOA_TYPE:
    case POSSIBLE_CORE_TYPE:
    case IDENT:
      n10 = new NodeOptional();
      if (jj_2_67(3)) {
        n3 = jj_consume_token(VOID);
        n2 = JTBToolkit.makeNodeToken(n3);
        n1 = new NodeChoice(n2, 0, 4);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOL:
          n5 = jj_consume_token(BOOL);
        n4 = JTBToolkit.makeNodeToken(n5);
        n1 = new NodeChoice(n4, 1, 4);
          break;
        case ID:
          n7 = jj_consume_token(ID);
        n6 = JTBToolkit.makeNodeToken(n7);
        n1 = new NodeChoice(n6, 2, 4);
          break;
        case POSSIBLE_COCOA_TYPE:
        case POSSIBLE_CORE_TYPE:
        case IDENT:
        n8 = new NodeSequence(2);
          n9 = ObjCIDENT();
        n8.addNode(n9);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STAR:
            n12 = jj_consume_token(STAR);
          n11 = JTBToolkit.makeNodeToken(n12);
          n10.addNode(n11);
            break;
          default:
            jj_la1[92] = jj_gen;
            ;
          }
        n8.addNode(n10);
        n1 = new NodeChoice(n8, 3, 4);
          break;
        default:
          jj_la1[93] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      n0.addNode(n1);
      break;
    default:
      jj_la1[94] = jj_gen;
      ;
    }
    n14 = jj_consume_token(BLOCK);
    n13 = JTBToolkit.makeNodeToken(n14);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POSSIBLE_COCOA_TYPE:
    case POSSIBLE_CORE_TYPE:
    case IDENT:
      n16 = ObjCIDENT();
      n15.addNode(n16);
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
    n18 = jj_consume_token(RIGHT_PAREN);
    n17 = JTBToolkit.makeNodeToken(n18);
    n20 = jj_consume_token(LEFT_PAREN);
    n19 = JTBToolkit.makeNodeToken(n20);
    n21 = ParameterList();
    n23 = jj_consume_token(RIGHT_PAREN);
    n22 = JTBToolkit.makeNodeToken(n23);
    {if (true) return new Block(n0, n13, n15, n17, n19, n21, n22);}
    throw new Error("Missing return statement in function");
  }

  final public DirectDeclarator DirectDeclarator() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  ObjCIDENT n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Declarator n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeListOptional n8 = new NodeListOptional();
  NodeChoice n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeOptional n13 = null;
  ConstantExpression n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeSequence n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  ParameterTypeList n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeSequence n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeOptional n26 = null;
  IdentifierList n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  // --- user BNFProduction java block ---
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POSSIBLE_COCOA_TYPE:
    case POSSIBLE_CORE_TYPE:
    case IDENT:
      n1 = ObjCIDENT();
        t = jtbrt_ObjCIDENT;
        if (!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()) {
          addType(t.image);
        }
        n0 = new NodeChoice(n1, 0, 2);
      break;
    default:
      jj_la1[96] = jj_gen;
      if (jj_2_68(3)) {
        n2 = new NodeSequence(3);
        n4 = jj_consume_token(LEFT_PAREN);
        n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
        n5 = Declarator();
        n2.addNode(n5);
        n7 = jj_consume_token(RIGHT_PAREN);
        n6 = JTBToolkit.makeNodeToken(n7);
        n2.addNode(n6);
        n0 = new NodeChoice(n2, 1, 2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    typedefParsingStack.push(Boolean.FALSE);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case LEFT_SQUARE:
        ;
        break;
      default:
        jj_la1[97] = jj_gen;
        break label_20;
      }
      n13 = new NodeOptional();
      n26 = new NodeOptional();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_SQUARE:
        n10 = new NodeSequence(3);
        n12 = jj_consume_token(LEFT_SQUARE);
        n11 = JTBToolkit.makeNodeToken(n12);
        n10.addNode(n11);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case STAR:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case INTEGER_CONSTANT:
        case SIZEOF:
        case NIL:
        case LEFT_PAREN:
        case LEFT_SQUARE:
        case AT_PROTOCOL:
        case AT_ENCODE:
        case AT_SELECTOR:
        case POSSIBLE_COCOA_TYPE:
        case POSSIBLE_CORE_TYPE:
        case IDENT:
          n14 = ConstantExpression();
          n13.addNode(n14);
          break;
        default:
          jj_la1[98] = jj_gen;
          ;
        }
        n10.addNode(n13);
        n16 = jj_consume_token(RIGHT_SQUARE);
        n15 = JTBToolkit.makeNodeToken(n16);
        n10.addNode(n15);
        n9 = new NodeChoice(n10, 0, 3);
        break;
      default:
        jj_la1[100] = jj_gen;
        if (jj_2_69(3)) {
        n17 = new NodeSequence(3);
          n19 = jj_consume_token(LEFT_PAREN);
        n18 = JTBToolkit.makeNodeToken(n19);
        n17.addNode(n18);
          n20 = ParameterTypeList();
        n17.addNode(n20);
          n22 = jj_consume_token(RIGHT_PAREN);
        n21 = JTBToolkit.makeNodeToken(n22);
        n17.addNode(n21);
        n9 = new NodeChoice(n17, 1, 3);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LEFT_PAREN:
        n23 = new NodeSequence(3);
            n25 = jj_consume_token(LEFT_PAREN);
        n24 = JTBToolkit.makeNodeToken(n25);
        n23.addNode(n24);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IDENT:
              n27 = IdentifierList();
          n26.addNode(n27);
              break;
            default:
              jj_la1[99] = jj_gen;
              ;
            }
        n23.addNode(n26);
            n29 = jj_consume_token(RIGHT_PAREN);
        n28 = JTBToolkit.makeNodeToken(n29);
        n23.addNode(n28);
        n9 = new NodeChoice(n23, 2, 3);
            break;
          default:
            jj_la1[101] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      n8.addNode(n9);
    }
    n8.nodes.trimToSize();
    typedefParsingStack.pop();
    {if (true) return new DirectDeclarator(n0, n8);}
    throw new Error("Missing return statement in function");
  }

  final public Pointer Pointer() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  TypeQualifierList n3 = null;
  NodeOptional n4 = new NodeOptional();
  Pointer n5 = null;
    n1 = jj_consume_token(STAR);
    n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOLATILE:
    case CONST:
      n3 = TypeQualifierList();
      n2.addNode(n3);
      break;
    default:
      jj_la1[102] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      n5 = Pointer();
      n4.addNode(n5);
      break;
    default:
      jj_la1[103] = jj_gen;
      ;
    }
    {if (true) return new Pointer(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  final public TypeQualifierList TypeQualifierList() throws ParseException {
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  TypeQualifier n1 = null;
    label_21:
    while (true) {
      n1 = TypeQualifier();
      n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOLATILE:
      case CONST:
        ;
        break;
      default:
        jj_la1[104] = jj_gen;
        break label_21;
      }
    }
    n0.nodes.trimToSize();
    {if (true) return new TypeQualifierList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ParameterTypeList ParameterTypeList() throws ParseException {
  // --- JTB generated node declarations ---
  ParameterList n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    n0 = ParameterList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 222:
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(222);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n6 = jj_consume_token(ELLIPSIS);
      n5 = JTBToolkit.makeNodeToken(n6);
      n2.addNode(n5);
      n1.addNode(n2);
      break;
    default:
      jj_la1[105] = jj_gen;
      ;
    }
    {if (true) return new ParameterTypeList(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public ParameterList ParameterList() throws ParseException {
  // --- JTB generated node declarations ---
  ParameterDeclaration n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ParameterDeclaration n5 = null;
    n0 = ParameterDeclaration();
    label_22:
    while (true) {
      if (jj_2_70(2)) {
        ;
      } else {
        break label_22;
      }
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(222);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = ParameterDeclaration();
      n2.addNode(n5);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new ParameterList(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public ParameterDeclaration ParameterDeclaration() throws ParseException {
  // --- JTB generated node declarations ---
  DeclarationSpecifiers n0 = null;
  NodeChoice n1 = null;
  Declarator n2 = null;
  NodeOptional n3 = new NodeOptional();
  AbstractDeclarator n4 = null;
    n0 = DeclarationSpecifiers();
    if (jj_2_71(2147483647)) {
      n2 = Declarator();
        n1 = new NodeChoice(n2, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case LEFT_PAREN:
      case LEFT_SQUARE:
        n4 = AbstractDeclarator();
          n3.addNode(n4);
        break;
      default:
        jj_la1[106] = jj_gen;
        ;
      }
        n1 = new NodeChoice(n3, 1, 2);
    }
    {if (true) return new ParameterDeclaration(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public IdentifierList IdentifierList() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    n1 = jj_consume_token(IDENT);
    n0 = JTBToolkit.makeNodeToken(n1);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 222:
        ;
        break;
      default:
        jj_la1[107] = jj_gen;
        break label_23;
      }
      n3 = new NodeSequence(2);
      n5 = jj_consume_token(222);
      n4 = JTBToolkit.makeNodeToken(n5);
      n3.addNode(n4);
      n7 = jj_consume_token(IDENT);
      n6 = JTBToolkit.makeNodeToken(n7);
      n3.addNode(n6);
      n2.addNode(n3);
    }
    n2.nodes.trimToSize();
    {if (true) return new IdentifierList(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public Initializer Initializer() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  AssignmentExpression n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  InitializerList n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case STAR:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case INTEGER_CONSTANT:
    case SIZEOF:
    case NIL:
    case LEFT_PAREN:
    case LEFT_SQUARE:
    case AT_PROTOCOL:
    case AT_ENCODE:
    case AT_SELECTOR:
    case POSSIBLE_COCOA_TYPE:
    case POSSIBLE_CORE_TYPE:
    case IDENT:
      n1 = AssignmentExpression();
        n0 = new NodeChoice(n1, 0, 2);
      break;
    case LEFT_BRACE:
        n2 = new NodeSequence(4);
      n4 = jj_consume_token(LEFT_BRACE);
        n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
      n5 = InitializerList();
        n2.addNode(n5);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 222:
        n8 = jj_consume_token(222);
          n7 = JTBToolkit.makeNodeToken(n8);
          n6.addNode(n7);
        break;
      default:
        jj_la1[108] = jj_gen;
        ;
      }
        n2.addNode(n6);
      n10 = jj_consume_token(RIGHT_BRACE);
        n9 = JTBToolkit.makeNodeToken(n10);
        n2.addNode(n9);
        n0 = new NodeChoice(n2, 1, 2);
      break;
    default:
      jj_la1[109] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Initializer(n0);}
    throw new Error("Missing return statement in function");
  }

  final public InitializerList InitializerList() throws ParseException {
  // --- JTB generated node declarations ---
  Initializer n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Initializer n5 = null;
    n0 = Initializer();
    label_24:
    while (true) {
      if (jj_2_72(2)) {
        ;
      } else {
        break label_24;
      }
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(222);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = Initializer();
      n2.addNode(n5);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new InitializerList(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public TypeName TypeName() throws ParseException {
  // --- JTB generated node declarations ---
  SpecifierQualifierList n0 = null;
  NodeOptional n1 = new NodeOptional();
  AbstractDeclarator n2 = null;
    n0 = SpecifierQualifierList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
    case LEFT_PAREN:
    case LEFT_SQUARE:
      n2 = AbstractDeclarator();
      n1.addNode(n2);
      break;
    default:
      jj_la1[110] = jj_gen;
      ;
    }
    {if (true) return new TypeName(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public TypeNameWithUnknownType TypeNameWithUnknownType() throws ParseException {
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  SpecifierQualifierWithUnknownType n1 = null;
  NodeOptional n2 = new NodeOptional();
  AbstractDeclarator n3 = null;
    label_25:
    while (true) {
      n1 = SpecifierQualifierWithUnknownType();
      n0.addNode(n1);
      if (jj_2_73(1)) {
        ;
      } else {
        break label_25;
      }
    }
    n0.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
    case LEFT_PAREN:
    case LEFT_SQUARE:
      n3 = AbstractDeclarator();
      n2.addNode(n3);
      break;
    default:
      jj_la1[111] = jj_gen;
      ;
    }
    {if (true) return new TypeNameWithUnknownType(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public AbstractDeclarator AbstractDeclarator() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Pointer n1 = null;
  NodeSequence n2 = null;
  NodeOptional n3 = new NodeOptional();
  Pointer n4 = null;
  DirectAbstractDeclarator n5 = null;
    if (jj_2_74(3)) {
      n1 = Pointer();
        n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case LEFT_PAREN:
      case LEFT_SQUARE:
        n2 = new NodeSequence(2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          n4 = Pointer();
          n3.addNode(n4);
          break;
        default:
          jj_la1[112] = jj_gen;
          ;
        }
        n2.addNode(n3);
        n5 = DirectAbstractDeclarator();
        n2.addNode(n5);
        n0 = new NodeChoice(n2, 1, 2);
        break;
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new AbstractDeclarator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public DirectAbstractDeclarator DirectAbstractDeclarator() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  AbstractDeclarator n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeOptional n10 = new NodeOptional();
  ConstantExpression n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeOptional n17 = new NodeOptional();
  ParameterTypeList n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeListOptional n21 = new NodeListOptional();
  NodeChoice n22 = null;
  NodeSequence n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeOptional n26 = null;
  ConstantExpression n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  NodeSequence n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  NodeOptional n33 = null;
  ParameterTypeList n34 = null;
  NodeToken n35 = null;
  Token n36 = null;
    if (jj_2_76(2)) {
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(LEFT_PAREN);
        n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n4 = AbstractDeclarator();
        n1.addNode(n4);
      n6 = jj_consume_token(RIGHT_PAREN);
        n5 = JTBToolkit.makeNodeToken(n6);
        n1.addNode(n5);
        n0 = new NodeChoice(n1, 0, 3);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_SQUARE:
        n7 = new NodeSequence(3);
        n9 = jj_consume_token(LEFT_SQUARE);
        n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case STAR:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case INTEGER_CONSTANT:
        case SIZEOF:
        case NIL:
        case LEFT_PAREN:
        case LEFT_SQUARE:
        case AT_PROTOCOL:
        case AT_ENCODE:
        case AT_SELECTOR:
        case POSSIBLE_COCOA_TYPE:
        case POSSIBLE_CORE_TYPE:
        case IDENT:
          n11 = ConstantExpression();
          n10.addNode(n11);
          break;
        default:
          jj_la1[114] = jj_gen;
          ;
        }
        n7.addNode(n10);
        n13 = jj_consume_token(RIGHT_SQUARE);
        n12 = JTBToolkit.makeNodeToken(n13);
        n7.addNode(n12);
        n0 = new NodeChoice(n7, 1, 3);
        break;
      case LEFT_PAREN:
        n14 = new NodeSequence(3);
        n16 = jj_consume_token(LEFT_PAREN);
        n15 = JTBToolkit.makeNodeToken(n16);
        n14.addNode(n15);
        if (jj_2_75(1)) {
          n18 = ParameterTypeList();
          n17.addNode(n18);
        } else {
          ;
        }
        n14.addNode(n17);
        n20 = jj_consume_token(RIGHT_PAREN);
        n19 = JTBToolkit.makeNodeToken(n20);
        n14.addNode(n19);
        n0 = new NodeChoice(n14, 2, 3);
        break;
      default:
        jj_la1[115] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
      case LEFT_SQUARE:
        ;
        break;
      default:
        jj_la1[116] = jj_gen;
        break label_26;
      }
      n26 = new NodeOptional();
      n33 = new NodeOptional();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_SQUARE:
        n23 = new NodeSequence(3);
        n25 = jj_consume_token(LEFT_SQUARE);
        n24 = JTBToolkit.makeNodeToken(n25);
        n23.addNode(n24);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case STAR:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case INTEGER_CONSTANT:
        case SIZEOF:
        case NIL:
        case LEFT_PAREN:
        case LEFT_SQUARE:
        case AT_PROTOCOL:
        case AT_ENCODE:
        case AT_SELECTOR:
        case POSSIBLE_COCOA_TYPE:
        case POSSIBLE_CORE_TYPE:
        case IDENT:
          n27 = ConstantExpression();
          n26.addNode(n27);
          break;
        default:
          jj_la1[117] = jj_gen;
          ;
        }
        n23.addNode(n26);
        n29 = jj_consume_token(RIGHT_SQUARE);
        n28 = JTBToolkit.makeNodeToken(n29);
        n23.addNode(n28);
        n22 = new NodeChoice(n23, 0, 2);
        break;
      case LEFT_PAREN:
        n30 = new NodeSequence(3);
        n32 = jj_consume_token(LEFT_PAREN);
        n31 = JTBToolkit.makeNodeToken(n32);
        n30.addNode(n31);
        if (jj_2_77(1)) {
          n34 = ParameterTypeList();
          n33.addNode(n34);
        } else {
          ;
        }
        n30.addNode(n33);
        n36 = jj_consume_token(RIGHT_PAREN);
        n35 = JTBToolkit.makeNodeToken(n36);
        n30.addNode(n35);
        n22 = new NodeChoice(n30, 1, 2);
        break;
      default:
        jj_la1[118] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n21.addNode(n22);
    }
    n21.nodes.trimToSize();
    {if (true) return new DirectAbstractDeclarator(n0, n21);}
    throw new Error("Missing return statement in function");
  }

  final public TypedefName TypedefName() throws ParseException {
  // --- JTB generated node declarations ---
  ObjCIDENT n0 = null;
    n0 = ObjCIDENT();
    {if (true) return new TypedefName(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Statement Statement() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  LabeledStatement n1 = null;
  InitStatement n2 = null;
  ExpressionStatement n3 = null;
  CompoundStatement n4 = null;
  SelectionStatement n5 = null;
  IterationStatement n6 = null;
  JumpStatement n7 = null;
    if (jj_2_78(2)) {
      n1 = LabeledStatement();
        n0 = new NodeChoice(n1, 0, 7);
    } else if (jj_2_79(3)) {
      n2 = InitStatement();
        n0 = new NodeChoice(n2, 1, 7);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case STAR:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case INTEGER_CONSTANT:
      case SIZEOF:
      case NIL:
      case LEFT_PAREN:
      case LEFT_SQUARE:
      case SEMICOLON:
      case AT_PROTOCOL:
      case AT_ENCODE:
      case AT_SELECTOR:
      case POSSIBLE_COCOA_TYPE:
      case POSSIBLE_CORE_TYPE:
      case IDENT:
        n3 = ExpressionStatement();
        n0 = new NodeChoice(n3, 2, 7);
        break;
      case LEFT_BRACE:
        n4 = CompoundStatement();
        n0 = new NodeChoice(n4, 3, 7);
        break;
      case SWITCH:
      case IF:
        n5 = SelectionStatement();
        n0 = new NodeChoice(n5, 4, 7);
        break;
      case WHILE:
      case FOR:
      case DO:
        n6 = IterationStatement();
        n0 = new NodeChoice(n6, 5, 7);
        break;
      case CONTINUE:
      case RETURN:
      case BREAK:
      case GOTO:
        n7 = JumpStatement();
        n0 = new NodeChoice(n7, 6, 7);
        break;
      default:
        jj_la1[119] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new Statement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public LabeledStatement LabeledStatement() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Statement n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  ConstantExpression n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  Statement n13 = null;
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  Statement n19 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(IDENT);
        n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(COLON);
        n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n6 = Statement();
        n1.addNode(n6);
        n0 = new NodeChoice(n1, 0, 3);
      break;
    case CASE:
        n7 = new NodeSequence(4);
      n9 = jj_consume_token(CASE);
        n8 = JTBToolkit.makeNodeToken(n9);
        n7.addNode(n8);
      n10 = ConstantExpression();
        n7.addNode(n10);
      n12 = jj_consume_token(COLON);
        n11 = JTBToolkit.makeNodeToken(n12);
        n7.addNode(n11);
      n13 = Statement();
        n7.addNode(n13);
        n0 = new NodeChoice(n7, 1, 3);
      break;
    case DFLT:
        n14 = new NodeSequence(3);
      n16 = jj_consume_token(DFLT);
        n15 = JTBToolkit.makeNodeToken(n16);
        n14.addNode(n15);
      n18 = jj_consume_token(COLON);
        n17 = JTBToolkit.makeNodeToken(n18);
        n14.addNode(n17);
      n19 = Statement();
        n14.addNode(n19);
        n0 = new NodeChoice(n14, 2, 3);
      break;
    default:
      jj_la1[120] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new LabeledStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public InitStatement InitStatement() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  TypeSpecifier n1 = null;
  NodeOptional n2 = new NodeOptional();
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeListOptional n7 = new NodeListOptional();
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeChoice n13 = null;
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeChoice n17 = null;
  MessageExpression n18 = null;
  PostfixExpression n19 = null;
  NodeChoice n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeSequence n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  InitStatement n26 = null;
  NodeToken n27 = null;
  Token n28 = null;
    if (jj_2_80(2)) {
      n1 = TypeSpecifier();
      n0.addNode(n1);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      n4 = jj_consume_token(STAR);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      break;
    default:
      jj_la1[121] = jj_gen;
      ;
    }
    n6 = jj_consume_token(IDENT);
    n5 = JTBToolkit.makeNodeToken(n6);
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 222:
        ;
        break;
      default:
        jj_la1[122] = jj_gen;
        break label_27;
      }
      n8 = new NodeSequence(2);
      n10 = jj_consume_token(222);
      n9 = JTBToolkit.makeNodeToken(n10);
      n8.addNode(n9);
      n12 = jj_consume_token(IDENT);
      n11 = JTBToolkit.makeNodeToken(n12);
      n8.addNode(n11);
      n7.addNode(n8);
    }
    n7.nodes.trimToSize();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
        n14 = new NodeSequence(3);
      n16 = jj_consume_token(ASSIGN);
        n15 = JTBToolkit.makeNodeToken(n16);
        n14.addNode(n15);
      if (jj_2_81(3)) {
        n18 = MessageExpression();
            n17 = new NodeChoice(n18, 0, 2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case INTEGER_CONSTANT:
        case NIL:
        case LEFT_PAREN:
        case LEFT_SQUARE:
        case AT_PROTOCOL:
        case AT_ENCODE:
        case AT_SELECTOR:
        case POSSIBLE_COCOA_TYPE:
        case POSSIBLE_CORE_TYPE:
        case IDENT:
          n19 = PostfixExpression();
            n17 = new NodeChoice(n19, 1, 2);
          break;
        default:
          jj_la1[123] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        n14.addNode(n17);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        n22 = jj_consume_token(SEMICOLON);
            n21 = JTBToolkit.makeNodeToken(n22);
            n20 = new NodeChoice(n21, 0, 2);
        break;
      case 222:
            n23 = new NodeSequence(2);
        n25 = jj_consume_token(222);
            n24 = JTBToolkit.makeNodeToken(n25);
            n23.addNode(n24);
        n26 = InitStatement();
            n23.addNode(n26);
            n20 = new NodeChoice(n23, 1, 2);
        break;
      default:
        jj_la1[124] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        n14.addNode(n20);
        n13 = new NodeChoice(n14, 0, 2);
      break;
    case SEMICOLON:
      n28 = jj_consume_token(SEMICOLON);
        n27 = JTBToolkit.makeNodeToken(n28);
        n13 = new NodeChoice(n27, 1, 2);
      break;
    default:
      jj_la1[125] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new InitStatement(n0, n2, n5, n7, n13);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionStatement ExpressionStatement() throws ParseException {
  // --- JTB generated node declarations ---
  NodeOptional n0 = new NodeOptional();
  Expression n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case STAR:
    case BIT_AND:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case INTEGER_CONSTANT:
    case SIZEOF:
    case NIL:
    case LEFT_PAREN:
    case LEFT_SQUARE:
    case AT_PROTOCOL:
    case AT_ENCODE:
    case AT_SELECTOR:
    case POSSIBLE_COCOA_TYPE:
    case POSSIBLE_CORE_TYPE:
    case IDENT:
      n1 = Expression();
      n0.addNode(n1);
      break;
    default:
      jj_la1[126] = jj_gen;
      ;
    }
    n3 = jj_consume_token(SEMICOLON);
    n2 = JTBToolkit.makeNodeToken(n3);
    {if (true) return new ExpressionStatement(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  final public CompoundStatement CompoundStatement() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeChoice n3 = null;
  DeclarationList n4 = null;
  StatementList n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    n1 = jj_consume_token(LEFT_BRACE);
    n0 = JTBToolkit.makeNodeToken(n1);
    label_28:
    while (true) {
      if (jj_2_82(1)) {
        ;
      } else {
        break label_28;
      }
      if (jj_2_83(2147483647)) {
        n4 = DeclarationList();
        n3 = new NodeChoice(n4, 0, 2);
      } else if (jj_2_84(1)) {
        n5 = StatementList();
        n3 = new NodeChoice(n5, 1, 2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2.addNode(n3);
    }
    n2.nodes.trimToSize();
    n7 = jj_consume_token(RIGHT_BRACE);
    n6 = JTBToolkit.makeNodeToken(n7);
    {if (true) return new CompoundStatement(n0, n2, n6);}
    throw new Error("Missing return statement in function");
  }

  final public StatementList StatementList() throws ParseException {
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  Statement n1 = null;
    label_29:
    while (true) {
      n1 = Statement();
      n0.addNode(n1);
      if (jj_2_85(2)) {
        ;
      } else {
        break label_29;
      }
    }
    n0.nodes.trimToSize();
    {if (true) return new StatementList(n0);}
    throw new Error("Missing return statement in function");
  }

  final public SelectionStatement SelectionStatement() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  NestedLogicalExpression n7 = null;
  Expression n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  Statement n11 = null;
  NodeOptional n12 = new NodeOptional();
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  Statement n16 = null;
  NodeSequence n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  Expression n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  Statement n25 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
        n1 = new NodeSequence(7);
      n3 = jj_consume_token(IF);
        n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(LEFT_PAREN);
        n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      if (jj_2_86(2)) {
        n7 = NestedLogicalExpression();
          n6.addNode(n7);
      } else {
        ;
      }
        n1.addNode(n6);
      n8 = Expression();
        n1.addNode(n8);
      n10 = jj_consume_token(RIGHT_PAREN);
        n9 = JTBToolkit.makeNodeToken(n10);
        n1.addNode(n9);
      n11 = Statement();
        n1.addNode(n11);
      if (jj_2_87(2)) {
          n13 = new NodeSequence(2);
        n15 = jj_consume_token(ELSE);
          n14 = JTBToolkit.makeNodeToken(n15);
          n13.addNode(n14);
        n16 = Statement();
          n13.addNode(n16);
          n12.addNode(n13);
      } else {
        ;
      }
        n1.addNode(n12);
        n0 = new NodeChoice(n1, 0, 2);
      break;
    case SWITCH:
        n17 = new NodeSequence(5);
      n19 = jj_consume_token(SWITCH);
        n18 = JTBToolkit.makeNodeToken(n19);
        n17.addNode(n18);
      n21 = jj_consume_token(LEFT_PAREN);
        n20 = JTBToolkit.makeNodeToken(n21);
        n17.addNode(n20);
      n22 = Expression();
        n17.addNode(n22);
      n24 = jj_consume_token(RIGHT_PAREN);
        n23 = JTBToolkit.makeNodeToken(n24);
        n17.addNode(n23);
      n25 = Statement();
        n17.addNode(n25);
        n0 = new NodeChoice(n17, 1, 2);
      break;
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new SelectionStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NestedLogicalExpression NestedLogicalExpression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeOptional n2 = new NodeOptional();
  NestedLogicalExpression n3 = null;
  Expression n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  LogicalOperator n7 = null;
    n1 = jj_consume_token(LEFT_PAREN);
    n0 = JTBToolkit.makeNodeToken(n1);
    if (jj_2_88(2)) {
      n3 = NestedLogicalExpression();
      n2.addNode(n3);
    } else {
      ;
    }
    n4 = Expression();
    n6 = jj_consume_token(RIGHT_PAREN);
    n5 = JTBToolkit.makeNodeToken(n6);
    n7 = LogicalOperator();
    {if (true) return new NestedLogicalExpression(n0, n2, n4, n5, n7);}
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator LogicalOperator() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case XOR:
      n2 = jj_consume_token(XOR);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 4);
      break;
    case EQ:
      n4 = jj_consume_token(EQ);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 4);
      break;
    case SC_OR:
      n6 = jj_consume_token(SC_OR);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 2, 4);
      break;
    case SC_AND:
      n8 = jj_consume_token(SC_AND);
      n7 = JTBToolkit.makeNodeToken(n8);
      n0 = new NodeChoice(n7, 3, 4);
      break;
    default:
      jj_la1[128] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new LogicalOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public IterationStatement IterationStatement() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Expression n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  Statement n9 = null;
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  Statement n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  Expression n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeSequence n23 = null;
  NodeToken n24 = null;
  Token n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeChoice n28 = null;
  NodeSequence n29 = null;
  TypeSpecifier n30 = null;
  NodeToken n31 = null;
  Token n32 = null;
  In n33 = null;
  PrimaryExpression n34 = null;
  NodeSequence n35 = null;
  NodeOptional n36 = new NodeOptional();
  NumberTypeInit n37 = null;
  NodeOptional n38 = new NodeOptional();
  Expression n39 = null;
  NodeToken n40 = null;
  Token n41 = null;
  NodeOptional n42 = new NodeOptional();
  Expression n43 = null;
  NodeToken n44 = null;
  Token n45 = null;
  NodeOptional n46 = new NodeOptional();
  Expression n47 = null;
  NodeToken n48 = null;
  Token n49 = null;
  Statement n50 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
        n1 = new NodeSequence(5);
      n3 = jj_consume_token(WHILE);
        n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(LEFT_PAREN);
        n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n6 = Expression();
        n1.addNode(n6);
      n8 = jj_consume_token(RIGHT_PAREN);
        n7 = JTBToolkit.makeNodeToken(n8);
        n1.addNode(n7);
      n9 = Statement();
        n1.addNode(n9);
        n0 = new NodeChoice(n1, 0, 3);
      break;
    case DO:
        n10 = new NodeSequence(7);
      n12 = jj_consume_token(DO);
        n11 = JTBToolkit.makeNodeToken(n12);
        n10.addNode(n11);
      n13 = Statement();
        n10.addNode(n13);
      n15 = jj_consume_token(WHILE);
        n14 = JTBToolkit.makeNodeToken(n15);
        n10.addNode(n14);
      n17 = jj_consume_token(LEFT_PAREN);
        n16 = JTBToolkit.makeNodeToken(n17);
        n10.addNode(n16);
      n18 = Expression();
        n10.addNode(n18);
      n20 = jj_consume_token(RIGHT_PAREN);
        n19 = JTBToolkit.makeNodeToken(n20);
        n10.addNode(n19);
      n22 = jj_consume_token(SEMICOLON);
        n21 = JTBToolkit.makeNodeToken(n22);
        n10.addNode(n21);
        n0 = new NodeChoice(n10, 1, 3);
      break;
    case FOR:
        n23 = new NodeSequence(5);
      n25 = jj_consume_token(FOR);
        n24 = JTBToolkit.makeNodeToken(n25);
        n23.addNode(n24);
      n27 = jj_consume_token(LEFT_PAREN);
        n26 = JTBToolkit.makeNodeToken(n27);
        n23.addNode(n26);
      if (jj_2_90(3)) {
            n29 = new NodeSequence(4);
        n30 = TypeSpecifier();
            n29.addNode(n30);
        n32 = jj_consume_token(IDENT);
            n31 = JTBToolkit.makeNodeToken(n32);
            n29.addNode(n31);
        n33 = In();
            n29.addNode(n33);
        n34 = PrimaryExpression();
            n29.addNode(n34);
            n28 = new NodeChoice(n29, 0, 2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case STAR:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case INTEGER_CONSTANT:
        case FIXED_NUM_TYPE:
        case DOUBLE:
        case SIZEOF:
        case FLOAT:
        case NIL:
        case LEFT_PAREN:
        case LEFT_SQUARE:
        case SEMICOLON:
        case AT_PROTOCOL:
        case AT_ENCODE:
        case AT_SELECTOR:
        case POSSIBLE_COCOA_TYPE:
        case POSSIBLE_CORE_TYPE:
        case IDENT:
            n35 = new NodeSequence(6);
          if (jj_2_89(2147483647)) {
            n37 = NumberTypeInit();
              n36.addNode(n37);
          } else {
            ;
          }
            n35.addNode(n36);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BANG:
          case TILDE:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:
          case STAR:
          case BIT_AND:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case INTEGER_CONSTANT:
          case SIZEOF:
          case NIL:
          case LEFT_PAREN:
          case LEFT_SQUARE:
          case AT_PROTOCOL:
          case AT_ENCODE:
          case AT_SELECTOR:
          case POSSIBLE_COCOA_TYPE:
          case POSSIBLE_CORE_TYPE:
          case IDENT:
            n39 = Expression();
              n38.addNode(n39);
            break;
          default:
            jj_la1[129] = jj_gen;
            ;
          }
            n35.addNode(n38);
          n41 = jj_consume_token(SEMICOLON);
            n40 = JTBToolkit.makeNodeToken(n41);
            n35.addNode(n40);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BANG:
          case TILDE:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:
          case STAR:
          case BIT_AND:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case INTEGER_CONSTANT:
          case SIZEOF:
          case NIL:
          case LEFT_PAREN:
          case LEFT_SQUARE:
          case AT_PROTOCOL:
          case AT_ENCODE:
          case AT_SELECTOR:
          case POSSIBLE_COCOA_TYPE:
          case POSSIBLE_CORE_TYPE:
          case IDENT:
            n43 = Expression();
              n42.addNode(n43);
            break;
          default:
            jj_la1[130] = jj_gen;
            ;
          }
            n35.addNode(n42);
          n45 = jj_consume_token(SEMICOLON);
            n44 = JTBToolkit.makeNodeToken(n45);
            n35.addNode(n44);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BANG:
          case TILDE:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:
          case STAR:
          case BIT_AND:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case INTEGER_CONSTANT:
          case SIZEOF:
          case NIL:
          case LEFT_PAREN:
          case LEFT_SQUARE:
          case AT_PROTOCOL:
          case AT_ENCODE:
          case AT_SELECTOR:
          case POSSIBLE_COCOA_TYPE:
          case POSSIBLE_CORE_TYPE:
          case IDENT:
            n47 = Expression();
              n46.addNode(n47);
            break;
          default:
            jj_la1[131] = jj_gen;
            ;
          }
            n35.addNode(n46);
            n28 = new NodeChoice(n35, 1, 2);
          break;
        default:
          jj_la1[132] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
        n23.addNode(n28);
      n49 = jj_consume_token(RIGHT_PAREN);
        n48 = JTBToolkit.makeNodeToken(n49);
        n23.addNode(n48);
      n50 = Statement();
        n23.addNode(n50);
        n0 = new NodeChoice(n23, 2, 3);
      break;
    default:
      jj_la1[133] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new IterationStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public NumberTypeInit NumberTypeInit() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FIXED_NUM_TYPE:
      n2 = jj_consume_token(FIXED_NUM_TYPE);
        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0, 3);
      break;
    case FLOAT:
      n4 = jj_consume_token(FLOAT);
        n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1, 3);
      break;
    case DOUBLE:
      n6 = jj_consume_token(DOUBLE);
        n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2, 3);
      break;
    default:
      jj_la1[134] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new NumberTypeInit(n0);}
    throw new Error("Missing return statement in function");
  }

  final public JumpStatement JumpStatement() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
  NodeSequence n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeOptional n21 = new NodeOptional();
  Expression n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GOTO:
        n1 = new NodeSequence(3);
      n3 = jj_consume_token(GOTO);
        n2 = JTBToolkit.makeNodeToken(n3);
        n1.addNode(n2);
      n5 = jj_consume_token(IDENT);
        n4 = JTBToolkit.makeNodeToken(n5);
        n1.addNode(n4);
      n7 = jj_consume_token(SEMICOLON);
        n6 = JTBToolkit.makeNodeToken(n7);
        n1.addNode(n6);
        n0 = new NodeChoice(n1, 0, 4);
      break;
    case CONTINUE:
        n8 = new NodeSequence(2);
      n10 = jj_consume_token(CONTINUE);
        n9 = JTBToolkit.makeNodeToken(n10);
        n8.addNode(n9);
      n12 = jj_consume_token(SEMICOLON);
        n11 = JTBToolkit.makeNodeToken(n12);
        n8.addNode(n11);
        n0 = new NodeChoice(n8, 1, 4);
      break;
    case BREAK:
        n13 = new NodeSequence(2);
      n15 = jj_consume_token(BREAK);
        n14 = JTBToolkit.makeNodeToken(n15);
        n13.addNode(n14);
      n17 = jj_consume_token(SEMICOLON);
        n16 = JTBToolkit.makeNodeToken(n17);
        n13.addNode(n16);
        n0 = new NodeChoice(n13, 2, 4);
      break;
    case RETURN:
        n18 = new NodeSequence(3);
      n20 = jj_consume_token(RETURN);
        n19 = JTBToolkit.makeNodeToken(n20);
        n18.addNode(n19);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case STAR:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case INTEGER_CONSTANT:
      case SIZEOF:
      case NIL:
      case LEFT_PAREN:
      case LEFT_SQUARE:
      case AT_PROTOCOL:
      case AT_ENCODE:
      case AT_SELECTOR:
      case POSSIBLE_COCOA_TYPE:
      case POSSIBLE_CORE_TYPE:
      case IDENT:
        n22 = Expression();
          n21.addNode(n22);
        break;
      default:
        jj_la1[135] = jj_gen;
        ;
      }
        n18.addNode(n21);
      n24 = jj_consume_token(SEMICOLON);
        n23 = JTBToolkit.makeNodeToken(n24);
        n18.addNode(n23);
        n0 = new NodeChoice(n18, 3, 4);
      break;
    default:
      jj_la1[136] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new JumpStatement(n0);}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
  // --- JTB generated node declarations ---
  AssignmentExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  AssignmentExpression n5 = null;
    n0 = AssignmentExpression();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 222:
        ;
        break;
      default:
        jj_la1[137] = jj_gen;
        break label_30;
      }
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(222);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = AssignmentExpression();
      n2.addNode(n5);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new Expression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentExpression AssignmentExpression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  UnaryExpression n2 = null;
  AssignmentOperator n3 = null;
  AssignmentExpression n4 = null;
  ConditionalExpression n5 = null;
    if (jj_2_91(2147483647)) {
      n1 = new NodeSequence(3);
      n2 = UnaryExpression();
      n1.addNode(n2);
      n3 = AssignmentOperator();
      n1.addNode(n3);
      n4 = AssignmentExpression();
      n1.addNode(n4);
      n0 = new NodeChoice(n1, 0, 2);
    } else if (jj_2_92(3)) {
      n5 = ConditionalExpression();
      n0 = new NodeChoice(n5, 1, 2);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new AssignmentExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public AssignmentOperator AssignmentOperator() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      n2 = jj_consume_token(ASSIGN);
        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0, 11);
      break;
    case STARASSIGN:
      n4 = jj_consume_token(STARASSIGN);
        n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1, 11);
      break;
    case SLASHASSIGN:
      n6 = jj_consume_token(SLASHASSIGN);
        n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2, 11);
      break;
    case REMASSIGN:
      n8 = jj_consume_token(REMASSIGN);
        n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3, 11);
      break;
    case PLUSASSIGN:
      n10 = jj_consume_token(PLUSASSIGN);
        n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4, 11);
      break;
    case MINUSASSIGN:
      n12 = jj_consume_token(MINUSASSIGN);
        n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5, 11);
      break;
    case LSHIFTASSIGN:
      n14 = jj_consume_token(LSHIFTASSIGN);
        n13 = JTBToolkit.makeNodeToken(n14);
        n0 = new NodeChoice(n13, 6, 11);
      break;
    case RSIGNEDSHIFTASSIGN:
      n16 = jj_consume_token(RSIGNEDSHIFTASSIGN);
        n15 = JTBToolkit.makeNodeToken(n16);
        n0 = new NodeChoice(n15, 7, 11);
      break;
    case ANDASSIGN:
      n18 = jj_consume_token(ANDASSIGN);
        n17 = JTBToolkit.makeNodeToken(n18);
        n0 = new NodeChoice(n17, 8, 11);
      break;
    case XORASSIGN:
      n20 = jj_consume_token(XORASSIGN);
        n19 = JTBToolkit.makeNodeToken(n20);
        n0 = new NodeChoice(n19, 9, 11);
      break;
    case ORASSIGN:
      n22 = jj_consume_token(ORASSIGN);
        n21 = JTBToolkit.makeNodeToken(n22);
        n0 = new NodeChoice(n21, 10, 11);
      break;
    default:
      jj_la1[138] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new AssignmentOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalExpression ConditionalExpression() throws ParseException {
  // --- JTB generated node declarations ---
  LogicalORExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Expression n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  ConditionalExpression n8 = null;
    n0 = LogicalORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      n2 = new NodeSequence(4);
      n4 = jj_consume_token(HOOK);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = Expression();
      n2.addNode(n5);
      n7 = jj_consume_token(COLON);
      n6 = JTBToolkit.makeNodeToken(n7);
      n2.addNode(n6);
      n8 = ConditionalExpression();
      n2.addNode(n8);
      n1.addNode(n2);
      break;
    default:
      jj_la1[139] = jj_gen;
      ;
    }
    {if (true) return new ConditionalExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public ConstantExpression ConstantExpression() throws ParseException {
  // --- JTB generated node declarations ---
  ConditionalExpression n0 = null;
    n0 = ConditionalExpression();
    {if (true) return new ConstantExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public LogicalORExpression LogicalORExpression() throws ParseException {
  // --- JTB generated node declarations ---
  LogicalANDExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeChoice n5 = null;
  LogicalORExpression n6 = null;
  NestedLogicalExpression n7 = null;
    n0 = LogicalANDExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SC_OR:
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(SC_OR);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      if (jj_2_93(3)) {
        n6 = LogicalORExpression();
          n5 = new NodeChoice(n6, 0, 2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
          n7 = NestedLogicalExpression();
          n5 = new NodeChoice(n7, 1, 2);
          break;
        default:
          jj_la1[140] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      n2.addNode(n5);
      n1.addNode(n2);
      break;
    default:
      jj_la1[141] = jj_gen;
      ;
    }
    {if (true) return new LogicalORExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public LogicalANDExpression LogicalANDExpression() throws ParseException {
  // --- JTB generated node declarations ---
  InclusiveORExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeChoice n5 = null;
  LogicalANDExpression n6 = null;
  NestedLogicalExpression n7 = null;
    n0 = InclusiveORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SC_AND:
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(SC_AND);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      if (jj_2_94(3)) {
        n6 = LogicalANDExpression();
          n5 = new NodeChoice(n6, 0, 2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
          n7 = NestedLogicalExpression();
          n5 = new NodeChoice(n7, 1, 2);
          break;
        default:
          jj_la1[142] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      n2.addNode(n5);
      n1.addNode(n2);
      break;
    default:
      jj_la1[143] = jj_gen;
      ;
    }
    {if (true) return new LogicalANDExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public InclusiveORExpression InclusiveORExpression() throws ParseException {
  // --- JTB generated node declarations ---
  ExclusiveORExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  InclusiveORExpression n5 = null;
    n0 = ExclusiveORExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIT_OR:
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(BIT_OR);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = InclusiveORExpression();
      n2.addNode(n5);
      n1.addNode(n2);
      break;
    default:
      jj_la1[144] = jj_gen;
      ;
    }
    {if (true) return new InclusiveORExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public ExclusiveORExpression ExclusiveORExpression() throws ParseException {
  // --- JTB generated node declarations ---
  ANDExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ExclusiveORExpression n5 = null;
    n0 = ANDExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case XOR:
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(XOR);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = ExclusiveORExpression();
      n2.addNode(n5);
      n1.addNode(n2);
      break;
    default:
      jj_la1[145] = jj_gen;
      ;
    }
    {if (true) return new ExclusiveORExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public ANDExpression ANDExpression() throws ParseException {
  // --- JTB generated node declarations ---
  EqualityExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  ANDExpression n5 = null;
    n0 = EqualityExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIT_AND:
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(BIT_AND);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = ANDExpression();
      n2.addNode(n5);
      n1.addNode(n2);
      break;
    default:
      jj_la1[146] = jj_gen;
      ;
    }
    {if (true) return new ANDExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public EqualityExpression EqualityExpression() throws ParseException {
  // --- JTB generated node declarations ---
  RelationalExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  EqualityExpression n8 = null;
    n0 = RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case NE:
      n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        n5 = jj_consume_token(EQ);
          n4 = JTBToolkit.makeNodeToken(n5);
          n3 = new NodeChoice(n4, 0, 2);
        break;
      case NE:
        n7 = jj_consume_token(NE);
          n6 = JTBToolkit.makeNodeToken(n7);
          n3 = new NodeChoice(n6, 1, 2);
        break;
      default:
        jj_la1[147] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2.addNode(n3);
      n8 = EqualityExpression();
      n2.addNode(n8);
      n1.addNode(n2);
      break;
    default:
      jj_la1[148] = jj_gen;
      ;
    }
    {if (true) return new EqualityExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public RelationalExpression RelationalExpression() throws ParseException {
  // --- JTB generated node declarations ---
  ShiftExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  RelationalExpression n12 = null;
    n0 = ShiftExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
    case GT:
    case LE:
    case GE:
      n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        n5 = jj_consume_token(LT);
          n4 = JTBToolkit.makeNodeToken(n5);
          n3 = new NodeChoice(n4, 0, 4);
        break;
      case GT:
        n7 = jj_consume_token(GT);
          n6 = JTBToolkit.makeNodeToken(n7);
          n3 = new NodeChoice(n6, 1, 4);
        break;
      case LE:
        n9 = jj_consume_token(LE);
          n8 = JTBToolkit.makeNodeToken(n9);
          n3 = new NodeChoice(n8, 2, 4);
        break;
      case GE:
        n11 = jj_consume_token(GE);
          n10 = JTBToolkit.makeNodeToken(n11);
          n3 = new NodeChoice(n10, 3, 4);
        break;
      default:
        jj_la1[149] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2.addNode(n3);
      n12 = RelationalExpression();
      n2.addNode(n12);
      n1.addNode(n2);
      break;
    default:
      jj_la1[150] = jj_gen;
      ;
    }
    {if (true) return new RelationalExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public ShiftExpression ShiftExpression() throws ParseException {
  // --- JTB generated node declarations ---
  AdditiveExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  ShiftExpression n8 = null;
    n0 = AdditiveExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSHIFT:
    case 224:
      n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        n5 = jj_consume_token(LSHIFT);
          n4 = JTBToolkit.makeNodeToken(n5);
          n3 = new NodeChoice(n4, 0, 2);
        break;
      case 224:
        n7 = jj_consume_token(224);
          n6 = JTBToolkit.makeNodeToken(n7);
          n3 = new NodeChoice(n6, 1, 2);
        break;
      default:
        jj_la1[151] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2.addNode(n3);
      n8 = ShiftExpression();
      n2.addNode(n8);
      n1.addNode(n2);
      break;
    default:
      jj_la1[152] = jj_gen;
      ;
    }
    {if (true) return new ShiftExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public AdditiveExpression AdditiveExpression() throws ParseException {
  // --- JTB generated node declarations ---
  MultiplicativeExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  AdditiveExpression n8 = null;
    n0 = MultiplicativeExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        n5 = jj_consume_token(PLUS);
          n4 = JTBToolkit.makeNodeToken(n5);
          n3 = new NodeChoice(n4, 0, 2);
        break;
      case MINUS:
        n7 = jj_consume_token(MINUS);
          n6 = JTBToolkit.makeNodeToken(n7);
          n3 = new NodeChoice(n6, 1, 2);
        break;
      default:
        jj_la1[153] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2.addNode(n3);
      n8 = AdditiveExpression();
      n2.addNode(n8);
      n1.addNode(n2);
      break;
    default:
      jj_la1[154] = jj_gen;
      ;
    }
    {if (true) return new AdditiveExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public MultiplicativeExpression MultiplicativeExpression() throws ParseException {
  // --- JTB generated node declarations ---
  CastExpression n0 = null;
  NodeOptional n1 = new NodeOptional();
  NodeSequence n2 = null;
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  MultiplicativeExpression n10 = null;
    n0 = CastExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
    case SLASH:
    case REM:
      n2 = new NodeSequence(2);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        n5 = jj_consume_token(STAR);
          n4 = JTBToolkit.makeNodeToken(n5);
          n3 = new NodeChoice(n4, 0, 3);
        break;
      case SLASH:
        n7 = jj_consume_token(SLASH);
          n6 = JTBToolkit.makeNodeToken(n7);
          n3 = new NodeChoice(n6, 1, 3);
        break;
      case REM:
        n9 = jj_consume_token(REM);
          n8 = JTBToolkit.makeNodeToken(n9);
          n3 = new NodeChoice(n8, 2, 3);
        break;
      default:
        jj_la1[155] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      n2.addNode(n3);
      n10 = MultiplicativeExpression();
      n2.addNode(n10);
      n1.addNode(n2);
      break;
    default:
      jj_la1[156] = jj_gen;
      ;
    }
    {if (true) return new MultiplicativeExpression(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public CastExpression CastExpression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  TypeName n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  CastExpression n7 = null;
  UnaryExpression n8 = null;
    if (jj_2_95(2147483647)) {
      n1 = new NodeSequence(4);
      n3 = jj_consume_token(LEFT_PAREN);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      n4 = TypeName();
      n1.addNode(n4);
      n6 = jj_consume_token(RIGHT_PAREN);
      n5 = JTBToolkit.makeNodeToken(n6);
      n1.addNode(n5);
      n7 = CastExpression();
      n1.addNode(n7);
      n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case STAR:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case INTEGER_CONSTANT:
      case SIZEOF:
      case NIL:
      case LEFT_PAREN:
      case LEFT_SQUARE:
      case AT_PROTOCOL:
      case AT_ENCODE:
      case AT_SELECTOR:
      case POSSIBLE_COCOA_TYPE:
      case POSSIBLE_CORE_TYPE:
      case IDENT:
        n8 = UnaryExpression();
      n0 = new NodeChoice(n8, 1, 2);
        break;
      default:
        jj_la1[157] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new CastExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UnaryExpression UnaryExpression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  PostfixExpression n1 = null;
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  UnaryExpression n5 = null;
  NodeSequence n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  UnaryExpression n9 = null;
  NodeSequence n10 = null;
  UnaryOperator n11 = null;
  CastExpression n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeChoice n16 = null;
  UnaryExpression n17 = null;
  NodeSequence n18 = null;
  NodeToken n19 = null;
  Token n20 = null;
  TypeName n21 = null;
  NodeToken n22 = null;
  Token n23 = null;
    if (jj_2_97(3)) {
      n1 = PostfixExpression();
        n0 = new NodeChoice(n1, 0, 5);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        n2 = new NodeSequence(2);
        n4 = jj_consume_token(INCR);
        n3 = JTBToolkit.makeNodeToken(n4);
        n2.addNode(n3);
        n5 = UnaryExpression();
        n2.addNode(n5);
        n0 = new NodeChoice(n2, 1, 5);
        break;
      case DECR:
        n6 = new NodeSequence(2);
        n8 = jj_consume_token(DECR);
        n7 = JTBToolkit.makeNodeToken(n8);
        n6.addNode(n7);
        n9 = UnaryExpression();
        n6.addNode(n9);
        n0 = new NodeChoice(n6, 2, 5);
        break;
      case BANG:
      case TILDE:
      case PLUS:
      case MINUS:
      case STAR:
      case BIT_AND:
        n10 = new NodeSequence(2);
        n11 = UnaryOperator();
        n10.addNode(n11);
        n12 = CastExpression();
        n10.addNode(n12);
        n0 = new NodeChoice(n10, 3, 5);
        break;
      case SIZEOF:
        n13 = new NodeSequence(2);
        n15 = jj_consume_token(SIZEOF);
        n14 = JTBToolkit.makeNodeToken(n15);
        n13.addNode(n14);
        if (jj_2_96(2147483647)) {
          n17 = UnaryExpression();
            n16 = new NodeChoice(n17, 0, 2);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LEFT_PAREN:
            n18 = new NodeSequence(3);
            n20 = jj_consume_token(LEFT_PAREN);
            n19 = JTBToolkit.makeNodeToken(n20);
            n18.addNode(n19);
            n21 = TypeName();
            n18.addNode(n21);
            n23 = jj_consume_token(RIGHT_PAREN);
            n22 = JTBToolkit.makeNodeToken(n23);
            n18.addNode(n22);
            n16 = new NodeChoice(n18, 1, 2);
            break;
          default:
            jj_la1[158] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        n13.addNode(n16);
        n0 = new NodeChoice(n13, 4, 5);
        break;
      default:
        jj_la1[159] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new UnaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public UnaryOperator UnaryOperator() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIT_AND:
      n2 = jj_consume_token(BIT_AND);
        n1 = JTBToolkit.makeNodeToken(n2);
        n0 = new NodeChoice(n1, 0, 6);
      break;
    case STAR:
      n4 = jj_consume_token(STAR);
        n3 = JTBToolkit.makeNodeToken(n4);
        n0 = new NodeChoice(n3, 1, 6);
      break;
    case PLUS:
      n6 = jj_consume_token(PLUS);
        n5 = JTBToolkit.makeNodeToken(n6);
        n0 = new NodeChoice(n5, 2, 6);
      break;
    case MINUS:
      n8 = jj_consume_token(MINUS);
        n7 = JTBToolkit.makeNodeToken(n8);
        n0 = new NodeChoice(n7, 3, 6);
      break;
    case TILDE:
      n10 = jj_consume_token(TILDE);
        n9 = JTBToolkit.makeNodeToken(n10);
        n0 = new NodeChoice(n9, 4, 6);
      break;
    case BANG:
      n12 = jj_consume_token(BANG);
        n11 = JTBToolkit.makeNodeToken(n12);
        n0 = new NodeChoice(n11, 5, 6);
      break;
    default:
      jj_la1[160] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new UnaryOperator(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PostfixExpression PostfixExpression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeSequence n3 = null;
  PrimaryExpression n4 = null;
  NodeListOptional n5 = new NodeListOptional();
  NodeChoice n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  Expression n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeSequence n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeOptional n16 = null;
  ArgumentExpressionList n17 = null;
  NodeToken n18 = null;
  Token n19 = null;
  NodeSequence n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
  NodeToken n23 = null;
  Token n24 = null;
  NodeSequence n25 = null;
  NodeToken n26 = null;
  Token n27 = null;
  NodeToken n28 = null;
  Token n29 = null;
  NodeToken n30 = null;
  Token n31 = null;
  NodeToken n32 = null;
  Token n33 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NIL:
      n2 = jj_consume_token(NIL);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 2);
      break;
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case INTEGER_CONSTANT:
    case LEFT_PAREN:
    case LEFT_SQUARE:
    case AT_PROTOCOL:
    case AT_ENCODE:
    case AT_SELECTOR:
    case POSSIBLE_COCOA_TYPE:
    case POSSIBLE_CORE_TYPE:
    case IDENT:
      n3 = new NodeSequence(2);
      n4 = PrimaryExpression();
      n3.addNode(n4);
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
        case DECR:
        case LEFT_PAREN:
        case LEFT_SQUARE:
        case 225:
        case 226:
          ;
          break;
        default:
          jj_la1[161] = jj_gen;
          break label_31;
        }
        n16 = new NodeOptional();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_SQUARE:
          n7 = new NodeSequence(3);
          n9 = jj_consume_token(LEFT_SQUARE);
          n8 = JTBToolkit.makeNodeToken(n9);
          n7.addNode(n8);
          n10 = Expression();
          n7.addNode(n10);
          n12 = jj_consume_token(RIGHT_SQUARE);
          n11 = JTBToolkit.makeNodeToken(n12);
          n7.addNode(n11);
          n6 = new NodeChoice(n7, 0, 6);
          break;
        case LEFT_PAREN:
          n13 = new NodeSequence(3);
          n15 = jj_consume_token(LEFT_PAREN);
          n14 = JTBToolkit.makeNodeToken(n15);
          n13.addNode(n14);
          if (jj_2_98(2147483647)) {
            n17 = ArgumentExpressionList();
            n16.addNode(n17);
          } else {
            ;
          }
          n13.addNode(n16);
          n19 = jj_consume_token(RIGHT_PAREN);
          n18 = JTBToolkit.makeNodeToken(n19);
          n13.addNode(n18);
          n6 = new NodeChoice(n13, 1, 6);
          break;
        case 225:
          n20 = new NodeSequence(2);
          n22 = jj_consume_token(225);
          n21 = JTBToolkit.makeNodeToken(n22);
          n20.addNode(n21);
          n24 = jj_consume_token(IDENT);
          n23 = JTBToolkit.makeNodeToken(n24);
          n20.addNode(n23);
          n6 = new NodeChoice(n20, 2, 6);
          break;
        case 226:
          n25 = new NodeSequence(2);
          n27 = jj_consume_token(226);
          n26 = JTBToolkit.makeNodeToken(n27);
          n25.addNode(n26);
          n29 = jj_consume_token(IDENT);
          n28 = JTBToolkit.makeNodeToken(n29);
          n25.addNode(n28);
          n6 = new NodeChoice(n25, 3, 6);
          break;
        case INCR:
          n31 = jj_consume_token(INCR);
          n30 = JTBToolkit.makeNodeToken(n31);
          n6 = new NodeChoice(n30, 4, 6);
          break;
        case DECR:
          n33 = jj_consume_token(DECR);
          n32 = JTBToolkit.makeNodeToken(n33);
          n6 = new NodeChoice(n32, 5, 6);
          break;
        default:
          jj_la1[162] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        n5.addNode(n6);
      }
      n5.nodes.trimToSize();
      n3.addNode(n5);
      n0 = new NodeChoice(n3, 1, 2);
      break;
    default:
      jj_la1[163] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new PostfixExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryExpression PrimaryExpression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  ObjCIDENT n1 = null;
  Constant n2 = null;
  NodeSequence n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Expression n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  MessageExpression n9 = null;
  SelectorExpression n10 = null;
  ProtocolExpression n11 = null;
  EncodeExpression n12 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POSSIBLE_COCOA_TYPE:
    case POSSIBLE_CORE_TYPE:
    case IDENT:
      n1 = ObjCIDENT();
        n0 = new NodeChoice(n1, 0, 7);
      break;
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case INTEGER_CONSTANT:
      n2 = Constant();
        n0 = new NodeChoice(n2, 1, 7);
      break;
    case LEFT_PAREN:
        n3 = new NodeSequence(3);
      n5 = jj_consume_token(LEFT_PAREN);
        n4 = JTBToolkit.makeNodeToken(n5);
        n3.addNode(n4);
      n6 = Expression();
        n3.addNode(n6);
      n8 = jj_consume_token(RIGHT_PAREN);
        n7 = JTBToolkit.makeNodeToken(n8);
        n3.addNode(n7);
        n0 = new NodeChoice(n3, 2, 7);
      break;
    case LEFT_SQUARE:
      n9 = MessageExpression();
        n0 = new NodeChoice(n9, 3, 7);
      break;
    case AT_SELECTOR:
      n10 = SelectorExpression();
        n0 = new NodeChoice(n10, 4, 7);
      break;
    case AT_PROTOCOL:
      n11 = ProtocolExpression();
        n0 = new NodeChoice(n11, 5, 7);
      break;
    case AT_ENCODE:
      n12 = EncodeExpression();
        n0 = new NodeChoice(n12, 6, 7);
      break;
    default:
      jj_la1[164] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new PrimaryExpression(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MessageExpression MessageExpression() throws ParseException {
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Receiver n2 = null;
  MessageSelector n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
    n1 = jj_consume_token(LEFT_SQUARE);
    n0 = JTBToolkit.makeNodeToken(n1);
    n2 = Receiver();
    n3 = MessageSelector();
    n5 = jj_consume_token(RIGHT_SQUARE);
    n4 = JTBToolkit.makeNodeToken(n5);
    {if (true) return new MessageExpression(n0, n2, n3, n4);}
    throw new Error("Missing return statement in function");
  }

  final public Receiver Receiver() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Expression n1 = null;
  TypeDefedIDENT n2 = null;
    if (jj_2_99(2)) {
      n1 = Expression();
      n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL:
      case ID:
      case SEL:
      case IMP:
      case CLASS:
        n2 = TypeDefedIDENT();
      n0 = new NodeChoice(n2, 1, 2);
        break;
      default:
        jj_la1[165] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new Receiver(n0);}
    throw new Error("Missing return statement in function");
  }

  final public TypeDefedIDENT TypeDefedIDENT() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
      n2 = jj_consume_token(BOOL);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 5);
      break;
    case IMP:
      n4 = jj_consume_token(IMP);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 5);
      break;
    case SEL:
      n6 = jj_consume_token(SEL);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 2, 5);
      break;
    case CLASS:
      n8 = jj_consume_token(CLASS);
      n7 = JTBToolkit.makeNodeToken(n8);
      n0 = new NodeChoice(n7, 3, 5);
      break;
    case ID:
      n10 = jj_consume_token(ID);
      n9 = JTBToolkit.makeNodeToken(n10);
      n0 = new NodeChoice(n9, 4, 5);
      break;
    default:
      jj_la1[166] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new TypeDefedIDENT(n0);}
    throw new Error("Missing return statement in function");
  }

  final public MessageSelector MessageSelector() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeList n1 = new NodeList();
  KeywordArgument n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
    if (jj_2_100(2)) {
      label_32:
      while (true) {
        n2 = KeywordArgument();
        n1.addNode(n2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
        case IDENT:
          ;
          break;
        default:
          jj_la1[167] = jj_gen;
          break label_32;
        }
      }
      n1.nodes.trimToSize();
      n0 = new NodeChoice(n1, 0, 2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        n4 = jj_consume_token(IDENT);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 2);
        break;
      default:
        jj_la1[168] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new MessageSelector(n0);}
    throw new Error("Missing return statement in function");
  }

  final public KeywordArgument KeywordArgument() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeSequence n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  Expression n6 = null;
  NodeSequence n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeSequence n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeSequence n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
  Expression n22 = null;
    if (jj_2_101(3)) {
      n1 = new NodeSequence(3);
      n3 = jj_consume_token(IDENT);
      n2 = JTBToolkit.makeNodeToken(n3);
      n1.addNode(n2);
      n5 = jj_consume_token(COLON);
      n4 = JTBToolkit.makeNodeToken(n5);
      n1.addNode(n4);
      n6 = Expression();
      n1.addNode(n6);
      n0 = new NodeChoice(n1, 0, 4);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
      n7 = new NodeSequence(3);
        n9 = jj_consume_token(IDENT);
      n8 = JTBToolkit.makeNodeToken(n9);
      n7.addNode(n8);
        n11 = jj_consume_token(COLON);
      n10 = JTBToolkit.makeNodeToken(n11);
      n7.addNode(n10);
        n13 = jj_consume_token(NIL);
      n12 = JTBToolkit.makeNodeToken(n13);
      n7.addNode(n12);
      n0 = new NodeChoice(n7, 1, 4);
        break;
      default:
        jj_la1[169] = jj_gen;
        if (jj_2_102(2)) {
      n14 = new NodeSequence(2);
          n16 = jj_consume_token(COLON);
      n15 = JTBToolkit.makeNodeToken(n16);
      n14.addNode(n15);
          n18 = jj_consume_token(NIL);
      n17 = JTBToolkit.makeNodeToken(n18);
      n14.addNode(n17);
      n0 = new NodeChoice(n14, 2, 4);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COLON:
      n19 = new NodeSequence(2);
            n21 = jj_consume_token(COLON);
      n20 = JTBToolkit.makeNodeToken(n21);
      n19.addNode(n20);
            n22 = Expression();
      n19.addNode(n22);
      n0 = new NodeChoice(n19, 3, 4);
            break;
          default:
            jj_la1[170] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    {if (true) return new KeywordArgument(n0);}
    throw new Error("Missing return statement in function");
  }

  final public ArgumentExpressionList ArgumentExpressionList() throws ParseException {
  // --- JTB generated node declarations ---
  AssignmentExpression n0 = null;
  NodeListOptional n1 = new NodeListOptional();
  NodeSequence n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  AssignmentExpression n5 = null;
    n0 = AssignmentExpression();
    label_33:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 222:
        ;
        break;
      default:
        jj_la1[171] = jj_gen;
        break label_33;
      }
      n2 = new NodeSequence(2);
      n4 = jj_consume_token(222);
      n3 = JTBToolkit.makeNodeToken(n4);
      n2.addNode(n3);
      n5 = AssignmentExpression();
      n2.addNode(n5);
      n1.addNode(n2);
    }
    n1.nodes.trimToSize();
    {if (true) return new ArgumentExpressionList(n0, n1);}
    throw new Error("Missing return statement in function");
  }

  final public Constant Constant() throws ParseException {
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  NodeToken n1 = null;
  Token n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      n2 = jj_consume_token(INTEGER_LITERAL);
      n1 = JTBToolkit.makeNodeToken(n2);
      n0 = new NodeChoice(n1, 0, 5);
      break;
    case FLOATING_POINT_LITERAL:
      n4 = jj_consume_token(FLOATING_POINT_LITERAL);
      n3 = JTBToolkit.makeNodeToken(n4);
      n0 = new NodeChoice(n3, 1, 5);
      break;
    case CHARACTER_LITERAL:
      n6 = jj_consume_token(CHARACTER_LITERAL);
      n5 = JTBToolkit.makeNodeToken(n6);
      n0 = new NodeChoice(n5, 2, 5);
      break;
    case STRING_LITERAL:
      n8 = jj_consume_token(STRING_LITERAL);
      n7 = JTBToolkit.makeNodeToken(n8);
      n0 = new NodeChoice(n7, 3, 5);
      break;
    case INTEGER_CONSTANT:
      n10 = jj_consume_token(INTEGER_CONSTANT);
      n9 = JTBToolkit.makeNodeToken(n10);
      n0 = new NodeChoice(n9, 4, 5);
      break;
    default:
      jj_la1[172] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Constant(n0);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_3R_68() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_110()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_3R_373()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_342() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_290() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_342()) {
    jj_scanpos = xsp;
    if (jj_3R_343()) {
    jj_scanpos = xsp;
    if (jj_3R_344()) {
    jj_scanpos = xsp;
    if (jj_3R_345()) {
    jj_scanpos = xsp;
    if (jj_3R_346()) {
    jj_scanpos = xsp;
    if (jj_3R_347()) {
    jj_scanpos = xsp;
    if (jj_3R_348()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_3R_101()) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_64()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(LEFT_BRACE)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_396() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_77()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_3R_101()) return true;
    if (jj_3R_102()) return true;
    if (jj_3R_241()) return true;
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_scan_token(222)) return true;
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_292()) {
    jj_scanpos = xsp;
    if (jj_3_92()) return true;
    }
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) jj_scanpos = xsp;
    if (jj_scan_token(AT_INTERFACE)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_407() {
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_354() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_185()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_307()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_64()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_353() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_395() {
    if (jj_scan_token(LEFT_SQUARE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_407()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_SQUARE)) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(AT_INTERFACE)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(AT_END)) return true;
    return false;
  }

  private boolean jj_3R_383() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_395()) {
    jj_scanpos = xsp;
    if (jj_3R_396()) return true;
    }
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_352() {
    if (jj_scan_token(226)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_scan_token(222)) return true;
    if (jj_3R_241()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_61()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_250()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_3R_67()) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_98() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_241()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_243()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_351() {
    if (jj_scan_token(225)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_75()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_61()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_306()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_377() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) return true;
    }
    return false;
  }

  private boolean jj_3R_394() {
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(AT_PROPERTY)) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_61()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_350() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_377()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_370() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_scan_token(LEFT_SQUARE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_394()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_SQUARE)) return true;
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_370()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_349() {
    if (jj_scan_token(LEFT_SQUARE)) return true;
    if (jj_3R_110()) return true;
    if (jj_scan_token(RIGHT_SQUARE)) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_291() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_349()) {
    jj_scanpos = xsp;
    if (jj_3R_350()) {
    jj_scanpos = xsp;
    if (jj_3R_351()) {
    jj_scanpos = xsp;
    if (jj_3R_352()) {
    jj_scanpos = xsp;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_76() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_92()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_3R_290()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_291()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_253()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3R_321()) {
    jj_scanpos = xsp;
    if (jj_3R_322()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_383()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3_61()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_331() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(EXPORTED_CALLBACK)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) return true;
    }
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(LEFT_SQUARE)) return true;
    if (jj_3R_191()) return true;
    if (jj_scan_token(RIGHT_SQUARE)) return true;
    return false;
  }

  private boolean jj_3R_282() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_330()) {
    jj_scanpos = xsp;
    if (jj_3R_331()) {
    jj_scanpos = xsp;
    if (jj_3R_332()) {
    jj_scanpos = xsp;
    if (jj_3R_333()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    if (jj_3R_124()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_124()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_133()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    return false;
  }

  private boolean jj_3R_376() {
    if (jj_scan_token(AT_ENCODE)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_59()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_274()) jj_scanpos = xsp;
    if (jj_3R_275()) return true;
    return false;
  }

  private boolean jj_3R_338() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    jj_lookingAhead = true;
    jj_semLA = getToken(0).image.equals("in");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_184()) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_335() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(FIXED_NUM_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_375() {
    if (jj_scan_token(AT_PROTOCOL)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_359()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_scan_token(BIT_AND)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(PROTOCOL_QUALIFIER_EXCEPT_IN)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3_58()) return true;
    }
    return false;
  }

  private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_283() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_334()) {
    jj_scanpos = xsp;
    if (jj_3R_335()) {
    jj_scanpos = xsp;
    if (jj_3R_336()) {
    jj_scanpos = xsp;
    if (jj_3R_337()) {
    jj_scanpos = xsp;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_411() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_424() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    if (jj_3_73()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_73()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_411()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(IBOUTLET)) return true;
    return false;
  }

  private boolean jj_3R_416() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_424()) jj_scanpos = xsp;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_248()) return true;
    return false;
  }

  private boolean jj_3R_360() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_247()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_246()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_86()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_360()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_434() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_245()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_304() {
    if (jj_scan_token(AT_PUBLIC)) return true;
    return false;
  }

  private boolean jj_3_96() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_408() {
    if (jj_3R_416()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_133()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_236()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_433() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_scan_token(AT_PACKAGE)) return true;
    return false;
  }

  private boolean jj_3R_397() {
    Token xsp;
    if (jj_3R_408()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_408()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_106()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3_89() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_scan_token(AT_PROTECTED)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_432() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_389() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3R_397()) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_431() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_scan_token(AT_PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_scan_token(222)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(SIZEOF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_284()) {
    jj_scanpos = xsp;
    if (jj_3R_285()) return true;
    }
    return false;
  }

  private boolean jj_3R_427() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_431()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_432()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_433()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_434()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_scan_token(222)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_301()) {
    jj_scanpos = xsp;
    if (jj_3R_302()) {
    jj_scanpos = xsp;
    if (jj_3R_303()) {
    jj_scanpos = xsp;
    if (jj_3R_304()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_125()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_309()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_398() {
    if (jj_3R_89()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_3R_283()) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_374() {
    if (jj_scan_token(AT_SELECTOR)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_389()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_3R_61()) return true;
    if (jj_scan_token(IDENT)) return true;
    if (jj_3R_77()) return true;
    if (jj_3R_290()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    Token xsp;
    if (jj_3_57()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_399() {
    if (jj_scan_token(222)) return true;
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_90()) {
    jj_scanpos = xsp;
    if (jj_3R_427()) return true;
    }
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_97() {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_97()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_scan_token(LEFT_BRACE)) return true;
    if (jj_3R_398()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_399()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_BRACE)) return true;
    return false;
  }

  private boolean jj_3R_362() {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_241()) return true;
    return false;
  }

  private boolean jj_3R_361() {
    if (jj_scan_token(STRUCT)) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    return false;
  }

  private boolean jj_3R_313() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_361()) {
    jj_scanpos = xsp;
    if (jj_3R_362()) return true;
    }
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_98()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_110()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_44()) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_110()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_95() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_106()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_400() {
    if (jj_scan_token(222)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    return false;
  }

  private boolean jj_3R_281() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_327()) {
    jj_scanpos = xsp;
    if (jj_3R_328()) {
    jj_scanpos = xsp;
    if (jj_3R_329()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3R_363() {
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_400()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(LEFT_BRACE)) return true;
    if (jj_3R_183()) return true;
    if (jj_scan_token(RIGHT_BRACE)) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_106()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    if (jj_scan_token(COLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    }
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_364() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  private boolean jj_3R_319() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_364()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_3R_313()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3R_314()) return true;
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    if (jj_3_36()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_430() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_256()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_318()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) return true;
    }
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_429() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_428() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_421() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_428()) {
    jj_scanpos = xsp;
    if (jj_3R_429()) {
    jj_scanpos = xsp;
    if (jj_3R_430()) return true;
    }
    }
    if (jj_3R_412()) return true;
    return false;
  }

  private boolean jj_3R_412() {
    if (jj_3R_107()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_421()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(222)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_420() {
    if (jj_scan_token(SC_AND)) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_scan_token(LEFT_BRACE)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_419() {
    if (jj_scan_token(SC_OR)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    return false;
  }

  private boolean jj_3R_418() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_417() {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  private boolean jj_3R_410() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_417()) {
    jj_scanpos = xsp;
    if (jj_3R_418()) {
    jj_scanpos = xsp;
    if (jj_3R_419()) {
    jj_scanpos = xsp;
    if (jj_3R_420()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_423() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_422() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_scan_token(222)) return true;
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3R_380() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_258()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_193()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_310()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_379() {
    if (jj_scan_token(POSSIBLE_CORE_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_413() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_422()) {
    jj_scanpos = xsp;
    if (jj_3R_423()) return true;
    }
    if (jj_3R_401()) return true;
    return false;
  }

  private boolean jj_3R_378() {
    if (jj_scan_token(POSSIBLE_COCOA_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_401() {
    if (jj_3R_412()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_413()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(222)) return true;
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3R_359() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_378()) {
    jj_scanpos = xsp;
    if (jj_3R_379()) {
    jj_scanpos = xsp;
    if (jj_3R_380()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(223)) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) return true;
    }
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_88()) jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_3R_410()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    Token xsp;
    if (jj_3R_320()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_320()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_55()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    return false;
  }

  private boolean jj_3R_415() {
    if (jj_scan_token(224)) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_414() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_273()) return true;
    return false;
  }

  private boolean jj_3R_402() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_414()) {
    jj_scanpos = xsp;
    if (jj_3R_415()) return true;
    }
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(STAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_390() {
    if (jj_3R_401()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_402()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_326() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_110()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_3R_363()) return true;
    return false;
  }

  private boolean jj_3R_406() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_scan_token(POSSIBLE_CORE_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_358() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_405() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_317()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_404() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_403() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_325() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_86()) jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_3R_98()) return true;
    xsp = jj_scanpos;
    if (jj_3_87()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_87()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_391() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_403()) {
    jj_scanpos = xsp;
    if (jj_3R_404()) {
    jj_scanpos = xsp;
    if (jj_3R_405()) {
    jj_scanpos = xsp;
    if (jj_3R_406()) return true;
    }
    }
    }
    if (jj_3R_381()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_scan_token(POSSIBLE_COCOA_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_280() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_325()) {
    jj_scanpos = xsp;
    if (jj_3R_326()) return true;
    }
    return false;
  }

  private boolean jj_3R_381() {
    if (jj_3R_390()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_391()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_scan_token(LEFT_SQUARE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_316()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_SQUARE)) return true;
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_scan_token(UNSIGNED)) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(POSSIBLE_CORE_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_190() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_scan_token(SIGNED)) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(POSSIBLE_COCOA_TYPE)) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(FIXED_NUM_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_393() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_392() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(UNSIGNED)) return true;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_3R_358()) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(SIGNED)) return true;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_382() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_392()) {
    jj_scanpos = xsp;
    if (jj_3R_393()) return true;
    }
    if (jj_3R_371()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_3R_357()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    }
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    if (jj_3_85()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_371() {
    if (jj_3R_381()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_382()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_255() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_299()) {
    jj_scanpos = xsp;
    if (jj_3R_300()) return true;
    }
    return false;
  }

  private boolean jj_3R_388() {
    if (jj_scan_token(INTEGER_CONSTANT)) return true;
    return false;
  }

  private boolean jj_3_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    if (jj_scan_token(FIXED_NUM_TYPE)) return true;
    xsp = jj_scanpos;
    if (jj_3_51()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3_68()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_190()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_387() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_263() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3R_311()) {
    jj_scanpos = xsp;
    if (jj_3R_312()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_83() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_436() {
    if (jj_scan_token(222)) return true;
    if (jj_3R_305()) return true;
    return false;
  }

  private boolean jj_3R_386() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_3R_359()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_436()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_84() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_385() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_384() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3_84()) return true;
    }
    return false;
  }

  private boolean jj_3R_373() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_384()) {
    jj_scanpos = xsp;
    if (jj_3R_385()) {
    jj_scanpos = xsp;
    if (jj_3R_386()) {
    jj_scanpos = xsp;
    if (jj_3R_387()) {
    jj_scanpos = xsp;
    if (jj_3R_388()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_372() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_340()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(LEFT_BRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_82()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_BRACE)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_340() {
    if (jj_3R_371()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_372()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_269()) return true;
    return false;
  }

  private boolean jj_3R_435() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_305()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_268()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_3R_267()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_305()) return true;
    if (jj_scan_token(GT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_435()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_324()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(222)) return true;
    if (jj_3R_241()) return true;
    return false;
  }

  private boolean jj_3R_341() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_287()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_241()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_242()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_3R_340()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_341()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(UCHAR)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(SCHAR)) return true;
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(SINT32)) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_3R_74()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(IMP)) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_426() {
    if (jj_scan_token(222)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_234()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  private boolean jj_3R_425() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_3R_287()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_288()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(SEL)) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(NSSIZE)) return true;
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_scan_token(AT_DYNAMIC)) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3R_260()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(NSINTEGER)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    if (jj_scan_token(BLOCK)) return true;
    xsp = jj_scanpos;
    if (jj_3R_141()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_193()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3_81() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(NSUINTEGER)) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_scan_token(AT_CLASS)) return true;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_scan_token(AT_SYNTHESIZE)) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(NSRECT)) return true;
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3R_254() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_297()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) return true;
    }
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(CGFLOAT)) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_425()) {
    jj_scanpos = xsp;
    if (jj_3R_426()) return true;
    }
    return false;
  }

  private boolean jj_3_94() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(INT32_T)) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_101() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_scan_token(SC_AND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) return true;
    }
    return false;
  }

  private boolean jj_3R_244() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_101()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3_102()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(IBACTION)) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(222)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_234()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_235()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_255()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(AT_PROTOCOL)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_80()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) jj_scanpos = xsp;
    if (jj_scan_token(IDENT)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_204()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) return true;
    }
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3_93() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = isType(getToken(1).image);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_scan_token(SC_OR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_93()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) return true;
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_244()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_105()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_233()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    xsp = jj_scanpos;
    if (jj_3R_85()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_100() {
    Token xsp;
    if (jj_3R_111()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_111()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) return true;
    }
    return false;
  }

  private boolean jj_3R_356() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3_66()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_scan_token(AT_IMPLEMENTATION)) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_369() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_368() {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_scan_token(SEL)) return true;
    return false;
  }

  private boolean jj_3R_366() {
    if (jj_scan_token(IMP)) return true;
    return false;
  }

  private boolean jj_3R_355() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_365() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_110()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_191()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_323() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_365()) {
    jj_scanpos = xsp;
    if (jj_3R_366()) {
    jj_scanpos = xsp;
    if (jj_3R_367()) {
    jj_scanpos = xsp;
    if (jj_3R_368()) {
    jj_scanpos = xsp;
    if (jj_3R_369()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_104()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_74()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_270()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_3R_356()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_3R_355()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(TYPEDEF)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_scan_token(AT_INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_253() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_295()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) return true;
    }
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(EXTERN)) return true;
    return false;
  }

  private boolean jj_3R_409() {
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_3R_323()) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(XORASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(REGISTER)) return true;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_99()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) return true;
    }
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_scan_token(ANDASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(AUTO)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_scan_token(222)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_409()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_187()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_188()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_282()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(LEFT_SQUARE)) return true;
    if (jj_3R_207()) return true;
    if (jj_3R_208()) return true;
    if (jj_scan_token(RIGHT_SQUARE)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_3R_280()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(AT_IMPLEMENTATION)) return true;
    if (jj_3R_44()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(AT_END)) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_279()) return true;
    return false;
  }

  private boolean jj_3R_348() {
    if (jj_3R_376()) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_3R_375()) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_3R_374()) return true;
    return false;
  }

  private boolean jj_3_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    if (jj_scan_token(LEFT_BRACE)) return true;
    if (jj_3R_82()) return true;
    if (jj_scan_token(RIGHT_BRACE)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3R_315()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public ObjCParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[173];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
      jj_la1_init_7();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x100000,0x8000,0x0,0x100000,0x8000,0x0,0x0,0x0,0x8000,0x8000,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x60000000,0x0,0x8000,0x0,0x0,0x100000,0x0,0x60000000,0x0,0x0,0x60000000,0x0,0x0,0x0,0x60000000,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x80000000,0x100000,0x100000,0x80000000,0x0,0x0,0x0,0x0,0x0,0xf8060000,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0xf8060000,0x80000000,0x80000000,0x80000000,0x80000000,0xf8060000,0x0,0x0,0xf8060000,0x0,0xf8060000,0x0,0x80000000,0x0,0x0,0x0,0x4000,0xf8060000,0x0,0x6200000,0xf8060000,0xf8060000,0xf8060000,0xf8060000,0x0,0x0,0xf8060000,0x0,0x0,0x4000,0x80000,0x0,0x2000000,0x0,0x4000000,0x0,0x0,0x0,0x1200000,0x1200000,0xc18000,0xc18000,0x0,0x0,0x60000000,0x60000000,0x80000000,0x80000000,0xf8060000,0x0,0xf8060000,0xe0060000,0x18000000,0x18000000,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x100000,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6880002,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6880002,0x0,0x0,0x0,0x0,0x6880002,0x0,0x0,0x6880002,0x0,0x6880002,0x0,0x0,0x0,0x6880000,0x0,0x0,0x6880002,0x0,0x8,0x6880002,0x6880002,0x6880002,0x6880002,0x0,0x0,0x6880002,0x0,0x0,0xffc0,0x0,0x0,0x0,0x0,0x0,0x4,0x8,0x2,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x11,0x11,0x6880002,0x0,0x2,0x2,0x0,0x0,0x6880000,0x6880000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6880000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1404800,0x400,0x400,0x1404800,0x400,0x400,0x1404800,0x1404800,0x1404800,0x9e873100,0x0,0x2001000,0x2001000,0x2001000,0x0,0x0,0x400,0x0,0x0,0x80800000,0x0,0x0,0x0,0x0,0x400,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x80080,0x0,0x0,0x0,0x400,0x0,0x400,0x0,0x0,0x0,0x0,0x80080,0x0,0x0,0x0,0x0,0x80080,0x0,0x0,0x80080,0x0,0x60380280,0x8000,0x0,0x0,0x80,0x0,0x0,0x80080,0x100000,0x0,0x80080,0x80080,0x80080,0x90180,0x20000000,0x10100,0x80080,0x40200200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80080,0x0,0x80000,0x0,0x0,0x0,0x80,0x80,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x80,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x38000000,0x100000,0x0,0x0,0x0,0x1000000,0x0,0x0,0x1000000,0x1000000,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x2000,0x0,0x4000,0x4000000,0x0,0x0,0x0,0x0,0x100000,0x0,0x4000,0x0,0x0,0x0,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x100000,0x4000000,0x100000,0x4000000,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x20,0x1,0x1,0x20,0x1,0x1,0x20,0x20,0x20,0x3d0d2,0x0,0x0,0x0,0x0,0x4000,0x0,0x1,0x1000000,0x0,0x0,0x0,0x0,0x80000,0x400000,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4040,0x0,0x0,0x500000,0x60540000,0x0,0x400000,0x100000,0x1,0x0,0x1,0x0,0x500000,0x0,0x0,0x61540000,0x500000,0x500000,0x0,0x500000,0x60540000,0x500000,0x500000,0x60540000,0x500000,0x65540f00,0x8,0x0,0x0,0x60540000,0x4000000,0x4000000,0x60540000,0x400,0x0,0x60540000,0x60540000,0x60540000,0x64540002,0xa00,0x2,0x60540000,0x100,0x0,0x0,0x0,0x100000,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60540000,0x100000,0x0,0x0,0x500000,0x500000,0x60540000,0x60500000,0x3c000,0x3c000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x8,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c00000,0x0,0x0,0x2,0x40000000,0x0,0x40000000,0x2c00000,0x2c00000,0x2c00000,0x0,0xf00,0x0,0x0,0x0,0x0,0xf00,0x18000,0x18000,0x1000,0x0,0x0,0x0,0x40000000,0x0,0x2400000,0x0,0x0,0x0,0x6000,0x6000,0x40000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0xc0000000,0x2000000,0x2000000,0x2000000,0x0,0x2000000,0x2000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3e0000,0x2c00000,0x0,0x0,0x0,0x2c00000,0x0,0x0,0x2c00000,0x2000000,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x2c00000,0x2000000,0x40000000,0x2c00000,0x0,0x0,0x0,0x0,0x0,0x2c00000,0x2c00000,0x2c00000,0x2c00000,0x0,0x2c00001,0x2000000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x40000000,0x40000000,0x2c00001,0x0,0x0,0x0,0x0,0x2c00001,0x0,0x0,0x2c00001,0x0,0x2c00001,0x2000000,0x0,0x40000000,0x2c00001,0x40000000,0x0,0x2c00001,0x0,0x0,0x2c00001,0x2c00001,0x2c00001,0x2c00001,0x0,0x0,0x2c00001,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c00001,0x0,0x0,0x0,0x0,0x0,0x2c00001,0x2c00001,0x0,0x0,0x2000000,0x2000000,0x2000000,0x0,0x40000000,0x0,};
   }
   private static void jj_la1_init_7() {
      jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[102];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ObjCParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ObjCParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ObjCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 173; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 173; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ObjCParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ObjCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 173; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 173; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ObjCParser(ObjCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 173; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ObjCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 173; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[227];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 173; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 227; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 102; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}
