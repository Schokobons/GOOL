package DepotParser;
/* Generated By:JJTree&JavaCC: Do not edit this line. ObjCParser.java */

import java.io.*;
import java.util.*;

/**
 * Grammar to parse ObjectiveC 2.0
 * @author Michael Hall - Based on Parnel SableCC ObjectiveC grammar and javacc C grammar
 */

public class ObjCParser/*@bgen(jjtree)*/implements ObjCParserTreeConstants, ObjCParserConstants {/*@bgen(jjtree)*/
  protected JJTObjCParserState jjtree = new JJTObjCParserState();
   // Simple logging flag
   private static final boolean verbose = false;

   // HashSet for omitted test cases
   private static final Set omissions = new HashSet();

   static {
       /* Foundation */
       omissions.add("Foundation.h");
       /* AppKit */
       omissions.add("AppKit.h");                          /* All #import's */
       omissions.add("AppKitDefines.h");                   /* All preprocessor */
       omissions.add("NSSpellServer.h");
       omissions.add("NSNibDeclarations.h");
       /* CoreData */
       omissions.add("CoreData.h");                        /* All #import's */
       /* CoreFoundation */
       omissions.add("CoreFoundation.h");                  /* All #import's */
       /* CoreLocation */
       omissions.add("CoreLocation.h");                    /* All #import's */
       /* Quartz Core */
       omissions.add("CoreAnimation.h");                   /* All #import's */
       omissions.add("CoreImage.h");                       /* All #import's */
       omissions.add("CoreVideo.h");                       /* All #import's */
       omissions.add("CVBase.h");                          /* All #import's */
       omissions.add("CVBuffer.h");                        /* All #import's */
       omissions.add("CVDisplayLink.h");                   /* All #import's */
       omissions.add("CVHostTime.h");                      /* All #import's */
       omissions.add("CVImageBuffer.h");                   /* All #import's */
       omissions.add("CVOpenGLBuffer.h");                  /* All #import's */
       omissions.add("CVOpenGLBufferPool.h");              /* All #import's */
       omissions.add("CVOpenGLTexture.h");                 /* All #import's */
       omissions.add("CVOpenGLTextureCache.h");            /* All #import's */
       omissions.add("CVPixelBuffer.h");                   /* All #import's */
       omissions.add("CVPixelBufferPool.h");               /* All #import's */
       omissions.add("CVPixelFormatDescription.h");        /* All #import's */
       omissions.add("CVReturn.h");                        /* All #import's */
       omissions.add("QuartzCore.h");                      /* All #import's */
       /* WebKit */
       omissions.add("DOM.h");                             /* All #import's */
       omissions.add("DOMCore.h");                         /* All #import's */
       omissions.add("DOMEvents.h");                       /* All #import's */
       omissions.add("DOMHTML.h");                         /* All #import's */
       omissions.add("DOMRanges.h");                       /* All #import's */
       omissions.add("DOMStylesheets.h");                  /* All #import's */
       omissions.add("DOMTraversal.h");                    /* All #import's */
       omissions.add("DOMViews.h");                        /* All #import's */
       omissions.add("DOMXPath.h");                        /* All #import's */
       omissions.add("WebKit.h");                          /* All #import's */
       /* Preference Panes */
       omissions.add("PreferencePanes.h");                 /* All #import's */
   }

   // HashSet for storing typedef types
   private static Set types = new HashSet();

   // Stack for determining when the parser
   // is parsing a typedef definition.
   private static Stack typedefParsingStack = new Stack();

   // Returns true if the given string is
   // a typedef type.
   private static boolean isType(String type){
            return types.contains(type);
   }

   // Returns true if the given string is
   // in the test case omission list
   private static boolean isOmitted(String fileName) {
       return omissions.contains(fileName);
   }

   // Add a typedef type to those already defined
   private static void addType(String type){
            types.add(type);
   }

   // Prints out all the types used in parsing the c source
   public static void printTypes(){
     for (Iterator i = types.iterator(); i.hasNext();) {
       System.out.println(i.next());
     }
   }

   public ObjCParser(String fileName)
   {
      this(System.in);
      try { ReInit(new FileInputStream(new File(fileName))); }
      catch(Exception e) { e.printStackTrace(); }
   }

  public static void main(String args[]) {
    ObjCParser parser = null;
    String ps = System.getProperty("path.separator");

          // Hack to include type "special types"
            types.add("__signed__");
          types.add("__const");
          types.add("__inline__");
          types.add("__signed");
    if (args.length == 0) {
      System.out.println("ObjectiveC 2.0 Parser Version 1.0:  Reading from standard input . . .");
      parser = new ObjCParser(System.in);
    } else if (args.length == 1) {
                if (new File(args[0]).isDirectory()) {
                        String[] files = new File(args[0]).list();
                        for (int i=0;i<files.length;i++)
                            if (!isOmitted(files[i]))
                                   processFile(new StringBuffer(args[0]).append(File.separator).append(files[i]).toString());
                }
                else processFile(args[0]);
    } else {
      System.out.println("ObjectiveC 2.0 Parser Version 1.0:  Usage is one of:");
      System.out.println("         java ObjCParser < inputfile");
      System.out.println("OR");
      System.out.println("         java ObjCParser inputfile");
      return;
    }
  }

  private static void processFile(String fileName) {
      ObjCParser parser = null;

      System.out.println("ObjectiveC 2.0 Parser Version 1.0:  Reading from file " + fileName + " . . .");
      try {
        parser = new ObjCParser(new java.io.FileInputStream(fileName));
      } catch (java.io.FileNotFoundException e) {
        System.out.println("ObjectiveC 2.0 Parser Version 1.0:  File " + fileName + " not found.");
        return;
      }
      try {
        //SimpleNode n = parser.TranslationUnit();
        parser.TranslationUnit();
        System.out.println("ObjectiveC 2.0 Parser Version 1.0:  ObjectiveC program parsed successfully.");
      } catch (ParseException e) {
        System.out.println(e.getMessage());
        System.out.println("ObjectiveC 2.0 Parser Version 1.0:  Encountered errors during parse.");
      }
  }

/***********************************************
 * THE OBJECTIVEC LANGUAGE GRAMMAR STARTS HERE *
 ***********************************************/
  final public void TranslationUnit() throws ParseException {
                          /*@bgen(jjtree) TranslationUnit */
  SimpleNode jjtn000 = new SimpleNode(JJTTRANSLATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        ExternalDeclaration();
        if (jj_2_1(1)) {
          ;
        } else {
          break label_1;
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ExternalDeclaration() throws ParseException {
                              /*@bgen(jjtree) ExternalDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTEXTERNALDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_2(2147483647)) {
        FunctionDefinition();
      } else if (jj_2_3(3)) {
        StrippedParens();
      } else if (jj_2_4(1)) {
        Declaration();
      } else if (jj_2_5(3)) {
        ClassInterface();
      } else if (jj_2_6(3)) {
        ClassImplementation();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT_INTERFACE:
          CategoryInterface();
          break;
        case AT_IMPLEMENTATION:
          CategoryImplementation();
          break;
        case AT_PROTOCOL:
          ProtocolDeclaration();
          break;
        case AT_CLASS:
          ClassDeclarationList();
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void StrippedParens() throws ParseException {
                         /*@bgen(jjtree) StrippedParens */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRIPPEDPARENS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, LEFT_PAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        StrippedParens();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(jjtn000, RIGHT_PAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void FunctionDefinition() throws ParseException {
                             /*@bgen(jjtree) FunctionDefinition */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_7(2147483647)) {
        DeclarationSpecifiers();
      } else {
        ;
      }
      Declarator();
      if (jj_2_8(1)) {
        DeclarationList();
      } else {
        ;
      }
      CompoundStatement();
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  final public void Declaration() throws ParseException {
                      /*@bgen(jjtree) Declaration */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DeclarationSpecifiers();
      if (jj_2_9(1)) {
        InitDeclaratorList();
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXPORTED_CALLBACK:
        jj_consume_token(jjtn000, EXPORTED_CALLBACK);
        jj_consume_token(jjtn000, LEFT_PAREN);
        ParameterTypeList();
        jj_consume_token(jjtn000, RIGHT_PAREN);
        jj_consume_token(jjtn000, LEFT_PAREN);
        ParameterTypeList();
        jj_consume_token(jjtn000, RIGHT_PAREN);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(jjtn000, SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ClassInterface() throws ParseException {
                         /*@bgen(jjtree) ClassInterface */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSINTERFACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, AT_INTERFACE);
      ClassName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        ColonSuperClassName();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        ProtocolReferenceList();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      if (jj_2_10(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACE:
          jj_consume_token(jjtn000, LEFT_BRACE);
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        jj_consume_token(jjtn000, AT_INTERFACE);
        ClassName();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          ColonSuperClassName();
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          ProtocolReferenceList();
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACE:
        InstanceVariables();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      label_2:
      while (true) {
        if (jj_2_11(1)) {
          ;
        } else {
          break label_2;
        }
        InterfaceDeclaration();
      }
      jj_consume_token(jjtn000, AT_END);
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void ClassImplementation() throws ParseException {
                              /*@bgen(jjtree) ClassImplementation */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSIMPLEMENTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, AT_IMPLEMENTATION);
      ClassName();
      if (jj_2_12(2)) {
        ColonSuperClassName();
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACE:
        InstanceVariables();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      label_3:
      while (true) {
        if (jj_2_13(1)) {
          ;
        } else {
          break label_3;
        }
        ImplementationDefinition();
      }
      jj_consume_token(jjtn000, AT_END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CategoryInterface() throws ParseException {
                            /*@bgen(jjtree) CategoryInterface */
  SimpleNode jjtn000 = new SimpleNode(JJTCATEGORYINTERFACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, AT_INTERFACE);
      ClassName();
      jj_consume_token(jjtn000, LEFT_PAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSSIBLE_COCOA_TYPE:
      case POSSIBLE_CORE_TYPE:
      case IDENT:
        CategoryName();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(jjtn000, RIGHT_PAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        ProtocolReferenceList();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      label_4:
      while (true) {
        if (jj_2_14(1)) {
          ;
        } else {
          break label_4;
        }
        InterfaceDeclaration();
      }
      jj_consume_token(jjtn000, AT_END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CategoryImplementation() throws ParseException {
                                 /*@bgen(jjtree) CategoryImplementation */
  SimpleNode jjtn000 = new SimpleNode(JJTCATEGORYIMPLEMENTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, AT_IMPLEMENTATION);
      ClassName();
      jj_consume_token(jjtn000, LEFT_PAREN);
      CategoryName();
      jj_consume_token(jjtn000, RIGHT_PAREN);
      label_5:
      while (true) {
        if (jj_2_15(1)) {
          ;
        } else {
          break label_5;
        }
        ImplementationDefinition();
      }
      jj_consume_token(jjtn000, AT_END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ProtocolDeclaration() throws ParseException {
                              /*@bgen(jjtree) ProtocolDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTPROTOCOLDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, AT_PROTOCOL);
      ProtocolList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        ProtocolReferenceList();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      ProtocolInterfaceDeclaration();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT_END:
        jj_consume_token(jjtn000, AT_END);
        break;
      case SEMICOLON:
        jj_consume_token(jjtn000, SEMICOLON);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ClassDeclarationList() throws ParseException {
                               /*@bgen(jjtree) ClassDeclarationList */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, AT_CLASS);
      ClassList();
      jj_consume_token(jjtn000, SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ClassList() throws ParseException {
                    /*@bgen(jjtree) ClassList */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ClassName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 222:
        jj_consume_token(jjtn000, 222);
        ClassList();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ProtocolReferenceList() throws ParseException {
                                /*@bgen(jjtree) ProtocolReferenceList */
  SimpleNode jjtn000 = new SimpleNode(JJTPROTOCOLREFERENCELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, LT);
      ProtocolList();
      jj_consume_token(jjtn000, GT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(jjtn000, LT);
        ProtocolList();
        jj_consume_token(jjtn000, GT);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ProtocolList() throws ParseException {
                       /*@bgen(jjtree) ProtocolList */
  SimpleNode jjtn000 = new SimpleNode(JJTPROTOCOLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ProtocolName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 222:
        jj_consume_token(jjtn000, 222);
        ProtocolList();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public Token ObjCIDENT() throws ParseException {
                     /*@bgen(jjtree) ObjCIDENT */
                      SimpleNode jjtn000 = new SimpleNode(JJTOBJCIDENT);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSSIBLE_COCOA_TYPE:
        t = jj_consume_token(jjtn000, POSSIBLE_COCOA_TYPE);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                    {if (true) return t;}
        break;
      case POSSIBLE_CORE_TYPE:
        t = jj_consume_token(jjtn000, POSSIBLE_CORE_TYPE);
                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                             jjtc000 = false;
                                                                             {if (true) return t;}
        break;
      case IDENT:
        t = jj_consume_token(jjtn000, IDENT);
                                                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                                                         jjtc000 = false;
                                                                                                         {if (true) return t;}
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ClassName() throws ParseException {
                    /*@bgen(jjtree) ClassName */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ObjCIDENT();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SuperClassName() throws ParseException {
                         /*@bgen(jjtree) SuperClassName */
  SimpleNode jjtn000 = new SimpleNode(JJTSUPERCLASSNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ObjCIDENT();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ColonSuperClassName() throws ParseException {
                              /*@bgen(jjtree) ColonSuperClassName */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLONSUPERCLASSNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, COLON);
      SuperClassName();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CategoryName() throws ParseException {
                       /*@bgen(jjtree) CategoryName */
  SimpleNode jjtn000 = new SimpleNode(JJTCATEGORYNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSSIBLE_COCOA_TYPE:
        jj_consume_token(jjtn000, POSSIBLE_COCOA_TYPE);
        break;
      case POSSIBLE_CORE_TYPE:
        jj_consume_token(jjtn000, POSSIBLE_CORE_TYPE);
        break;
      case IDENT:
        jj_consume_token(jjtn000, IDENT);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ProtocolName() throws ParseException {
                       /*@bgen(jjtree) ProtocolName */
  SimpleNode jjtn000 = new SimpleNode(JJTPROTOCOLNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSSIBLE_COCOA_TYPE:
        jj_consume_token(jjtn000, POSSIBLE_COCOA_TYPE);
        break;
      case POSSIBLE_CORE_TYPE:
        jj_consume_token(jjtn000, POSSIBLE_CORE_TYPE);
        break;
      case IDENT:
        jj_consume_token(jjtn000, IDENT);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void InstanceVariables() throws ParseException {
                            /*@bgen(jjtree) InstanceVariables */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTANCEVARIABLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, LEFT_BRACE);
      label_6:
      while (true) {
        if (jj_2_16(1)) {
          ;
        } else {
          break label_6;
        }
        InstanceVariableDeclaration();
      }
      jj_consume_token(jjtn000, RIGHT_BRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(jjtn000, SEMICOLON);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void InstanceVariableDeclaration() throws ParseException {
                                      /*@bgen(jjtree) InstanceVariableDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTANCEVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT_PRIVATE:
      case AT_PACKAGE:
      case AT_PUBLIC:
      case AT_PROTECTED:
        VisibilitySpecification();
        break;
      default:
        jj_la1[21] = jj_gen;
        if (jj_2_17(3)) {
          InstanceVariableDeclarator();
        } else if (jj_2_18(1)) {
          StructDeclaration();
        } else {
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void InstanceVariableDeclarator() throws ParseException {
                                     /*@bgen(jjtree) InstanceVariableDeclarator */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTANCEVARIABLEDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_20(3)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IBOUTLET:
          IBOutlet();
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        if (jj_2_19(2)) {
          ClassName();
          jj_consume_token(jjtn000, STAR);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
            jj_consume_token(jjtn000, ID);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LT:
              ProtocolReferenceList();
              break;
            default:
              jj_la1[23] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(jjtn000, -1);
            throw new ParseException();
          }
        }
        jj_consume_token(jjtn000, IDENT);
        jj_consume_token(jjtn000, SEMICOLON);
      } else if (jj_2_21(1)) {
        Declaration();
      } else {
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void VisibilitySpecification() throws ParseException {
                                  /*@bgen(jjtree) VisibilitySpecification */
  SimpleNode jjtn000 = new SimpleNode(JJTVISIBILITYSPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT_PRIVATE:
        jj_consume_token(jjtn000, AT_PRIVATE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(jjtn000, SEMICOLON);
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        break;
      case AT_PROTECTED:
        jj_consume_token(jjtn000, AT_PROTECTED);
        break;
      case AT_PACKAGE:
        jj_consume_token(jjtn000, AT_PACKAGE);
        break;
      case AT_PUBLIC:
        jj_consume_token(jjtn000, AT_PUBLIC);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void IBOutlet() throws ParseException {
                   /*@bgen(jjtree) IBOutlet */
  SimpleNode jjtn000 = new SimpleNode(JJTIBOUTLET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, IBOUTLET);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ProtocolInterfaceDeclaration() throws ParseException {
                                       /*@bgen(jjtree) ProtocolInterfaceDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTPROTOCOLINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_7:
      while (true) {
        if (jj_2_22(1)) {
          ;
        } else {
          break label_7;
        }
        InterfaceDeclaration();
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT_OPTIONAL:
        case AT_REQUIRED:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_8;
        }
        QualifiedProtocolInterfaceDeclaration();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void QualifiedProtocolInterfaceDeclaration() throws ParseException {
                                                /*@bgen(jjtree) QualifiedProtocolInterfaceDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTQUALIFIEDPROTOCOLINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT_OPTIONAL:
        jj_consume_token(jjtn000, AT_OPTIONAL);
        label_9:
        while (true) {
          if (jj_2_23(1)) {
            ;
          } else {
            break label_9;
          }
          InterfaceDeclaration();
        }
        break;
      case AT_REQUIRED:
        jj_consume_token(jjtn000, AT_REQUIRED);
        label_10:
        while (true) {
          if (jj_2_24(1)) {
            ;
          } else {
            break label_10;
          }
          InterfaceDeclaration();
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void InterfaceDeclaration() throws ParseException {
                               /*@bgen(jjtree) InterfaceDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_25(1)) {
        Declaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT_PROPERTY:
          PropertyDeclaration();
          break;
        case PLUS:
        case MINUS:
          MethodDeclaration();
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PropertyDeclaration() throws ParseException {
                              /*@bgen(jjtree) PropertyDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTPROPERTYDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, AT_PROPERTY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        PropertyAttributesDeclaration();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      if (jj_2_26(3)) {
        StructDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          jj_consume_token(jjtn000, ID);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LT:
            ProtocolReferenceList();
            break;
          default:
            jj_la1[31] = jj_gen;
            ;
          }
          jj_consume_token(jjtn000, IDENT);
          jj_consume_token(jjtn000, SEMICOLON);
          break;
        default:
          jj_la1[32] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PropertyAttributesDeclaration() throws ParseException {
                                        /*@bgen(jjtree) PropertyAttributesDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTPROPERTYATTRIBUTESDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, LEFT_PAREN);
      PropertyAttributesList();
      jj_consume_token(jjtn000, RIGHT_PAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PropertyAttributesList() throws ParseException {
                                 /*@bgen(jjtree) PropertyAttributesList */
  SimpleNode jjtn000 = new SimpleNode(JJTPROPERTYATTRIBUTESLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PropertyAttribute();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 222:
        jj_consume_token(jjtn000, 222);
        PropertyAttributesList();
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PropertyAttribute() throws ParseException {
                            /*@bgen(jjtree) PropertyAttribute */
  SimpleNode jjtn000 = new SimpleNode(JJTPROPERTYATTRIBUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_27(3)) {
        jj_consume_token(jjtn000, IDENT);
        jj_consume_token(jjtn000, ASSIGN);
        jj_consume_token(jjtn000, IDENT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          jj_consume_token(jjtn000, COLON);
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          jj_consume_token(jjtn000, IDENT);
          break;
        case POSSIBLE_COCOA_TYPE:
          jj_consume_token(jjtn000, POSSIBLE_COCOA_TYPE);
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MethodDeclaration() throws ParseException {
                            /*@bgen(jjtree) MethodDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ClassMethodDeclaration();
        break;
      case MINUS:
        InstanceMethodDeclaration();
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ClassMethodDeclaration() throws ParseException {
                                 /*@bgen(jjtree) ClassMethodDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, PLUS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        MethodType();
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      MethodSelector();
      jj_consume_token(jjtn000, SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void InstanceMethodDeclaration() throws ParseException {
                                    /*@bgen(jjtree) InstanceMethodDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTANCEMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, MINUS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        MethodType();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      MethodSelector();
      jj_consume_token(jjtn000, SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ImplementationDefinition() throws ParseException {
                                   /*@bgen(jjtree) ImplementationDefinition */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPLEMENTATIONDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_28(2147483647)) {
        FunctionDefinition();
      } else if (jj_2_29(1)) {
        Declaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT_SYNTHESIZE:
        case AT_DYNAMIC:
          PropertyImplementation();
          break;
        case PLUS:
        case MINUS:
          MethodDefinition();
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PropertyImplementation() throws ParseException {
                                 /*@bgen(jjtree) PropertyImplementation */
  SimpleNode jjtn000 = new SimpleNode(JJTPROPERTYIMPLEMENTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT_SYNTHESIZE:
        jj_consume_token(jjtn000, AT_SYNTHESIZE);
        PropertySynthesizeList();
        jj_consume_token(jjtn000, SEMICOLON);
        break;
      case AT_DYNAMIC:
        jj_consume_token(jjtn000, AT_DYNAMIC);
        PropertySynthesizeList();
        jj_consume_token(jjtn000, SEMICOLON);
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PropertySynthesizeList() throws ParseException {
                                 /*@bgen(jjtree) PropertySynthesizeList */
  SimpleNode jjtn000 = new SimpleNode(JJTPROPERTYSYNTHESIZELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PropertySynthesizeItem();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 222:
        jj_consume_token(jjtn000, 222);
        PropertySynthesizeList();
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PropertySynthesizeItem() throws ParseException {
                                 /*@bgen(jjtree) PropertySynthesizeItem */
  SimpleNode jjtn000 = new SimpleNode(JJTPROPERTYSYNTHESIZEITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_30(2)) {
        jj_consume_token(jjtn000, IDENT);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          jj_consume_token(jjtn000, IDENT);
          jj_consume_token(jjtn000, EQ);
          jj_consume_token(jjtn000, IDENT);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void MethodDefinition() throws ParseException {
                           /*@bgen(jjtree) MethodDefinition */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        ClassMethodDefinition();
        break;
      case MINUS:
        InstanceMethodDefinition();
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ClassMethodDefinition() throws ParseException {
                                /*@bgen(jjtree) ClassMethodDefinition */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSMETHODDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, PLUS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        MethodType();
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      MethodSelectorNoList();
      label_11:
      while (true) {
        if (jj_2_31(1)) {
          ;
        } else {
          break label_11;
        }
        Declaration();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(jjtn000, SEMICOLON);
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      CompoundStatement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void InstanceMethodDefinition() throws ParseException {
                                   /*@bgen(jjtree) InstanceMethodDefinition */
  SimpleNode jjtn000 = new SimpleNode(JJTINSTANCEMETHODDEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, MINUS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        MethodType();
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      MethodSelectorNoList();
      label_12:
      while (true) {
        if (jj_2_32(1)) {
          ;
        } else {
          break label_12;
        }
        Declaration();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(jjtn000, SEMICOLON);
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      CompoundStatement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void MethodSelectorNoList() throws ParseException {
                               /*@bgen(jjtree) MethodSelectorNoList */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODSELECTORNOLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_34(3)) {
        KeywordSelector();
        if (jj_2_33(2)) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 223:
            jj_consume_token(jjtn000, 223);
            break;
          case 222:
            jj_consume_token(jjtn000, 222);
            jj_consume_token(jjtn000, ELLIPSIS);
            break;
          default:
            jj_la1[48] = jj_gen;
            jj_consume_token(jjtn000, -1);
            throw new ParseException();
          }
        } else {
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          UnarySelector();
          break;
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void MethodSelector() throws ParseException {
                         /*@bgen(jjtree) MethodSelector */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_35(3)) {
        MethodSelectorNoList();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
        case IDENT:
          KeywordSelector();
          jj_consume_token(jjtn000, 222);
          ParameterTypeList();
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void UnarySelector() throws ParseException {
                        /*@bgen(jjtree) UnarySelector */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Selector();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void KeywordSelector() throws ParseException {
                          /*@bgen(jjtree) KeywordSelector */
  SimpleNode jjtn000 = new SimpleNode(JJTKEYWORDSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_13:
      while (true) {
        KeywordDeclarator();
        if (jj_2_36(2)) {
          ;
        } else {
          break label_13;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void KeywordDeclarator() throws ParseException {
                            /*@bgen(jjtree) KeywordDeclarator */
  SimpleNode jjtn000 = new SimpleNode(JJTKEYWORDDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        Selector();
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      jj_consume_token(jjtn000, COLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_PAREN:
        MethodType();
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      jj_consume_token(jjtn000, IDENT);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Selector() throws ParseException {
                   /*@bgen(jjtree) Selector */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, IDENT);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void MethodType() throws ParseException {
                     /*@bgen(jjtree) MethodType */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, LEFT_PAREN);
      if (jj_2_37(3)) {
        Block();
      } else if (jj_2_38(1)) {
        TypeNameWithUnknownType();
      } else {
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
      jj_consume_token(jjtn000, RIGHT_PAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SelectorExpression() throws ParseException {
                             /*@bgen(jjtree) SelectorExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, AT_SELECTOR);
      jj_consume_token(jjtn000, LEFT_PAREN);
      SelectorName();
      jj_consume_token(jjtn000, RIGHT_PAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SelectorName() throws ParseException {
                       /*@bgen(jjtree) SelectorName */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTORNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_39(2)) {
        Selector();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
        case IDENT:
          label_14:
          while (true) {
            KeywordName();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COLON:
            case IDENT:
              ;
              break;
            default:
              jj_la1[53] = jj_gen;
              break label_14;
            }
          }
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void KeywordName() throws ParseException {
                      /*@bgen(jjtree) KeywordName */
  SimpleNode jjtn000 = new SimpleNode(JJTKEYWORDNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        Selector();
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      jj_consume_token(jjtn000, COLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ProtocolExpression() throws ParseException {
                             /*@bgen(jjtree) ProtocolExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPROTOCOLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, AT_PROTOCOL);
      jj_consume_token(jjtn000, LEFT_PAREN);
      ProtocolName();
      jj_consume_token(jjtn000, RIGHT_PAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void EncodeExpression() throws ParseException {
                           /*@bgen(jjtree) EncodeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTENCODEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, AT_ENCODE);
      jj_consume_token(jjtn000, LEFT_PAREN);
      TypeNameWithUnknownType();
      jj_consume_token(jjtn000, RIGHT_PAREN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DeclarationList() throws ParseException {
                          /*@bgen(jjtree) DeclarationList */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_15:
      while (true) {
        Declaration();
        if (jj_2_40(2147483647)) {
          ;
        } else {
          break label_15;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DeclarationSpecifiers() throws ParseException {
                                /*@bgen(jjtree) DeclarationSpecifiers */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATIONSPECIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_45(3)) {
        TypeSpecifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REGISTER:
        case TYPEDEF:
        case EXTERN:
        case STATIC:
        case AUTO:
          StorageClassSpecifier();
          break;
        default:
          jj_la1[56] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOLATILE:
        case CONST:
          TypeQualifier();
          break;
        default:
          jj_la1[57] = jj_gen;
          ;
        }
      } else if (jj_2_46(1)) {
        TypeSpecifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOLATILE:
        case CONST:
          TypeQualifier();
          break;
        default:
          jj_la1[58] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REGISTER:
        case TYPEDEF:
        case EXTERN:
        case STATIC:
        case AUTO:
          StorageClassSpecifier();
          break;
        default:
          jj_la1[59] = jj_gen;
          ;
        }
      } else if (jj_2_47(3)) {
        StorageClassSpecifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOLATILE:
        case CONST:
          TypeQualifier();
          break;
        default:
          jj_la1[60] = jj_gen;
          ;
        }
        if (jj_2_41(2)) {
          TypeSpecifier();
        } else {
          ;
        }
      } else if (jj_2_48(3)) {
        StorageClassSpecifier();
        if (jj_2_42(2)) {
          TypeSpecifier();
        } else {
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOLATILE:
        case CONST:
          TypeQualifier();
          break;
        default:
          jj_la1[61] = jj_gen;
          ;
        }
      } else if (jj_2_49(3)) {
        TypeQualifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REGISTER:
        case TYPEDEF:
        case EXTERN:
        case STATIC:
        case AUTO:
          StorageClassSpecifier();
          break;
        default:
          jj_la1[62] = jj_gen;
          ;
        }
        if (jj_2_43(2)) {
          TypeSpecifier();
        } else {
          ;
        }
      } else if (jj_2_50(2)) {
        TypeQualifier();
        if (jj_2_44(2)) {
          TypeSpecifier();
        } else {
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REGISTER:
        case TYPEDEF:
        case EXTERN:
        case STATIC:
        case AUTO:
          StorageClassSpecifier();
          break;
        default:
          jj_la1[63] = jj_gen;
          ;
        }
      } else {
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void StorageClassSpecifier() throws ParseException {
                                /*@bgen(jjtree) StorageClassSpecifier */
  SimpleNode jjtn000 = new SimpleNode(JJTSTORAGECLASSSPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AUTO:
        jj_consume_token(jjtn000, AUTO);
        break;
      case REGISTER:
        jj_consume_token(jjtn000, REGISTER);
        break;
      case STATIC:
        jj_consume_token(jjtn000, STATIC);
        break;
      case EXTERN:
        jj_consume_token(jjtn000, EXTERN);
        break;
      case TYPEDEF:
        jj_consume_token(jjtn000, TYPEDEF);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                typedefParsingStack.push(Boolean.TRUE);
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TypeSpecifier() throws ParseException {
                        /*@bgen(jjtree) TypeSpecifier */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPESPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIXED_NUM_TYPE:
      case UNSIGNED:
      case SIGNED:
        GreedyFixedNumType();
        break;
      case VOID:
        jj_consume_token(jjtn000, VOID);
        break;
      case CHAR:
        jj_consume_token(jjtn000, CHAR);
        break;
      case FLOAT:
        jj_consume_token(jjtn000, FLOAT);
        break;
      case DOUBLE:
        jj_consume_token(jjtn000, DOUBLE);
        break;
      case BOOL:
        jj_consume_token(jjtn000, BOOL);
        break;
      case IBACTION:
        jj_consume_token(jjtn000, IBACTION);
        break;
      case ID:
        jj_consume_token(jjtn000, ID);
        break;
      case INT32_T:
        jj_consume_token(jjtn000, INT32_T);
        break;
      case CGFLOAT:
        jj_consume_token(jjtn000, CGFLOAT);
        break;
      case NSRECT:
        jj_consume_token(jjtn000, NSRECT);
        break;
      case NSUINTEGER:
        jj_consume_token(jjtn000, NSUINTEGER);
        break;
      case NSINTEGER:
        jj_consume_token(jjtn000, NSINTEGER);
        break;
      case NSSIZE:
        jj_consume_token(jjtn000, NSSIZE);
        break;
      case SEL:
        jj_consume_token(jjtn000, SEL);
        break;
      case CLASS:
        jj_consume_token(jjtn000, CLASS);
        break;
      case IMP:
        jj_consume_token(jjtn000, IMP);
        break;
      case SINT32:
        jj_consume_token(jjtn000, SINT32);
        break;
      case BOOLEAN:
        jj_consume_token(jjtn000, BOOLEAN);
        break;
      case SCHAR:
        jj_consume_token(jjtn000, SCHAR);
        break;
      case UCHAR:
        jj_consume_token(jjtn000, UCHAR);
        break;
      case STRUCT:
      case UNION:
        StructOrUnionSpecifier();
        break;
      case ENUM:
        EnumSpecifier();
        break;
      default:
        jj_la1[65] = jj_gen;
        if (isType(getToken(1).image)) {
          TypedefName();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case POSSIBLE_COCOA_TYPE:
            PossibleCocoaType();
            break;
          case POSSIBLE_CORE_TYPE:
            PossibleCoreType();
            break;
          case IDENT:
            PossibleUnknownType();
            break;
          default:
            jj_la1[66] = jj_gen;
            jj_consume_token(jjtn000, -1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void GreedyFixedNumType() throws ParseException {
                             /*@bgen(jjtree) GreedyFixedNumType */
  SimpleNode jjtn000 = new SimpleNode(JJTGREEDYFIXEDNUMTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_52(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNSIGNED:
        case SIGNED:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SIGNED:
            jj_consume_token(jjtn000, SIGNED);
            break;
          case UNSIGNED:
            jj_consume_token(jjtn000, UNSIGNED);
            break;
          default:
            jj_la1[67] = jj_gen;
            jj_consume_token(jjtn000, -1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[68] = jj_gen;
          ;
        }
        jj_consume_token(jjtn000, FIXED_NUM_TYPE);
        if (jj_2_51(2)) {
          jj_consume_token(jjtn000, FIXED_NUM_TYPE);
        } else {
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SIGNED:
          jj_consume_token(jjtn000, SIGNED);
          break;
        case UNSIGNED:
          jj_consume_token(jjtn000, UNSIGNED);
          break;
        default:
          jj_la1[69] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void PossibleCocoaType() throws ParseException {
                            /*@bgen(jjtree) PossibleCocoaType */
                             SimpleNode jjtn000 = new SimpleNode(JJTPOSSIBLECOCOATYPE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(jjtn000, POSSIBLE_COCOA_TYPE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
           if (verbose)
              System.out.println("WARNING: Adding typedef on possible Cocoa type " + t.image + " at line number " + t.beginLine + ", column number " + t.beginColumn);
           addType(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PossibleCoreType() throws ParseException {
                           /*@bgen(jjtree) PossibleCoreType */
                            SimpleNode jjtn000 = new SimpleNode(JJTPOSSIBLECORETYPE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(jjtn000, POSSIBLE_CORE_TYPE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
           if (verbose)
               System.out.println("WARNING: Adding typedef on possible CoreFoundation type " + t.image + " at line number " + t.beginLine + ", column number " + t.beginColumn);
           addType(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PossibleUnknownType() throws ParseException {
                              /*@bgen(jjtree) PossibleUnknownType */
                               SimpleNode jjtn000 = new SimpleNode(JJTPOSSIBLEUNKNOWNTYPE);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(jjtn000, IDENT);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
           if (verbose)
              System.out.println("WARNING: Adding typedef on unknown identifier " + t.image + " at line number " + t.beginLine + ", column number " + t.beginColumn);
           addType(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TypeSpecifierWithUnknownType() throws ParseException {
                                       /*@bgen(jjtree) TypeSpecifierWithUnknownType */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPESPECIFIERWITHUNKNOWNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_53(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POSSIBLE_COCOA_TYPE:
        case POSSIBLE_CORE_TYPE:
        case IDENT:
          ObjCIDENT();
          break;
        case ID:
          jj_consume_token(jjtn000, ID);
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          ProtocolReferenceList();
          break;
        default:
          jj_la1[71] = jj_gen;
          ;
        }
      } else if (jj_2_54(1)) {
        TypeSpecifier();
      } else {
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void TypeQualifier() throws ParseException {
                        /*@bgen(jjtree) TypeQualifier */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEQUALIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        jj_consume_token(jjtn000, CONST);
        break;
      case VOLATILE:
        jj_consume_token(jjtn000, VOLATILE);
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void StructOrUnionSpecifier() throws ParseException {
                                 /*@bgen(jjtree) StructOrUnionSpecifier */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRUCTORUNIONSPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
                typedefParsingStack.push(Boolean.FALSE);
      StructOrUnion();
      if (jj_2_56(3)) {
        if (jj_2_55(2)) {
          ObjCIDENT();
        } else {
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_BRACE:
          jj_consume_token(jjtn000, LEFT_BRACE);
          StructDeclarationList();
          jj_consume_token(jjtn000, RIGHT_BRACE);
          break;
        case POSSIBLE_COCOA_TYPE:
        case POSSIBLE_CORE_TYPE:
        case IDENT:
          ObjCIDENT();
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          jj_consume_token(jjtn000, IDENT);
          break;
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                typedefParsingStack.pop();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void StructOrUnion() throws ParseException {
                        /*@bgen(jjtree) StructOrUnion */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRUCTORUNION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRUCT:
        jj_consume_token(jjtn000, STRUCT);
        break;
      case UNION:
        jj_consume_token(jjtn000, UNION);
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void StructDeclarationList() throws ParseException {
                                /*@bgen(jjtree) StructDeclarationList */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRUCTDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_16:
      while (true) {
        StructDeclaration();
        if (jj_2_57(1)) {
          ;
        } else {
          break label_16;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void InitDeclaratorList() throws ParseException {
                             /*@bgen(jjtree) InitDeclaratorList */
  SimpleNode jjtn000 = new SimpleNode(JJTINITDECLARATORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InitDeclarator();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 222:
          ;
          break;
        default:
          jj_la1[76] = jj_gen;
          break label_17;
        }
        jj_consume_token(jjtn000, 222);
        InitDeclarator();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                // Finished with a typedefDeclaration??
                if(!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()){
                           typedefParsingStack.pop();
          }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void InitDeclarator() throws ParseException {
                         /*@bgen(jjtree) InitDeclarator */
  SimpleNode jjtn000 = new SimpleNode(JJTINITDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Declarator();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(jjtn000, ASSIGN);
        Initializer();
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ProtocolQualifier() throws ParseException {
                            /*@bgen(jjtree) ProtocolQualifier */
  SimpleNode jjtn000 = new SimpleNode(JJTPROTOCOLQUALIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROTOCOL_QUALIFIER_EXCEPT_IN:
        jj_consume_token(jjtn000, PROTOCOL_QUALIFIER_EXCEPT_IN);
        break;
      default:
        jj_la1[78] = jj_gen;
        if (jj_2_58(1)) {
          In();
        } else {
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void In() throws ParseException {
             /*@bgen(jjtree) In */
  SimpleNode jjtn000 = new SimpleNode(JJTIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (getToken(0).image.equals("in")) {

      } else {
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
      jj_consume_token(jjtn000, IDENT);
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void StructDeclaration() throws ParseException {
                            /*@bgen(jjtree) StructDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRUCTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SpecifierQualifierList();
      if (jj_2_59(1)) {
        StructDeclaratorList();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_SQUARE:
          jj_consume_token(jjtn000, LEFT_SQUARE);
          ConstantExpression();
          jj_consume_token(jjtn000, RIGHT_SQUARE);
          break;
        default:
          jj_la1[79] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
      jj_consume_token(jjtn000, SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SpecifierQualifierWithUnknownType() throws ParseException {
                                            /*@bgen(jjtree) SpecifierQualifierWithUnknownType */
  SimpleNode jjtn000 = new SimpleNode(JJTSPECIFIERQUALIFIERWITHUNKNOWNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_60(2)) {
        TypeSpecifierWithUnknownType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOLATILE:
        case CONST:
          TypeQualifier();
          break;
        default:
          jj_la1[80] = jj_gen;
          if (jj_2_61(1)) {
            ProtocolQualifier();
          } else {
            jj_consume_token(jjtn000, -1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SpecifierQualifierList() throws ParseException {
                                 /*@bgen(jjtree) SpecifierQualifierList */
  SimpleNode jjtn000 = new SimpleNode(JJTSPECIFIERQUALIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_62(1)) {
        TypeSpecifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOLATILE:
        case CONST:
          TypeQualifier();
          break;
        default:
          jj_la1[81] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOLATILE:
        case CONST:
          TypeQualifier();
          TypeSpecifier();
          break;
        default:
          jj_la1[82] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void StructDeclaratorList() throws ParseException {
                               /*@bgen(jjtree) StructDeclaratorList */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRUCTDECLARATORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      StructDeclarator();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 222:
          ;
          break;
        default:
          jj_la1[83] = jj_gen;
          break label_18;
        }
        jj_consume_token(jjtn000, 222);
        StructDeclarator();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void StructDeclarator() throws ParseException {
                           /*@bgen(jjtree) StructDeclarator */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRUCTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Declarator();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void EnumSpecifier() throws ParseException {
                        /*@bgen(jjtree) EnumSpecifier */
  SimpleNode jjtn000 = new SimpleNode(JJTENUMSPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, ENUM);
      if (jj_2_63(3)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POSSIBLE_COCOA_TYPE:
        case POSSIBLE_CORE_TYPE:
        case IDENT:
          ObjCIDENT();
          break;
        default:
          jj_la1[84] = jj_gen;
          ;
        }
        jj_consume_token(jjtn000, LEFT_BRACE);
        EnumeratorList();
        jj_consume_token(jjtn000, RIGHT_BRACE);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          jj_consume_token(jjtn000, IDENT);
          break;
        default:
          jj_la1[85] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void EnumeratorList() throws ParseException {
                         /*@bgen(jjtree) EnumeratorList */
  SimpleNode jjtn000 = new SimpleNode(JJTENUMERATORLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Enumerator();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 222:
          ;
          break;
        default:
          jj_la1[86] = jj_gen;
          break label_19;
        }
        jj_consume_token(jjtn000, 222);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POSSIBLE_COCOA_TYPE:
        case POSSIBLE_CORE_TYPE:
        case IDENT:
          Enumerator();
          break;
        default:
          jj_la1[87] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Enumerator() throws ParseException {
                     /*@bgen(jjtree) Enumerator */
  SimpleNode jjtn000 = new SimpleNode(JJTENUMERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ObjCIDENT();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(jjtn000, ASSIGN);
        ConstantExpression();
        break;
      default:
        jj_la1[88] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Declarator() throws ParseException {
                     /*@bgen(jjtree) Declarator */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_64(3)) {
        Block();
      } else if (jj_2_65(3)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          Pointer();
          break;
        default:
          jj_la1[89] = jj_gen;
          ;
        }
        DirectDeclarator();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          jj_consume_token(jjtn000, COLON);
          ConstantExpression();
          break;
        default:
          jj_la1[90] = jj_gen;
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          jj_consume_token(jjtn000, COLON);
          ConstantExpression();
          break;
        default:
          jj_la1[91] = jj_gen;
          if (jj_2_66(2)) {
            TypeSpecifier();
          } else {
            jj_consume_token(jjtn000, -1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Block() throws ParseException {
                /*@bgen(jjtree) Block */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL:
      case VOID:
      case ID:
      case POSSIBLE_COCOA_TYPE:
      case POSSIBLE_CORE_TYPE:
      case IDENT:
        if (jj_2_67(3)) {
          jj_consume_token(jjtn000, VOID);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOL:
            jj_consume_token(jjtn000, BOOL);
            break;
          case ID:
            jj_consume_token(jjtn000, ID);
            break;
          case POSSIBLE_COCOA_TYPE:
          case POSSIBLE_CORE_TYPE:
          case IDENT:
            ObjCIDENT();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case STAR:
              jj_consume_token(jjtn000, STAR);
              break;
            default:
              jj_la1[92] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[93] = jj_gen;
            jj_consume_token(jjtn000, -1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[94] = jj_gen;
        ;
      }
      jj_consume_token(jjtn000, BLOCK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSSIBLE_COCOA_TYPE:
      case POSSIBLE_CORE_TYPE:
      case IDENT:
        ObjCIDENT();
        break;
      default:
        jj_la1[95] = jj_gen;
        ;
      }
      jj_consume_token(jjtn000, RIGHT_PAREN);
      jj_consume_token(jjtn000, LEFT_PAREN);
      ParameterList();
      jj_consume_token(jjtn000, RIGHT_PAREN);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void DirectDeclarator() throws ParseException {
                           /*@bgen(jjtree) DirectDeclarator */
                            SimpleNode jjtn000 = new SimpleNode(JJTDIRECTDECLARATOR);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSSIBLE_COCOA_TYPE:
      case POSSIBLE_CORE_TYPE:
      case IDENT:
        t = ObjCIDENT();
          if(!(typedefParsingStack.empty()) && ((Boolean)typedefParsingStack.peek()).booleanValue()){
                                addType(t.image);
          }
        break;
      default:
        jj_la1[96] = jj_gen;
        if (jj_2_68(3)) {
          jj_consume_token(jjtn000, LEFT_PAREN);
          Declarator();
          jj_consume_token(jjtn000, RIGHT_PAREN);
        } else {
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    typedefParsingStack.push( Boolean.FALSE );
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
        case LEFT_SQUARE:
          ;
          break;
        default:
          jj_la1[97] = jj_gen;
          break label_20;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_SQUARE:
          jj_consume_token(jjtn000, LEFT_SQUARE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BANG:
          case TILDE:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:
          case STAR:
          case BIT_AND:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case INTEGER_CONSTANT:
          case SIZEOF:
          case NIL:
          case LEFT_PAREN:
          case LEFT_SQUARE:
          case AT_PROTOCOL:
          case AT_ENCODE:
          case AT_SELECTOR:
          case POSSIBLE_COCOA_TYPE:
          case POSSIBLE_CORE_TYPE:
          case IDENT:
            ConstantExpression();
            break;
          default:
            jj_la1[98] = jj_gen;
            ;
          }
          jj_consume_token(jjtn000, RIGHT_SQUARE);
          break;
        default:
          jj_la1[100] = jj_gen;
          if (jj_2_69(3)) {
            jj_consume_token(jjtn000, LEFT_PAREN);
            ParameterTypeList();
            jj_consume_token(jjtn000, RIGHT_PAREN);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LEFT_PAREN:
              jj_consume_token(jjtn000, LEFT_PAREN);
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case IDENT:
                IdentifierList();
                break;
              default:
                jj_la1[99] = jj_gen;
                ;
              }
              jj_consume_token(jjtn000, RIGHT_PAREN);
              break;
            default:
              jj_la1[101] = jj_gen;
              jj_consume_token(jjtn000, -1);
              throw new ParseException();
            }
          }
        }
      }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        typedefParsingStack.pop();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Pointer() throws ParseException {
                  /*@bgen(jjtree) Pointer */
  SimpleNode jjtn000 = new SimpleNode(JJTPOINTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, STAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOLATILE:
      case CONST:
        TypeQualifierList();
        break;
      default:
        jj_la1[102] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        Pointer();
        break;
      default:
        jj_la1[103] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TypeQualifierList() throws ParseException {
                            /*@bgen(jjtree) TypeQualifierList */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEQUALIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_21:
      while (true) {
        TypeQualifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOLATILE:
        case CONST:
          ;
          break;
        default:
          jj_la1[104] = jj_gen;
          break label_21;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ParameterTypeList() throws ParseException {
                            /*@bgen(jjtree) ParameterTypeList */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERTYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ParameterList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 222:
        jj_consume_token(jjtn000, 222);
        jj_consume_token(jjtn000, ELLIPSIS);
        break;
      default:
        jj_la1[105] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ParameterList() throws ParseException {
                        /*@bgen(jjtree) ParameterList */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ParameterDeclaration();
      label_22:
      while (true) {
        if (jj_2_70(2)) {
          ;
        } else {
          break label_22;
        }
        jj_consume_token(jjtn000, 222);
        ParameterDeclaration();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ParameterDeclaration() throws ParseException {
                               /*@bgen(jjtree) ParameterDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      DeclarationSpecifiers();
      if (jj_2_71(2147483647)) {
        Declarator();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case LEFT_PAREN:
        case LEFT_SQUARE:
          AbstractDeclarator();
          break;
        default:
          jj_la1[106] = jj_gen;
          ;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void IdentifierList() throws ParseException {
                         /*@bgen(jjtree) IdentifierList */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, IDENT);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 222:
          ;
          break;
        default:
          jj_la1[107] = jj_gen;
          break label_23;
        }
        jj_consume_token(jjtn000, 222);
        jj_consume_token(jjtn000, IDENT);
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Initializer() throws ParseException {
                      /*@bgen(jjtree) Initializer */
  SimpleNode jjtn000 = new SimpleNode(JJTINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case STAR:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case INTEGER_CONSTANT:
      case SIZEOF:
      case NIL:
      case LEFT_PAREN:
      case LEFT_SQUARE:
      case AT_PROTOCOL:
      case AT_ENCODE:
      case AT_SELECTOR:
      case POSSIBLE_COCOA_TYPE:
      case POSSIBLE_CORE_TYPE:
      case IDENT:
        AssignmentExpression();
        break;
      case LEFT_BRACE:
        jj_consume_token(jjtn000, LEFT_BRACE);
        InitializerList();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 222:
          jj_consume_token(jjtn000, 222);
          break;
        default:
          jj_la1[108] = jj_gen;
          ;
        }
        jj_consume_token(jjtn000, RIGHT_BRACE);
        break;
      default:
        jj_la1[109] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void InitializerList() throws ParseException {
                          /*@bgen(jjtree) InitializerList */
  SimpleNode jjtn000 = new SimpleNode(JJTINITIALIZERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Initializer();
      label_24:
      while (true) {
        if (jj_2_72(2)) {
          ;
        } else {
          break label_24;
        }
        jj_consume_token(jjtn000, 222);
        Initializer();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TypeName() throws ParseException {
                   /*@bgen(jjtree) TypeName */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SpecifierQualifierList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case LEFT_PAREN:
      case LEFT_SQUARE:
        AbstractDeclarator();
        break;
      default:
        jj_la1[110] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TypeNameWithUnknownType() throws ParseException {
                                  /*@bgen(jjtree) TypeNameWithUnknownType */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPENAMEWITHUNKNOWNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_25:
      while (true) {
        SpecifierQualifierWithUnknownType();
        if (jj_2_73(1)) {
          ;
        } else {
          break label_25;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case LEFT_PAREN:
      case LEFT_SQUARE:
        AbstractDeclarator();
        break;
      default:
        jj_la1[111] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void AbstractDeclarator() throws ParseException {
                             /*@bgen(jjtree) AbstractDeclarator */
  SimpleNode jjtn000 = new SimpleNode(JJTABSTRACTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_74(3)) {
        Pointer();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case LEFT_PAREN:
        case LEFT_SQUARE:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STAR:
            Pointer();
            break;
          default:
            jj_la1[112] = jj_gen;
            ;
          }
          DirectAbstractDeclarator();
          break;
        default:
          jj_la1[113] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void DirectAbstractDeclarator() throws ParseException {
                                   /*@bgen(jjtree) DirectAbstractDeclarator */
  SimpleNode jjtn000 = new SimpleNode(JJTDIRECTABSTRACTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_76(2)) {
        jj_consume_token(jjtn000, LEFT_PAREN);
        AbstractDeclarator();
        jj_consume_token(jjtn000, RIGHT_PAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_SQUARE:
          jj_consume_token(jjtn000, LEFT_SQUARE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BANG:
          case TILDE:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:
          case STAR:
          case BIT_AND:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case INTEGER_CONSTANT:
          case SIZEOF:
          case NIL:
          case LEFT_PAREN:
          case LEFT_SQUARE:
          case AT_PROTOCOL:
          case AT_ENCODE:
          case AT_SELECTOR:
          case POSSIBLE_COCOA_TYPE:
          case POSSIBLE_CORE_TYPE:
          case IDENT:
            ConstantExpression();
            break;
          default:
            jj_la1[114] = jj_gen;
            ;
          }
          jj_consume_token(jjtn000, RIGHT_SQUARE);
          break;
        case LEFT_PAREN:
          jj_consume_token(jjtn000, LEFT_PAREN);
          if (jj_2_75(1)) {
            ParameterTypeList();
          } else {
            ;
          }
          jj_consume_token(jjtn000, RIGHT_PAREN);
          break;
        default:
          jj_la1[115] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_PAREN:
        case LEFT_SQUARE:
          ;
          break;
        default:
          jj_la1[116] = jj_gen;
          break label_26;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFT_SQUARE:
          jj_consume_token(jjtn000, LEFT_SQUARE);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BANG:
          case TILDE:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:
          case STAR:
          case BIT_AND:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case INTEGER_CONSTANT:
          case SIZEOF:
          case NIL:
          case LEFT_PAREN:
          case LEFT_SQUARE:
          case AT_PROTOCOL:
          case AT_ENCODE:
          case AT_SELECTOR:
          case POSSIBLE_COCOA_TYPE:
          case POSSIBLE_CORE_TYPE:
          case IDENT:
            ConstantExpression();
            break;
          default:
            jj_la1[117] = jj_gen;
            ;
          }
          jj_consume_token(jjtn000, RIGHT_SQUARE);
          break;
        case LEFT_PAREN:
          jj_consume_token(jjtn000, LEFT_PAREN);
          if (jj_2_77(1)) {
            ParameterTypeList();
          } else {
            ;
          }
          jj_consume_token(jjtn000, RIGHT_PAREN);
          break;
        default:
          jj_la1[118] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TypedefName() throws ParseException {
                      /*@bgen(jjtree) TypedefName */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEDEFNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ObjCIDENT();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Statement() throws ParseException {
                    /*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_78(2)) {
        LabeledStatement();
      } else if (jj_2_79(3)) {
        InitStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case STAR:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case INTEGER_CONSTANT:
        case SIZEOF:
        case NIL:
        case LEFT_PAREN:
        case LEFT_SQUARE:
        case SEMICOLON:
        case AT_PROTOCOL:
        case AT_ENCODE:
        case AT_SELECTOR:
        case POSSIBLE_COCOA_TYPE:
        case POSSIBLE_CORE_TYPE:
        case IDENT:
          ExpressionStatement();
          break;
        case LEFT_BRACE:
          CompoundStatement();
          break;
        case SWITCH:
        case IF:
          SelectionStatement();
          break;
        case WHILE:
        case FOR:
        case DO:
          IterationStatement();
          break;
        case CONTINUE:
        case RETURN:
        case BREAK:
        case GOTO:
          JumpStatement();
          break;
        default:
          jj_la1[119] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LabeledStatement() throws ParseException {
                           /*@bgen(jjtree) LabeledStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTLABELEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        jj_consume_token(jjtn000, IDENT);
        jj_consume_token(jjtn000, COLON);
        Statement();
        break;
      case CASE:
        jj_consume_token(jjtn000, CASE);
        ConstantExpression();
        jj_consume_token(jjtn000, COLON);
        Statement();
        break;
      case DFLT:
        jj_consume_token(jjtn000, DFLT);
        jj_consume_token(jjtn000, COLON);
        Statement();
        break;
      default:
        jj_la1[120] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void InitStatement() throws ParseException {
                        /*@bgen(jjtree) InitStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTINITSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_80(2)) {
        TypeSpecifier();
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(jjtn000, STAR);
        break;
      default:
        jj_la1[121] = jj_gen;
        ;
      }
      jj_consume_token(jjtn000, IDENT);
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 222:
          ;
          break;
        default:
          jj_la1[122] = jj_gen;
          break label_27;
        }
        jj_consume_token(jjtn000, 222);
        jj_consume_token(jjtn000, IDENT);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(jjtn000, ASSIGN);
        if (jj_2_81(3)) {
          MessageExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case INTEGER_CONSTANT:
          case NIL:
          case LEFT_PAREN:
          case LEFT_SQUARE:
          case AT_PROTOCOL:
          case AT_ENCODE:
          case AT_SELECTOR:
          case POSSIBLE_COCOA_TYPE:
          case POSSIBLE_CORE_TYPE:
          case IDENT:
            PostfixExpression();
            break;
          default:
            jj_la1[123] = jj_gen;
            jj_consume_token(jjtn000, -1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(jjtn000, SEMICOLON);
          break;
        case 222:
          jj_consume_token(jjtn000, 222);
          InitStatement();
          break;
        default:
          jj_la1[124] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
        break;
      case SEMICOLON:
        jj_consume_token(jjtn000, SEMICOLON);
        break;
      default:
        jj_la1[125] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void ExpressionStatement() throws ParseException {
                              /*@bgen(jjtree) ExpressionStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case STAR:
      case BIT_AND:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case INTEGER_CONSTANT:
      case SIZEOF:
      case NIL:
      case LEFT_PAREN:
      case LEFT_SQUARE:
      case AT_PROTOCOL:
      case AT_ENCODE:
      case AT_SELECTOR:
      case POSSIBLE_COCOA_TYPE:
      case POSSIBLE_CORE_TYPE:
      case IDENT:
        Expression();
        break;
      default:
        jj_la1[126] = jj_gen;
        ;
      }
      jj_consume_token(jjtn000, SEMICOLON);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CompoundStatement() throws ParseException {
                            /*@bgen(jjtree) CompoundStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMPOUNDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, LEFT_BRACE);
      label_28:
      while (true) {
        if (jj_2_82(1)) {
          ;
        } else {
          break label_28;
        }
        if (jj_2_83(2147483647)) {
          DeclarationList();
        } else if (jj_2_84(1)) {
          StatementList();
        } else {
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
      jj_consume_token(jjtn000, RIGHT_BRACE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void StatementList() throws ParseException {
                        /*@bgen(jjtree) StatementList */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_29:
      while (true) {
        Statement();
        if (jj_2_85(2)) {
          ;
        } else {
          break label_29;
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SelectionStatement() throws ParseException {
                             /*@bgen(jjtree) SelectionStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        jj_consume_token(jjtn000, IF);
        jj_consume_token(jjtn000, LEFT_PAREN);
        if (jj_2_86(2)) {
          NestedLogicalExpression();
        } else {
          ;
        }
        Expression();
        jj_consume_token(jjtn000, RIGHT_PAREN);
        Statement();
        if (jj_2_87(2)) {
          jj_consume_token(jjtn000, ELSE);
          Statement();
        } else {
          ;
        }
        break;
      case SWITCH:
        jj_consume_token(jjtn000, SWITCH);
        jj_consume_token(jjtn000, LEFT_PAREN);
        Expression();
        jj_consume_token(jjtn000, RIGHT_PAREN);
        Statement();
        break;
      default:
        jj_la1[127] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void NestedLogicalExpression() throws ParseException {
                                  /*@bgen(jjtree) NestedLogicalExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTNESTEDLOGICALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, LEFT_PAREN);
      if (jj_2_88(2)) {
        NestedLogicalExpression();
      } else {
        ;
      }
      Expression();
      jj_consume_token(jjtn000, RIGHT_PAREN);
      LogicalOperator();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LogicalOperator() throws ParseException {
                          /*@bgen(jjtree) LogicalOperator */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICALOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        jj_consume_token(jjtn000, XOR);
        break;
      case EQ:
        jj_consume_token(jjtn000, EQ);
        break;
      case SC_OR:
        jj_consume_token(jjtn000, SC_OR);
        break;
      case SC_AND:
        jj_consume_token(jjtn000, SC_AND);
        break;
      default:
        jj_la1[128] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void IterationStatement() throws ParseException {
                             /*@bgen(jjtree) IterationStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTITERATIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
        jj_consume_token(jjtn000, WHILE);
        jj_consume_token(jjtn000, LEFT_PAREN);
        Expression();
        jj_consume_token(jjtn000, RIGHT_PAREN);
        Statement();
        break;
      case DO:
        jj_consume_token(jjtn000, DO);
        Statement();
        jj_consume_token(jjtn000, WHILE);
        jj_consume_token(jjtn000, LEFT_PAREN);
        Expression();
        jj_consume_token(jjtn000, RIGHT_PAREN);
        jj_consume_token(jjtn000, SEMICOLON);
        break;
      case FOR:
        jj_consume_token(jjtn000, FOR);
        jj_consume_token(jjtn000, LEFT_PAREN);
        if (jj_2_90(3)) {
          TypeSpecifier();
          jj_consume_token(jjtn000, IDENT);
          In();
          PrimaryExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BANG:
          case TILDE:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:
          case STAR:
          case BIT_AND:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case INTEGER_CONSTANT:
          case FIXED_NUM_TYPE:
          case DOUBLE:
          case SIZEOF:
          case FLOAT:
          case NIL:
          case LEFT_PAREN:
          case LEFT_SQUARE:
          case SEMICOLON:
          case AT_PROTOCOL:
          case AT_ENCODE:
          case AT_SELECTOR:
          case POSSIBLE_COCOA_TYPE:
          case POSSIBLE_CORE_TYPE:
          case IDENT:
            if (jj_2_89(2147483647)) {
              NumberTypeInit();
            } else {
              ;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case STAR:
            case BIT_AND:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case INTEGER_CONSTANT:
            case SIZEOF:
            case NIL:
            case LEFT_PAREN:
            case LEFT_SQUARE:
            case AT_PROTOCOL:
            case AT_ENCODE:
            case AT_SELECTOR:
            case POSSIBLE_COCOA_TYPE:
            case POSSIBLE_CORE_TYPE:
            case IDENT:
              Expression();
              break;
            default:
              jj_la1[129] = jj_gen;
              ;
            }
            jj_consume_token(jjtn000, SEMICOLON);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case STAR:
            case BIT_AND:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case INTEGER_CONSTANT:
            case SIZEOF:
            case NIL:
            case LEFT_PAREN:
            case LEFT_SQUARE:
            case AT_PROTOCOL:
            case AT_ENCODE:
            case AT_SELECTOR:
            case POSSIBLE_COCOA_TYPE:
            case POSSIBLE_CORE_TYPE:
            case IDENT:
              Expression();
              break;
            default:
              jj_la1[130] = jj_gen;
              ;
            }
            jj_consume_token(jjtn000, SEMICOLON);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
            case STAR:
            case BIT_AND:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case INTEGER_CONSTANT:
            case SIZEOF:
            case NIL:
            case LEFT_PAREN:
            case LEFT_SQUARE:
            case AT_PROTOCOL:
            case AT_ENCODE:
            case AT_SELECTOR:
            case POSSIBLE_COCOA_TYPE:
            case POSSIBLE_CORE_TYPE:
            case IDENT:
              Expression();
              break;
            default:
              jj_la1[131] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[132] = jj_gen;
            jj_consume_token(jjtn000, -1);
            throw new ParseException();
          }
        }
        jj_consume_token(jjtn000, RIGHT_PAREN);
        Statement();
        break;
      default:
        jj_la1[133] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void NumberTypeInit() throws ParseException {
                         /*@bgen(jjtree) NumberTypeInit */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBERTYPEINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIXED_NUM_TYPE:
        jj_consume_token(jjtn000, FIXED_NUM_TYPE);
        break;
      case FLOAT:
        jj_consume_token(jjtn000, FLOAT);
        break;
      case DOUBLE:
        jj_consume_token(jjtn000, DOUBLE);
        break;
      default:
        jj_la1[134] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  final public void JumpStatement() throws ParseException {
                        /*@bgen(jjtree) JumpStatement */
  SimpleNode jjtn000 = new SimpleNode(JJTJUMPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GOTO:
        jj_consume_token(jjtn000, GOTO);
        jj_consume_token(jjtn000, IDENT);
        jj_consume_token(jjtn000, SEMICOLON);
        break;
      case CONTINUE:
        jj_consume_token(jjtn000, CONTINUE);
        jj_consume_token(jjtn000, SEMICOLON);
        break;
      case BREAK:
        jj_consume_token(jjtn000, BREAK);
        jj_consume_token(jjtn000, SEMICOLON);
        break;
      case RETURN:
        jj_consume_token(jjtn000, RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case STAR:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case INTEGER_CONSTANT:
        case SIZEOF:
        case NIL:
        case LEFT_PAREN:
        case LEFT_SQUARE:
        case AT_PROTOCOL:
        case AT_ENCODE:
        case AT_SELECTOR:
        case POSSIBLE_COCOA_TYPE:
        case POSSIBLE_CORE_TYPE:
        case IDENT:
          Expression();
          break;
        default:
          jj_la1[135] = jj_gen;
          ;
        }
        jj_consume_token(jjtn000, SEMICOLON);
        break;
      default:
        jj_la1[136] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Expression() throws ParseException {
                     /*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AssignmentExpression();
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 222:
          ;
          break;
        default:
          jj_la1[137] = jj_gen;
          break label_30;
        }
        jj_consume_token(jjtn000, 222);
        AssignmentExpression();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void AssignmentExpression() throws ParseException {
                               /*@bgen(jjtree) AssignmentExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_91(2147483647)) {
        UnaryExpression();
        AssignmentOperator();
        AssignmentExpression();
      } else if (jj_2_92(3)) {
        ConditionalExpression();
      } else {
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void AssignmentOperator() throws ParseException {
                             /*@bgen(jjtree) AssignmentOperator */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(jjtn000, ASSIGN);
        break;
      case STARASSIGN:
        jj_consume_token(jjtn000, STARASSIGN);
        break;
      case SLASHASSIGN:
        jj_consume_token(jjtn000, SLASHASSIGN);
        break;
      case REMASSIGN:
        jj_consume_token(jjtn000, REMASSIGN);
        break;
      case PLUSASSIGN:
        jj_consume_token(jjtn000, PLUSASSIGN);
        break;
      case MINUSASSIGN:
        jj_consume_token(jjtn000, MINUSASSIGN);
        break;
      case LSHIFTASSIGN:
        jj_consume_token(jjtn000, LSHIFTASSIGN);
        break;
      case RSIGNEDSHIFTASSIGN:
        jj_consume_token(jjtn000, RSIGNEDSHIFTASSIGN);
        break;
      case ANDASSIGN:
        jj_consume_token(jjtn000, ANDASSIGN);
        break;
      case XORASSIGN:
        jj_consume_token(jjtn000, XORASSIGN);
        break;
      case ORASSIGN:
        jj_consume_token(jjtn000, ORASSIGN);
        break;
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void ConditionalExpression() throws ParseException {
                                /*@bgen(jjtree) ConditionalExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogicalORExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HOOK:
        jj_consume_token(jjtn000, HOOK);
        Expression();
        jj_consume_token(jjtn000, COLON);
        ConditionalExpression();
        break;
      default:
        jj_la1[139] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ConstantExpression() throws ParseException {
                             /*@bgen(jjtree) ConstantExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTANTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalExpression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LogicalORExpression() throws ParseException {
                              /*@bgen(jjtree) LogicalORExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICALOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LogicalANDExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        jj_consume_token(jjtn000, SC_OR);
        if (jj_2_93(3)) {
          LogicalORExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LEFT_PAREN:
            NestedLogicalExpression();
            break;
          default:
            jj_la1[140] = jj_gen;
            jj_consume_token(jjtn000, -1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[141] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void LogicalANDExpression() throws ParseException {
                               /*@bgen(jjtree) LogicalANDExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICALANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      InclusiveORExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        jj_consume_token(jjtn000, SC_AND);
        if (jj_2_94(3)) {
          LogicalANDExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LEFT_PAREN:
            NestedLogicalExpression();
            break;
          default:
            jj_la1[142] = jj_gen;
            jj_consume_token(jjtn000, -1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[143] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void InclusiveORExpression() throws ParseException {
                                /*@bgen(jjtree) InclusiveORExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTINCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ExclusiveORExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        jj_consume_token(jjtn000, BIT_OR);
        InclusiveORExpression();
        break;
      default:
        jj_la1[144] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ExclusiveORExpression() throws ParseException {
                                /*@bgen(jjtree) ExclusiveORExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ANDExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        jj_consume_token(jjtn000, XOR);
        ExclusiveORExpression();
        break;
      default:
        jj_la1[145] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ANDExpression() throws ParseException {
                        /*@bgen(jjtree) ANDExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      EqualityExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        jj_consume_token(jjtn000, BIT_AND);
        ANDExpression();
        break;
      default:
        jj_la1[146] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void EqualityExpression() throws ParseException {
                             /*@bgen(jjtree) EqualityExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      RelationalExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          jj_consume_token(jjtn000, EQ);
          break;
        case NE:
          jj_consume_token(jjtn000, NE);
          break;
        default:
          jj_la1[147] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
        EqualityExpression();
        break;
      default:
        jj_la1[148] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void RelationalExpression() throws ParseException {
                               /*@bgen(jjtree) RelationalExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ShiftExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case GT:
      case LE:
      case GE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(jjtn000, LT);
          break;
        case GT:
          jj_consume_token(jjtn000, GT);
          break;
        case LE:
          jj_consume_token(jjtn000, LE);
          break;
        case GE:
          jj_consume_token(jjtn000, GE);
          break;
        default:
          jj_la1[149] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
        RelationalExpression();
        break;
      default:
        jj_la1[150] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ShiftExpression() throws ParseException {
                          /*@bgen(jjtree) ShiftExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTSHIFTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AdditiveExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
      case 224:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LSHIFT:
          jj_consume_token(jjtn000, LSHIFT);
          break;
        case 224:
          jj_consume_token(jjtn000, 224);
          break;
        default:
          jj_la1[151] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
        ShiftExpression();
        break;
      default:
        jj_la1[152] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void AdditiveExpression() throws ParseException {
                             /*@bgen(jjtree) AdditiveExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      MultiplicativeExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(jjtn000, PLUS);
          break;
        case MINUS:
          jj_consume_token(jjtn000, MINUS);
          break;
        default:
          jj_la1[153] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
        AdditiveExpression();
        break;
      default:
        jj_la1[154] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
                                   /*@bgen(jjtree) MultiplicativeExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CastExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          jj_consume_token(jjtn000, STAR);
          break;
        case SLASH:
          jj_consume_token(jjtn000, SLASH);
          break;
        case REM:
          jj_consume_token(jjtn000, REM);
          break;
        default:
          jj_la1[155] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
        MultiplicativeExpression();
        break;
      default:
        jj_la1[156] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CastExpression() throws ParseException {
                         /*@bgen(jjtree) CastExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_95(2147483647)) {
        jj_consume_token(jjtn000, LEFT_PAREN);
        TypeName();
        jj_consume_token(jjtn000, RIGHT_PAREN);
        CastExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
        case STAR:
        case BIT_AND:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case INTEGER_CONSTANT:
        case SIZEOF:
        case NIL:
        case LEFT_PAREN:
        case LEFT_SQUARE:
        case AT_PROTOCOL:
        case AT_ENCODE:
        case AT_SELECTOR:
        case POSSIBLE_COCOA_TYPE:
        case POSSIBLE_CORE_TYPE:
        case IDENT:
          UnaryExpression();
          break;
        default:
          jj_la1[157] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void UnaryExpression() throws ParseException {
                          /*@bgen(jjtree) UnaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_97(3)) {
        PostfixExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          jj_consume_token(jjtn000, INCR);
          UnaryExpression();
          break;
        case DECR:
          jj_consume_token(jjtn000, DECR);
          UnaryExpression();
          break;
        case BANG:
        case TILDE:
        case PLUS:
        case MINUS:
        case STAR:
        case BIT_AND:
          UnaryOperator();
          CastExpression();
          break;
        case SIZEOF:
          jj_consume_token(jjtn000, SIZEOF);
          if (jj_2_96(2147483647)) {
            UnaryExpression();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LEFT_PAREN:
              jj_consume_token(jjtn000, LEFT_PAREN);
              TypeName();
              jj_consume_token(jjtn000, RIGHT_PAREN);
              break;
            default:
              jj_la1[158] = jj_gen;
              jj_consume_token(jjtn000, -1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_la1[159] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void UnaryOperator() throws ParseException {
                        /*@bgen(jjtree) UnaryOperator */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARYOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        jj_consume_token(jjtn000, BIT_AND);
        break;
      case STAR:
        jj_consume_token(jjtn000, STAR);
        break;
      case PLUS:
        jj_consume_token(jjtn000, PLUS);
        break;
      case MINUS:
        jj_consume_token(jjtn000, MINUS);
        break;
      case TILDE:
        jj_consume_token(jjtn000, TILDE);
        break;
      case BANG:
        jj_consume_token(jjtn000, BANG);
        break;
      default:
        jj_la1[160] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void PostfixExpression() throws ParseException {
                            /*@bgen(jjtree) PostfixExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NIL:
        jj_consume_token(jjtn000, NIL);
        break;
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case INTEGER_CONSTANT:
      case LEFT_PAREN:
      case LEFT_SQUARE:
      case AT_PROTOCOL:
      case AT_ENCODE:
      case AT_SELECTOR:
      case POSSIBLE_COCOA_TYPE:
      case POSSIBLE_CORE_TYPE:
      case IDENT:
        PrimaryExpression();
        label_31:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INCR:
          case DECR:
          case LEFT_PAREN:
          case LEFT_SQUARE:
          case 225:
          case 226:
            ;
            break;
          default:
            jj_la1[161] = jj_gen;
            break label_31;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LEFT_SQUARE:
            jj_consume_token(jjtn000, LEFT_SQUARE);
            Expression();
            jj_consume_token(jjtn000, RIGHT_SQUARE);
            break;
          case LEFT_PAREN:
            jj_consume_token(jjtn000, LEFT_PAREN);
            if (jj_2_98(2147483647)) {
              ArgumentExpressionList();
            } else {
              ;
            }
            jj_consume_token(jjtn000, RIGHT_PAREN);
            break;
          case 225:
            jj_consume_token(jjtn000, 225);
            jj_consume_token(jjtn000, IDENT);
            break;
          case 226:
            jj_consume_token(jjtn000, 226);
            jj_consume_token(jjtn000, IDENT);
            break;
          case INCR:
            jj_consume_token(jjtn000, INCR);
            break;
          case DECR:
            jj_consume_token(jjtn000, DECR);
            break;
          default:
            jj_la1[162] = jj_gen;
            jj_consume_token(jjtn000, -1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[163] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void PrimaryExpression() throws ParseException {
                            /*@bgen(jjtree) PrimaryExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POSSIBLE_COCOA_TYPE:
      case POSSIBLE_CORE_TYPE:
      case IDENT:
        ObjCIDENT();
        break;
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case INTEGER_CONSTANT:
        Constant();
        break;
      case LEFT_PAREN:
        jj_consume_token(jjtn000, LEFT_PAREN);
        Expression();
        jj_consume_token(jjtn000, RIGHT_PAREN);
        break;
      case LEFT_SQUARE:
        MessageExpression();
        break;
      case AT_SELECTOR:
        SelectorExpression();
        break;
      case AT_PROTOCOL:
        ProtocolExpression();
        break;
      case AT_ENCODE:
        EncodeExpression();
        break;
      default:
        jj_la1[164] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void MessageExpression() throws ParseException {
                            /*@bgen(jjtree) MessageExpression */
  SimpleNode jjtn000 = new SimpleNode(JJTMESSAGEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(jjtn000, LEFT_SQUARE);
      Receiver();
      MessageSelector();
      jj_consume_token(jjtn000, RIGHT_SQUARE);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Receiver() throws ParseException {
                   /*@bgen(jjtree) Receiver */
  SimpleNode jjtn000 = new SimpleNode(JJTRECEIVER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_99(2)) {
        Expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOL:
        case ID:
        case SEL:
        case IMP:
        case CLASS:
          TypeDefedIDENT();
          break;
        default:
          jj_la1[165] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void TypeDefedIDENT() throws ParseException {
                         /*@bgen(jjtree) TypeDefedIDENT */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPEDEFEDIDENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOL:
        jj_consume_token(jjtn000, BOOL);
        break;
      case IMP:
        jj_consume_token(jjtn000, IMP);
        break;
      case SEL:
        jj_consume_token(jjtn000, SEL);
        break;
      case CLASS:
        jj_consume_token(jjtn000, CLASS);
        break;
      case ID:
        jj_consume_token(jjtn000, ID);
        break;
      default:
        jj_la1[166] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void MessageSelector() throws ParseException {
                          /*@bgen(jjtree) MessageSelector */
  SimpleNode jjtn000 = new SimpleNode(JJTMESSAGESELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_100(2)) {
        label_32:
        while (true) {
          KeywordArgument();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COLON:
          case IDENT:
            ;
            break;
          default:
            jj_la1[167] = jj_gen;
            break label_32;
          }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          jj_consume_token(jjtn000, IDENT);
          break;
        default:
          jj_la1[168] = jj_gen;
          jj_consume_token(jjtn000, -1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void KeywordArgument() throws ParseException {
                          /*@bgen(jjtree) KeywordArgument */
  SimpleNode jjtn000 = new SimpleNode(JJTKEYWORDARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_101(3)) {
        jj_consume_token(jjtn000, IDENT);
        jj_consume_token(jjtn000, COLON);
        Expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          jj_consume_token(jjtn000, IDENT);
          jj_consume_token(jjtn000, COLON);
          jj_consume_token(jjtn000, NIL);
          break;
        default:
          jj_la1[169] = jj_gen;
          if (jj_2_102(2)) {
            jj_consume_token(jjtn000, COLON);
            jj_consume_token(jjtn000, NIL);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COLON:
              jj_consume_token(jjtn000, COLON);
              Expression();
              break;
            default:
              jj_la1[170] = jj_gen;
              jj_consume_token(jjtn000, -1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void ArgumentExpressionList() throws ParseException {
                                 /*@bgen(jjtree) ArgumentExpressionList */
  SimpleNode jjtn000 = new SimpleNode(JJTARGUMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AssignmentExpression();
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 222:
          ;
          break;
        default:
          jj_la1[171] = jj_gen;
          break label_33;
        }
        jj_consume_token(jjtn000, 222);
        AssignmentExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Constant() throws ParseException {
                   /*@bgen(jjtree) Constant */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        jj_consume_token(jjtn000, INTEGER_LITERAL);
        break;
      case FLOATING_POINT_LITERAL:
        jj_consume_token(jjtn000, FLOATING_POINT_LITERAL);
        break;
      case CHARACTER_LITERAL:
        jj_consume_token(jjtn000, CHARACTER_LITERAL);
        break;
      case STRING_LITERAL:
        jj_consume_token(jjtn000, STRING_LITERAL);
        break;
      case INTEGER_CONSTANT:
        jj_consume_token(jjtn000, INTEGER_CONSTANT);
        break;
      default:
        jj_la1[172] = jj_gen;
        jj_consume_token(jjtn000, -1);
        throw new ParseException();
      }
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_3_28() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_scan_token(AT_SYNTHESIZE)) return true;
    return false;
  }

  private boolean jj_3R_205() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) return true;
    }
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_scan_token(AT_DYNAMIC)) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_3R_206()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_205()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_3R_287()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    }
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_3R_288()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(AT_PROPERTY)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_204()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_203()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(IBOUTLET)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_scan_token(AT_PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_207() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_scan_token(203)) {
    jj_scanpos = xsp;
    if (jj_scan_token(201)) {
    jj_scanpos = xsp;
    if (jj_scan_token(202)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_43()) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(POSSIBLE_CORE_TYPE)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_200()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_207()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(LEFT_BRACE)) return true;
    return false;
  }

  private boolean jj_3R_291() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(214)) {
    jj_scanpos = xsp;
    if (jj_scan_token(215)) {
    jj_scanpos = xsp;
    if (jj_scan_token(217)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_250()) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_scan_token(222)) return true;
    if (jj_3R_250()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(222)) return true;
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(POSSIBLE_COCOA_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(EXPORTED_CALLBACK)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_84()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_84()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_291()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_334()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_250()) return true;
    if (jj_scan_token(GT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_333()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_192()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_193()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_298() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(135)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_scan_token(226)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_scan_token(225)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(AT_CLASS)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(AT_PROTOCOL)) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_scan_token(NIL)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_101() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3_100() {
    Token xsp;
    if (jj_3R_108()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_108()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_98() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_scan_token(217)) return true;
    }
    return false;
  }

  private boolean jj_3R_195() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_101()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3_102()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_scan_token(AT_IMPLEMENTATION)) return true;
    return false;
  }

  private boolean jj_3R_263() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(176)) {
    jj_scanpos = xsp;
    if (jj_scan_token(175)) {
    jj_scanpos = xsp;
    if (jj_scan_token(177)) {
    jj_scanpos = xsp;
    if (jj_scan_token(174)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_scan_token(AT_INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(AT_IMPLEMENTATION)) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(AT_END)) return true;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_99()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) return true;
    }
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_302()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_scan_token(LEFT_SQUARE)) return true;
    if (jj_3R_107()) return true;
    if (jj_scan_token(RIGHT_SQUARE)) return true;
    return false;
  }

  private boolean jj_3R_239() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_283()) {
    jj_scanpos = xsp;
    if (jj_3R_284()) {
    jj_scanpos = xsp;
    if (jj_3R_285()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(184)) jj_scanpos = xsp;
    if (jj_scan_token(AT_INTERFACE)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_200()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(AT_INTERFACE)) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(AT_END)) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(LEFT_SQUARE)) return true;
    if (jj_3R_173()) return true;
    if (jj_3R_174()) return true;
    if (jj_scan_token(RIGHT_SQUARE)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_3R_301()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_3R_300()) return true;
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_3R_299()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_107()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_3R_298()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_96() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_238() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) {
    jj_scanpos = xsp;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_238()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_239()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(178)) {
    jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    }
    return false;
  }

  private boolean jj_3R_323() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    if (jj_3R_315()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_198()) return true;
    return false;
  }

  private boolean jj_3R_325() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    }
    if (jj_3R_322()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_197()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_95() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_231() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_316() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(224)) return true;
    }
    if (jj_3R_307()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_scan_token(SIZEOF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) return true;
    }
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_231()) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_97() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_97()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) return true;
    }
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_308() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    }
    }
    }
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_304() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    if (jj_3R_296()) return true;
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_3R_104()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_325()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_274()) return true;
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_3R_322()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_323()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_94() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_331() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_3R_315()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_316()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_235()) return true;
    return false;
  }

  private boolean jj_3_93() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(SC_AND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) return true;
    }
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_3R_307()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_3R_303()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_304()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_scan_token(SC_OR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_93()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) return true;
    }
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_3R_296()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_297()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_3R_274()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_275()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_107()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_235()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_236()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_186()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_102()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_scan_token(222)) return true;
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_scan_token(222)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_3R_98()) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_84() {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3_89() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_3R_98()) return true;
    if (jj_3R_99()) return true;
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3_92()) return true;
    }
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_295()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_192()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_194()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_230() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_270()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_3R_59()) return true;
    if (jj_scan_token(IDENT)) return true;
    if (jj_3R_74()) return true;
    if (jj_3R_238()) return true;
    return false;
  }

  private boolean jj_3R_328() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_329()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_330()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_331()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_332()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(222)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_90()) {
    jj_scanpos = xsp;
    if (jj_3R_328()) return true;
    }
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_107()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_107()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_229() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_267()) {
    jj_scanpos = xsp;
    if (jj_3R_268()) {
    jj_scanpos = xsp;
    if (jj_3R_269()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_86() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_320() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_83() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_88()) jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_3R_320()) return true;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_107()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_86()) jj_scanpos = xsp;
    if (jj_3R_107()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_3R_95()) return true;
    xsp = jj_scanpos;
    if (jj_3_87()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_228() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_265()) {
    jj_scanpos = xsp;
    if (jj_3R_266()) return true;
    }
    return false;
  }

  private boolean jj_3_85() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3_84()) return true;
    }
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    Token xsp;
    if (jj_3_85()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_77() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(LEFT_BRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_82()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_BRACE)) return true;
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_77()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3_81() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_264()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(186)) {
    jj_scanpos = xsp;
    if (jj_3R_327()) return true;
    }
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_80()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) jj_scanpos = xsp;
    if (jj_scan_token(IDENT)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_scan_token(186)) return true;
    }
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_159()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_259() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_294()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_230()) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_3R_229()) return true;
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_228()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_75()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_scan_token(LEFT_SQUARE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_309()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_SQUARE)) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_78()) {
    jj_scanpos = xsp;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_scan_token(LEFT_SQUARE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_317()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_SQUARE)) return true;
    return false;
  }

  private boolean jj_3R_305() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_310()) {
    jj_scanpos = xsp;
    if (jj_3R_311()) return true;
    }
    return false;
  }

  private boolean jj_3_76() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_224() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_305()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_71() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) jj_scanpos = xsp;
    if (jj_3R_224()) return true;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_scan_token(222)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    if (jj_3_73()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_73()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_321()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_130()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(222)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_scan_token(222)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(LEFT_BRACE)) return true;
    if (jj_3R_313()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(222)) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_BRACE)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(222)) return true;
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_scan_token(IDENT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_314()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_40()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) return true;
    }
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_70()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_3R_71()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_161()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_222()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    Token xsp;
    if (jj_3R_260()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_260()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_3R_293()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(STAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_257()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_84()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(LEFT_SQUARE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_256()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_SQUARE)) return true;
    return false;
  }

  private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_68() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_83()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3_68()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_158()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(174)) {
    jj_scanpos = xsp;
    if (jj_3R_211()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) jj_scanpos = xsp;
    if (jj_scan_token(BLOCK)) return true;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_161()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(222)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_319()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(LEFT_SQUARE)) return true;
    if (jj_3R_159()) return true;
    if (jj_scan_token(RIGHT_SQUARE)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(222)) return true;
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3_66()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_71()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_219()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    if (jj_scan_token(LEFT_BRACE)) return true;
    if (jj_3R_79()) return true;
    if (jj_scan_token(RIGHT_BRACE)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_155()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_156()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_scan_token(217)) return true;
    }
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_154()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_252()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_59()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_65()) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(LEFT_BRACE)) return true;
    if (jj_3R_152()) return true;
    if (jj_scan_token(RIGHT_BRACE)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    }
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3_61()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_130()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_scan_token(222)) return true;
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    jj_lookingAhead = true;
    jj_semLA = getToken(0).image.equals("in");
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_153()) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(179)) {
    jj_scanpos = xsp;
    if (jj_3_58()) return true;
    }
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_83()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_292()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_122()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_253()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_55()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    Token xsp;
    if (jj_3_57()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_255() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(151)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) return true;
    }
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(FIXED_NUM_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_255()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_scan_token(217)) return true;
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) return true;
    }
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_scan_token(174)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) return true;
    }
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(TYPEDEF)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_3R_217()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(POSSIBLE_CORE_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) return true;
    }
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(POSSIBLE_COCOA_TYPE)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    if (jj_scan_token(FIXED_NUM_TYPE)) return true;
    xsp = jj_scanpos;
    if (jj_3_51()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(172)) {
    jj_scanpos = xsp;
    if (jj_scan_token(174)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(209)) {
    jj_scanpos = xsp;
    if (jj_scan_token(211)) {
    jj_scanpos = xsp;
    if (jj_scan_token(213)) {
    jj_scanpos = xsp;
    if (jj_scan_token(210)) {
    jj_scanpos = xsp;
    if (jj_scan_token(212)) {
    jj_scanpos = xsp;
    if (jj_scan_token(175)) {
    jj_scanpos = xsp;
    if (jj_scan_token(177)) {
    jj_scanpos = xsp;
    if (jj_scan_token(176)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = isType(getToken(1).image);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_62()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_62()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_59()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_59()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    if (jj_3R_121()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_121()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_scan_token(AT_ENCODE)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_scan_token(AT_PROTOCOL)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_291()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(222)) return true;
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3R_326() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_324() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_326()) jj_scanpos = xsp;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_210()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_306() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3R_312()) return true;
    }
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_3R_324()) return true;
    return false;
  }

  private boolean jj_3R_312() {
    Token xsp;
    if (jj_3R_318()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_318()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_scan_token(AT_SELECTOR)) return true;
    if (jj_scan_token(LEFT_PAREN)) return true;
    if (jj_3R_306()) return true;
    if (jj_scan_token(RIGHT_PAREN)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(LEFT_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    return false;
  }

  private boolean jj_3_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(223)) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    if (jj_scan_token(COLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    if (jj_3_36()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_209()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_3R_289()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) return true;
    }
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_3R_290()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_49()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ObjCParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[173];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
      jj_la1_init_7();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x100000,0x8000,0x0,0x100000,0x8000,0x0,0x0,0x0,0x8000,0x8000,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x60000000,0x0,0x8000,0x0,0x0,0x100000,0x0,0x60000000,0x0,0x0,0x60000000,0x0,0x0,0x0,0x60000000,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x80000000,0x100000,0x100000,0x80000000,0x0,0x0,0x0,0x0,0x0,0xf8060000,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0xf8060000,0x80000000,0x80000000,0x80000000,0x80000000,0xf8060000,0x0,0x0,0xf8060000,0x0,0xf8060000,0x0,0x80000000,0x0,0x0,0x0,0x4000,0xf8060000,0x0,0x6200000,0xf8060000,0xf8060000,0xf8060000,0xf8060000,0x0,0x0,0xf8060000,0x0,0x0,0x4000,0x80000,0x0,0x2000000,0x0,0x4000000,0x0,0x0,0x0,0x1200000,0x1200000,0xc18000,0xc18000,0x0,0x0,0x60000000,0x60000000,0x80000000,0x80000000,0xf8060000,0x0,0xf8060000,0xe0060000,0x18000000,0x18000000,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x100000,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6880002,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6880002,0x0,0x0,0x0,0x0,0x6880002,0x0,0x0,0x6880002,0x0,0x6880002,0x0,0x0,0x0,0x6880000,0x0,0x0,0x6880002,0x0,0x8,0x6880002,0x6880002,0x6880002,0x6880002,0x0,0x0,0x6880002,0x0,0x0,0xffc0,0x0,0x0,0x0,0x0,0x0,0x4,0x8,0x2,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x11,0x11,0x6880002,0x0,0x2,0x2,0x0,0x0,0x6880000,0x6880000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6880000,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1404800,0x400,0x400,0x1404800,0x400,0x400,0x1404800,0x1404800,0x1404800,0x9e873100,0x0,0x2001000,0x2001000,0x2001000,0x0,0x0,0x400,0x0,0x0,0x80800000,0x0,0x0,0x0,0x0,0x400,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x80080,0x0,0x0,0x0,0x400,0x0,0x400,0x0,0x0,0x0,0x0,0x80080,0x0,0x0,0x0,0x0,0x80080,0x0,0x0,0x80080,0x0,0x60380280,0x8000,0x0,0x0,0x80,0x0,0x0,0x80080,0x100000,0x0,0x80080,0x80080,0x80080,0x90180,0x20000000,0x10100,0x80080,0x40200200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80080,0x0,0x80000,0x0,0x0,0x0,0x80,0x80,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x80,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x38000000,0x100000,0x0,0x0,0x0,0x1000000,0x0,0x0,0x1000000,0x1000000,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x2000,0x0,0x4000,0x4000000,0x0,0x0,0x0,0x0,0x100000,0x0,0x4000,0x0,0x0,0x0,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x100000,0x4000000,0x100000,0x4000000,0x0,0x0,0x0,0x0,0x100000,0x0,0x0,0x0,0x20,0x1,0x1,0x20,0x1,0x1,0x20,0x20,0x20,0x3d0d2,0x0,0x0,0x0,0x0,0x4000,0x0,0x1,0x1000000,0x0,0x0,0x0,0x0,0x80000,0x400000,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4040,0x0,0x0,0x500000,0x60540000,0x0,0x400000,0x100000,0x1,0x0,0x1,0x0,0x500000,0x0,0x0,0x61540000,0x500000,0x500000,0x0,0x500000,0x60540000,0x500000,0x500000,0x60540000,0x500000,0x65540f00,0x8,0x0,0x0,0x60540000,0x4000000,0x4000000,0x60540000,0x400,0x0,0x60540000,0x60540000,0x60540000,0x64540002,0xa00,0x2,0x60540000,0x100,0x0,0x0,0x0,0x100000,0x0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60540000,0x100000,0x0,0x0,0x500000,0x500000,0x60540000,0x60500000,0x3c000,0x3c000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x8,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c00000,0x0,0x0,0x2,0x40000000,0x0,0x40000000,0x2c00000,0x2c00000,0x2c00000,0x0,0xf00,0x0,0x0,0x0,0x0,0xf00,0x18000,0x18000,0x1000,0x0,0x0,0x0,0x40000000,0x0,0x2400000,0x0,0x0,0x0,0x6000,0x6000,0x40000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0xc0000000,0x2000000,0x2000000,0x2000000,0x0,0x2000000,0x2000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3e0000,0x2c00000,0x0,0x0,0x0,0x2c00000,0x0,0x0,0x2c00000,0x2000000,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x2c00000,0x2000000,0x40000000,0x2c00000,0x0,0x0,0x0,0x0,0x0,0x2c00000,0x2c00000,0x2c00000,0x2c00000,0x0,0x2c00001,0x2000000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x40000000,0x40000000,0x2c00001,0x0,0x0,0x0,0x0,0x2c00001,0x0,0x0,0x2c00001,0x0,0x2c00001,0x2000000,0x0,0x40000000,0x2c00001,0x40000000,0x0,0x2c00001,0x0,0x0,0x2c00001,0x2c00001,0x2c00001,0x2c00001,0x0,0x0,0x2c00001,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2c00001,0x0,0x0,0x0,0x0,0x0,0x2c00001,0x2c00001,0x0,0x0,0x2000000,0x2000000,0x2000000,0x0,0x40000000,0x0,};
   }
   private static void jj_la1_init_7() {
      jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6,0x6,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[102];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ObjCParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ObjCParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ObjCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 173; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 173; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ObjCParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ObjCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 173; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 173; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ObjCParser(ObjCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 173; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ObjCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 173; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(Node n, int kind) throws ParseException {
  n.setName(n.getName() + jj_nt.image);
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else {
    	token = token.next = token_source.getNextToken();
    }
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else {
    	token = token.next = token_source.getNextToken();
    }
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else {
    	  t = t.next = token_source.getNextToken();
      }
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null) {
    	return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    }
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[227];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 173; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 227; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 102; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
