package DepotParser;
/* Generated By:JJTree&JavaCC: Do not edit this line. ObjCParserTokenManager.java */
import java.io.*;
import java.util.*;

/** Token Manager. */
public class ObjCParserTokenManager implements ObjCParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x313fffffffc00bc0L) != 0L || (active2 & 0x5bbffa867fe00L) != 0L || (active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 217;
            return 213;
         }
         if ((active0 & 0x4c0000000200000L) != 0L || (active3 & 0x3c0000L) != 0L)
         {
            jjmatchedKind = 217;
            return 67;
         }
         if ((active2 & 0xf800000000000000L) != 0L || (active3 & 0x1ffffL) != 0L)
            return 46;
         if ((active1 & 0x2000000000000L) != 0L || (active3 & 0x200000000L) != 0L)
            return 31;
         if ((active2 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 217;
            return 114;
         }
         if ((active2 & 0x7980000L) != 0L)
         {
            jjmatchedKind = 217;
            return 61;
         }
         if ((active0 & 0x8000000001ff000L) != 0L || (active2 & 0x2000000000000L) != 0L || (active3 & 0x20000L) != 0L)
         {
            jjmatchedKind = 217;
            return 70;
         }
         if ((active2 & 0x440010000000L) != 0L)
         {
            jjmatchedKind = 217;
            return 209;
         }
         if ((active1 & 0x20100000400L) != 0L)
            return 24;
         if ((active3 & 0xc0000000L) != 0L)
            return 23;
         return -1;
      case 1:
         if ((active2 & 0x4c0000010000L) != 0L)
            return 213;
         if ((active0 & 0x480000000200000L) != 0L || (active3 & 0x3c0000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 214;
               jjmatchedPos = 1;
            }
            return 214;
         }
         if ((active0 & 0x80000000000f000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 215;
               jjmatchedPos = 1;
            }
            return 215;
         }
         if ((active2 & 0x10000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 217;
               jjmatchedPos = 1;
            }
            return 211;
         }
         if ((active0 & 0x317fffffffdf0bc0L) != 0L || (active2 & 0x7b3ffeffefe00L) != 0L || (active3 & 0x1020000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 217;
               jjmatchedPos = 1;
            }
            return 213;
         }
         return -1;
      case 2:
         if ((active2 & 0x5820000000000L) != 0L)
            return 213;
         if ((active0 & 0x480000000200000L) != 0L || (active3 & 0x3c0000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 2;
            return 214;
         }
         if ((active0 & 0x80000000000f000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 2;
            return 215;
         }
         if ((active0 & 0x317fffffffdf0bc0L) != 0L || (active2 & 0x231ffeffffe00L) != 0L || (active3 & 0x1020000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 2;
            return 213;
         }
         if ((active2 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 136;
            jjmatchedPos = 2;
            return 213;
         }
         return -1;
      case 3:
         if ((active0 & 0x317fffffffdf0bc0L) != 0L || (active2 & 0x23003fffdfe00L) != 0L || (active3 & 0x1020000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 3;
            return 213;
         }
         if ((active2 & 0x1fc00020000L) != 0L)
            return 213;
         if ((active0 & 0x80000000000f000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 3;
            return 215;
         }
         if ((active0 & 0x480000000200000L) != 0L || (active3 & 0x3c0000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 3;
            return 214;
         }
         return -1;
      case 4:
         if ((active2 & 0x20003e0000000L) != 0L)
            return 213;
         if ((active0 & 0x480000000200000L) != 0L || (active3 & 0x3c0000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 4;
            return 214;
         }
         if ((active0 & 0x80000000000f000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 4;
            return 215;
         }
         if ((active0 & 0x317fffffffdf0bc0L) != 0L || (active2 & 0x30001ffdfe00L) != 0L || (active3 & 0x1020000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 4;
            return 213;
         }
         return -1;
      case 5:
         if ((active3 & 0x180000L) != 0L)
            return 214;
         if ((active0 & 0x840L) != 0L || (active2 & 0xff90000L) != 0L)
            return 213;
         if ((active0 & 0x480000000200000L) != 0L || (active3 & 0x240000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 214;
               jjmatchedPos = 5;
            }
            return 214;
         }
         if ((active0 & 0x80000000000f000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 215;
               jjmatchedPos = 5;
            }
            return 215;
         }
         if ((active0 & 0x317fffffffdf0380L) != 0L || (active2 & 0x30001004fe00L) != 0L || (active3 & 0x1020000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 217;
               jjmatchedPos = 5;
            }
            return 213;
         }
         return -1;
      case 6:
         if ((active0 & 0x317fffffffdf0380L) != 0L || (active2 & 0x300000003e00L) != 0L || (active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 6;
            return 213;
         }
         if ((active2 & 0x1004c000L) != 0L || (active3 & 0x20000L) != 0L)
            return 213;
         if ((active0 & 0x480000000200000L) != 0L || (active3 & 0x240000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 6;
            return 214;
         }
         if ((active0 & 0x80000000000f000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 6;
            return 215;
         }
         return -1;
      case 7:
         if ((active0 & 0x80L) != 0L || (active2 & 0x300000003e00L) != 0L)
            return 213;
         if ((active0 & 0x480000000200000L) != 0L || (active3 & 0x240000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 214;
               jjmatchedPos = 7;
            }
            return 214;
         }
         if ((active0 & 0x80000000000f000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 215;
               jjmatchedPos = 7;
            }
            return 215;
         }
         if ((active0 & 0x317fffffffdf0300L) != 0L || (active3 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 217;
               jjmatchedPos = 7;
            }
            return 213;
         }
         return -1;
      case 8:
         if ((active0 & 0x200000L) != 0L || (active3 & 0x40000L) != 0L)
            return 214;
         if ((active0 & 0x40000000070000L) != 0L)
            return 213;
         if ((active0 & 0x80000000000c000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 215;
               jjmatchedPos = 8;
            }
            return 215;
         }
         if ((active0 & 0x313fffffffd80300L) != 0L || (active3 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 217;
               jjmatchedPos = 8;
            }
            return 213;
         }
         if ((active0 & 0x480000000000000L) != 0L || (active3 & 0x200000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 214;
               jjmatchedPos = 8;
            }
            return 214;
         }
         if ((active0 & 0x3000L) != 0L)
            return 215;
         return -1;
      case 9:
         if ((active0 & 0x313fffffffdb0300L) != 0L || (active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 9;
            return 213;
         }
         if ((active3 & 0x200000L) != 0L)
            return 214;
         if ((active0 & 0x480000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 9;
            return 214;
         }
         if ((active0 & 0x80000000000c000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 9;
            return 215;
         }
         return -1;
      case 10:
         if ((active0 & 0x80000000000c000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 10;
            return 215;
         }
         if ((active0 & 0x480000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 10;
            return 214;
         }
         if ((active0 & 0x313fffffffdb0300L) != 0L || (active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 10;
            return 213;
         }
         return -1;
      case 11:
         if ((active0 & 0x80000000000c000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 11;
            return 215;
         }
         if ((active0 & 0x313fffffffdb0300L) != 0L || (active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 11;
            return 213;
         }
         if ((active0 & 0x480000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 11;
            return 214;
         }
         return -1;
      case 12:
         if ((active0 & 0x313fffffff930200L) != 0L || (active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 12;
            return 213;
         }
         if ((active0 & 0x480100L) != 0L)
            return 213;
         if ((active0 & 0x80000000000c000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 12;
            return 215;
         }
         if ((active0 & 0x480000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 12;
            return 214;
         }
         return -1;
      case 13:
         if ((active0 & 0x80000000000c000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 13;
            return 215;
         }
         if ((active0 & 0x480000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 13;
            return 214;
         }
         if ((active0 & 0x313fffffff930200L) != 0L || (active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 13;
            return 213;
         }
         return -1;
      case 14:
         if ((active0 & 0x120000L) != 0L)
            return 213;
         if ((active0 & 0x800000000004000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 14;
            return 215;
         }
         if ((active0 & 0x313fffffff810200L) != 0L || (active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 14;
            return 213;
         }
         if ((active0 & 0x480000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 14;
            return 214;
         }
         if ((active0 & 0x8000L) != 0L)
            return 215;
         return -1;
      case 15:
         if ((active0 & 0x313fffffff810200L) != 0L || (active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 15;
            return 213;
         }
         if ((active0 & 0x800000000004000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 15;
            return 215;
         }
         if ((active0 & 0x480000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 15;
            return 214;
         }
         return -1;
      case 16:
         if ((active0 & 0x810000L) != 0L || (active3 & 0x1000000L) != 0L)
            return 213;
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 16;
            return 215;
         }
         if ((active0 & 0x313fffffff000200L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 16;
            return 213;
         }
         if ((active0 & 0x480000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 16;
            return 214;
         }
         if ((active0 & 0x4000L) != 0L)
            return 215;
         return -1;
      case 17:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 17;
            return 214;
         }
         if ((active0 & 0x400000000000000L) != 0L)
            return 214;
         if ((active0 & 0x200L) != 0L)
            return 213;
         if ((active0 & 0x313fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 17;
            return 213;
         }
         if ((active0 & 0x800000000000000L) != 0L)
            return 215;
         return -1;
      case 18:
         if ((active0 & 0x313fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 18;
            return 213;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 18;
            return 214;
         }
         return -1;
      case 19:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 19;
            return 214;
         }
         if ((active0 & 0x313fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 19;
            return 213;
         }
         return -1;
      case 20:
         if ((active0 & 0x100000000000000L) != 0L)
            return 213;
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 20;
            return 214;
         }
         if ((active0 & 0x303fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 20;
            return 213;
         }
         return -1;
      case 21:
         if ((active0 & 0x303fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 21;
            return 213;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 21;
            return 214;
         }
         return -1;
      case 22:
         if ((active0 & 0x303fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 22;
            return 213;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 22;
            return 214;
         }
         return -1;
      case 23:
         if ((active0 & 0x1000000000000000L) != 0L)
            return 213;
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 23;
            return 214;
         }
         if ((active0 & 0x203fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 23;
            return 213;
         }
         return -1;
      case 24:
         if ((active0 & 0x203fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 24;
            return 213;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 24;
            return 214;
         }
         return -1;
      case 25:
         if ((active0 & 0x203fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 25;
            return 213;
         }
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 25;
            return 214;
         }
         return -1;
      case 26:
         if ((active0 & 0x80000000000000L) != 0L)
            return 214;
         if ((active0 & 0x203fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 26;
            return 213;
         }
         return -1;
      case 27:
         if ((active0 & 0x203fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 27;
            return 213;
         }
         return -1;
      case 28:
         if ((active0 & 0x3fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 28;
            return 213;
         }
         if ((active0 & 0x2000000000000000L) != 0L)
            return 213;
         return -1;
      case 29:
         if ((active0 & 0x3fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 29;
            return 213;
         }
         return -1;
      case 30:
         if ((active0 & 0x20000000000000L) != 0L)
            return 213;
         if ((active0 & 0x1fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 30;
            return 213;
         }
         return -1;
      case 31:
         if ((active0 & 0x1fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 31;
            return 213;
         }
         return -1;
      case 32:
         if ((active0 & 0x1fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 32;
            return 213;
         }
         return -1;
      case 33:
         if ((active0 & 0x1fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 33;
            return 213;
         }
         return -1;
      case 34:
         if ((active0 & 0x1fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 34;
            return 213;
         }
         return -1;
      case 35:
         if ((active0 & 0x1fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 35;
            return 213;
         }
         return -1;
      case 36:
         if ((active0 & 0x1fffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 36;
            return 213;
         }
         return -1;
      case 37:
         if ((active0 & 0xc000000000000L) != 0L)
            return 213;
         if ((active0 & 0x13ffffff000000L) != 0L)
         {
            if (jjmatchedPos != 37)
            {
               jjmatchedKind = 217;
               jjmatchedPos = 37;
            }
            return 213;
         }
         return -1;
      case 38:
         if ((active0 & 0x1bffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 38;
            return 213;
         }
         return -1;
      case 39:
         if ((active0 & 0x1bffffff000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 39;
            return 213;
         }
         return -1;
      case 40:
         if ((active0 & 0x10ffff80000000L) != 0L)
            return 213;
         if ((active0 & 0xb00007f000000L) != 0L)
         {
            if (jjmatchedPos != 40)
            {
               jjmatchedKind = 217;
               jjmatchedPos = 40;
            }
            return 213;
         }
         return -1;
      case 41:
         if ((active0 & 0x1bffc07f000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 41;
            return 213;
         }
         return -1;
      case 42:
         if ((active0 & 0x1bffc07f000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 42;
            return 213;
         }
         return -1;
      case 43:
         if ((active0 & 0x1bffc07f000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 43;
            return 213;
         }
         return -1;
      case 44:
         if ((active0 & 0x1bffc000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 44;
            return 213;
         }
         if ((active0 & 0x7f000000L) != 0L)
            return 213;
         return -1;
      case 45:
         if ((active0 & 0x1bffc000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 45;
            return 213;
         }
         return -1;
      case 46:
         if ((active0 & 0x1bffc000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 46;
            return 213;
         }
         return -1;
      case 47:
         if ((active0 & 0x1bffc000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 47;
            return 213;
         }
         return -1;
      case 48:
         if ((active0 & 0x1bffc000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 48;
            return 213;
         }
         return -1;
      case 49:
         if ((active0 & 0x1bffc000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 49;
            return 213;
         }
         return -1;
      case 50:
         if ((active0 & 0x1bffc000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 50;
            return 213;
         }
         return -1;
      case 51:
         if ((active0 & 0x1bffc000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 51;
            return 213;
         }
         return -1;
      case 52:
         if ((active0 & 0x8000000000000L) != 0L)
            return 213;
         if ((active0 & 0x13ffc000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 52;
            return 213;
         }
         return -1;
      case 53:
         if ((active0 & 0x13ffc000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 53;
            return 213;
         }
         return -1;
      case 54:
         if ((active0 & 0x13ffc000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 54;
            return 213;
         }
         return -1;
      case 55:
         if ((active0 & 0x10004000000000L) != 0L)
            return 213;
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 55;
            return 213;
         }
         return -1;
      case 56:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 56;
            return 213;
         }
         return -1;
      case 57:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 57;
            return 213;
         }
         return -1;
      case 58:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 58;
            return 213;
         }
         return -1;
      case 59:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 59;
            return 213;
         }
         return -1;
      case 60:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 60;
            return 213;
         }
         return -1;
      case 61:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 61;
            return 213;
         }
         return -1;
      case 62:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 62;
            return 213;
         }
         return -1;
      case 63:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 63;
            return 213;
         }
         return -1;
      case 64:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 64;
            return 213;
         }
         return -1;
      case 65:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 65;
            return 213;
         }
         return -1;
      case 66:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 66;
            return 213;
         }
         return -1;
      case 67:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 67;
            return 213;
         }
         return -1;
      case 68:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 68;
            return 213;
         }
         return -1;
      case 69:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 69;
            return 213;
         }
         return -1;
      case 70:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 70;
            return 213;
         }
         return -1;
      case 71:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 71;
            return 213;
         }
         return -1;
      case 72:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 72;
            return 213;
         }
         return -1;
      case 73:
         if ((active0 & 0x3ff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 73;
            return 213;
         }
         return -1;
      case 74:
         if ((active0 & 0x3000000000000L) != 0L)
            return 213;
         if ((active0 & 0xff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 74;
            return 213;
         }
         return -1;
      case 75:
         if ((active0 & 0xff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 75;
            return 213;
         }
         return -1;
      case 76:
         if ((active0 & 0xff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 76;
            return 213;
         }
         return -1;
      case 77:
         if ((active0 & 0xff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 77;
            return 213;
         }
         return -1;
      case 78:
         if ((active0 & 0xff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 78;
            return 213;
         }
         return -1;
      case 79:
         if ((active0 & 0xff8000000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 79;
            return 213;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L, 0x0L, 0x0L);
      case 35:
         return jjStopAtPos(0, 10);
      case 37:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L, 0x0L, 0x0L);
      case 38:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40004000000L, 0x0L, 0x0L);
      case 40:
         jjmatchedKind = 180;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L, 0x20000000L);
      case 41:
         return jjStopAtPos(0, 181);
      case 42:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4008000000L, 0x0L, 0x0L);
      case 44:
         jjmatchedKind = 222;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x80000000L);
      case 45:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8010000000L, 0x0L, 0x400000000L);
      case 46:
         jjmatchedKind = 225;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000L, 0x0L, 0x0L);
      case 47:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000400L, 0x0L, 0x0L);
      case 58:
         return jjStopAtPos(0, 84);
      case 59:
         return jjStopAtPos(0, 186);
      case 60:
         jjmatchedKind = 79;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x402000400000L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000800000L, 0x0L, 0x100000000L);
      case 63:
         return jjStopAtPos(0, 83);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xf800000000000000L, 0x1ffffL);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x3fffff80400000L, 0x0L, 0x0L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x60000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x8000000001ff000L, 0x0L, 0x2000000000000L, 0x20000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x7f000000L, 0x0L, 0x0L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L, 0x0L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1300000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x4c0000000200000L, 0x0L, 0x0L, 0x3c0000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800008000000L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L, 0x0L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 182);
      case 93:
         return jjStopAtPos(0, 183);
      case 94:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L, 0x0L, 0x0L);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x10000000000003c0L, 0x0L, 0x0L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8900000200L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000018000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L, 0x1400400000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20200000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x440010000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200800L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7980000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80003000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000400L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 184);
      case 124:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80002000000L, 0x0L, 0x0L);
      case 125:
         return jjStopAtPos(0, 185);
      case 126:
         return jjStopAtPos(0, 82);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         break;
      case 42:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 43:
         if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 91);
         break;
      case 45:
         if ((active1 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 92);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0x80000000L);
      case 60:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000L, active2, 0L, active3, 0L);
      case 61:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         break;
      case 62:
         if ((active3 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 226);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1800000000000L, active2, 0L, active3, 0L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0xf0000L, active1, 0L, active2, 0L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x300000000000L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000007f000000L, active1, 0L, active2, 0x800000000000L, active3, 0L);
      case 70:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000f000L, active1, 0L, active2, 0L, active3, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1000000000000L, active3, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x900000L, active1, 0L, active2, 0x20000L, active3, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000400000L, active1, 0L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x480000000200000L, active1, 0L, active2, 0L, active3, 0x3c0000L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x3fffff80000000L, active1, 0L, active2, 0L, active3, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000L);
      case 94:
         if ((active3 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 221);
         break;
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000003c0L, active1, 0L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x48L);
      case 100:
         if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 174, 213);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4004L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4000000000208800L, active3, 0x2L);
      case 102:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 170, 213);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8020000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1804000006080000L, active3, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000600000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1090003000L, active3, 0L);
      case 111:
         if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x34100050600L, active3, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L, active3, 0x1f00L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0x10000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0x2001L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1800000L, active3, 0x30L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000000000L, active3, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0L, active2, 0x400000L, active3, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0L);
      case 124:
         if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(2, 113);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000000L);
      case 61:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 110);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(2, 111);
         break;
      case 62:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000000L, active2, 0L, active3, 0L);
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x13fffff80000000L, active1, 0L, active2, 0x100000000000L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40000L);
      case 76:
         if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 175, 213);
         break;
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000000L, active1, 0L, active2, 0x200000020000L, active3, 0L);
      case 80:
         if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 176, 213);
         return jjMoveStringLiteralDfa3_0(active0, 0x7f400000L, active1, 0L, active2, 0L, active3, 0x1000000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L, active2, 0L, active3, 0x80000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x100000L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L, active2, 0L, active3, 0x200000L);
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0xcc00000002ff000L, active1, 0L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0L, active2, 0x2008001000000L, active3, 0x240L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000000L, active3, 0x10005L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8000L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x6000800L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40a0100000L, active3, 0x80L);
      case 108:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 178, 213);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0x8L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x5000000108000200L, active3, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000200L, active1, 0L, active2, 0x200040000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0x8000L);
      case 114:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 169, 213);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2000000000800000L, active3, 0x1910L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L, active1, 0L, active2, 0xc00003000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L, active2, 0x12010600000L, active3, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000010000L, active3, 0x400L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L, active1, 0L, active2, 0L, active3, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0x6000L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3);
      return 3;
   }
   switch(curChar)
   {
      case 46:
         if ((active3 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 223);
         break;
      case 51:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x10000000L, active3, 0L);
      case 61:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(3, 112);
         break;
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L, active1, 0L, active2, 0L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x17d000L, active1, 0L, active2, 0L, active3, 0L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x3fffff80202000L, active1, 0L, active2, 0L, active3, 0x200000L);
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000400000L, active1, 0L, active2, 0L, active3, 0L);
      case 76:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 145, 213);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000007f000000L, active1, 0L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 86:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x240008400L, active3, 0x8L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L, active1, 0L, active2, 0x10000L, active3, 0x400L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x4000100000000000L, active3, 0x200L);
      case 100:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 166, 213);
         else if ((active3 & 0x2L) != 0L)
            return jjStopAtPos(3, 193);
         break;
      case 101:
         if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 162, 213);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 163, 213);
         return jjMoveStringLiteralDfa4_0(active0, 0x840L, active1, 0L, active2, 0x484000L, active3, 0x80000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L, active2, 0x3800L, active3, 0x100100L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20040000L, active3, 0x20001L);
      case 109:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 164, 213);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8000000006000000L, active3, 0x46080L);
      case 111:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 165, 213);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 168, 213);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000000080000000L, active3, 0x1800L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x800000000000000L, active3, 0L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x10000L);
      case 114:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 167, 213);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x20L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2000100000000L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x180L, active1, 0L, active2, 0x1000000009100200L, active3, 0x8040L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x200000a00000L, active3, 0L);
      case 121:
         if ((active3 & 0x10L) != 0L)
            return jjStopAtPos(3, 196);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2, active3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L, active2, active3);
      return 4;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0x10000000L, active3, 0L);
      case 51:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0x8000000L, active3, 0L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active2, 0L, active3, 0L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x900000L, active2, 0L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000007f080000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000400000L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x3fffff80000000L, active2, 0L, active3, 0L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x202000L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0xc40000000000000L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0L, active3, 0x1000000L);
      case 88:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000007d000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L, active2, 0L, active3, 0x4080L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0x8000000000900000L, active3, 0x80040L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active2, 0x4000L, active3, 0L);
      case 101:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 157, 213);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0x1000000006040000L, active3, 0x1L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0x3000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0x1000200L, active3, 0x8000L);
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active2, 0L, active3, 0L);
      case 107:
         if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 158, 213);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0L, active3, 0x200L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0x800000000010000L, active3, 0x400L);
      case 110:
         if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 159, 213);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0L, active3, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0x4000000000080000L, active3, 0x20020L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0L, active3, 0x1000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x880L, active2, 0x600000L, active3, 0L);
      case 115:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 177, 213);
         else if ((active3 & 0x4L) != 0L)
            return jjStopAtPos(4, 194);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0x800L, active3, 0x8L);
      case 116:
         if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 160, 213);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 161, 213);
         return jjMoveStringLiteralDfa5_0(active0, 0x100L, active2, 0x2000300000000400L, active3, 0x42800L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0x8000L, active3, 0x10000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0L, active3, 0x100L);
      case 122:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active2, 0L, active3, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(3, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L, active2, active3);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active2, 0L, active3, 0L);
      case 50:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 155, 213);
         break;
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x7fffff80900000L, active2, 0L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x7f000000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x202000L, active2, 0L, active3, 0L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x81000L, active2, 0L, active3, 0L);
      case 81:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000000000000L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000047c000L, active2, 0L, active3, 0x1000000L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active2, 0x10000000L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active2, 0x40000L, active3, 0x20300L);
      case 99:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 152, 213);
         return jjMoveStringLiteralDfa6_0(active0, 0x200L, active2, 0L, active3, 0x1L);
      case 100:
         if ((active2 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 153;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active2, 0x4000000004000000L, active3, 0L);
      case 101:
         if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 144, 213);
         else if ((active3 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 212, 214);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active2, 0x800000000004000L, active3, 0x41800L);
      case 102:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 147, 213);
         break;
      case 104:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 148, 213);
         else if ((active3 & 0x40L) != 0L)
            return jjStopAtPos(5, 198);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active2, 0x8000000000000000L, active3, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active2, 0x100000000400L, active3, 0x10400L);
      case 107:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 6, 213);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active2, 0x200000008000L, active3, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active2, 0L, active3, 0x4000L);
      case 110:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 149, 213);
         else if ((active2 & 0x400000L) != 0L)
         {
            jjmatchedKind = 150;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x800L, active2, 0x3200L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L, active2, 0x2000000000000000L, active3, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L, active2, 0x1000000000000000L, active3, 0L);
      case 115:
         if ((active3 & 0x8L) != 0L)
            return jjStopAtPos(5, 195);
         break;
      case 116:
         if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 151, 213);
         else if ((active3 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 211, 214);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active2, 0x800L, active3, 0x200000L);
      case 119:
         if ((active3 & 0x20L) != 0L)
            return jjStopAtPos(5, 197);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(4, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L, active2, active3);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active2, 0x4000000L, active3, 0L);
      case 40:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active2, 0L, active3, 0L);
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000007f000000L, active2, 0L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x3fffff80000000L, active2, 0L, active3, 0L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active2, 0L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x7c000L, active2, 0L, active3, 0x1000000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x202000L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L, active2, 0L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0xc00000000000000L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x900000L, active2, 0L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active2, 0L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000400200L, active2, 0L, active3, 0L);
      case 99:
         if ((active3 & 0x400L) != 0L)
            return jjStopAtPos(6, 202);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active2, 0x2000000000000000L, active3, 0x800L);
      case 101:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(6, 190);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active2, 0x200000003800L, active3, 0x202000L);
      case 102:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 142, 213);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active2, 0L, active3, 0x40200L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L, active2, 0L, active3, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active2, 0x400L, active3, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active2, 0x800000000000000L, active3, 0L);
      case 110:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 146, 213);
         return jjMoveStringLiteralDfa7_0(active0, 0x80L, active2, 0L, active3, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active2, 0x100000000000L, active3, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active2, 0x8000000000000000L, active3, 0x11000L);
      case 116:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 143, 213);
         else if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 156, 213);
         else if ((active3 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 209, 213);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active2, 0L, active3, 0x101L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active2, 0x200L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(5, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L, active2, active3);
      return 7;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L, active2, 0L, active3, 0L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0xd00000000100000L, active2, 0L, active3, 0L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active2, 0L, active3, 0x1000000L);
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x480000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000800000L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x3fffff80000000L, active2, 0L, active3, 0L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x202000L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x7d000L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x7f000000L, active2, 0L, active3, 0L);
      case 86:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000000L, active2, 0L, active3, 0L);
      case 94:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0x1000000000000000L, active3, 0x8000L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L, active2, 0L, active3, 0L);
      case 99:
         if ((active3 & 0x4000L) != 0L)
            return jjStopAtPos(7, 206);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0x4000000L, active3, 0L);
      case 100:
         if ((active2 & 0x1000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0x2000L, active3, 0L);
      case 101:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 137, 213);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 138, 213);
         else if ((active3 & 0x100L) != 0L)
            return jjStopAtPos(7, 200);
         else if ((active3 & 0x200L) != 0L)
            return jjStopAtPos(7, 201);
         return jjMoveStringLiteralDfa8_0(active0, 0x200L, active2, 0x800000000000000L, active3, 0x50000L);
      case 103:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 7, 213);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0L, active3, 0x200000L);
      case 110:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 172, 213);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0xa000000000000000L, active3, 0x1L);
      case 114:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 139, 213);
         break;
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0L, active3, 0x2000L);
      case 116:
         if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 173, 213);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active2, 0L, active3, 0x1800L);
      case 121:
         if ((active3 & 0x80L) != 0L)
            return jjStopAtPos(7, 199);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(6, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L, active2, active3);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active2, 0x2000L, active3, 0L);
      case 41:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(8, 62);
         break;
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000000L, active2, 0L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa9_0(active0, 0x2100000000000000L, active2, 0L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x80800L, active2, 0L, active3, 0L);
      case 69:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 13, 215);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 21, 214);
         return jjMoveStringLiteralDfa9_0(active0, 0x3fffffff000000L, active2, 0L, active3, 0L);
      case 78:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x3c000L, active2, 0L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000000L, active2, 0L, active3, 0L);
      case 83:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 54, 213);
         break;
      case 84:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 12, 215);
         return jjMoveStringLiteralDfa9_0(active0, 0xc00000000000000L, active2, 0L, active3, 0L);
      case 88:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L, active2, 0L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L, active2, 0L, active3, 0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active2, 0x1000000000000000L, active3, 0L);
      case 100:
         if ((active3 & 0x10000L) != 0L)
            return jjStopAtPos(8, 208);
         break;
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active2, 0L, active3, 0x200800L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active2, 0x4000000L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active2, 0L, active3, 0x2000L);
      case 108:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(8, 189);
         else if ((active3 & 0x8000L) != 0L)
            return jjStopAtPos(8, 207);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active2, 0x8800000000000000L, active3, 0L);
      case 114:
         if ((active3 & 0x1L) != 0L)
            return jjStopAtPos(8, 192);
         else if ((active3 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(8, 210, 214);
         break;
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L, active2, 0L, active3, 0L);
      case 120:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L, active2, 0L, active3, 0L);
      case 121:
         if ((active3 & 0x1000L) != 0L)
            return jjStopAtPos(8, 204);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(7, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L, active2, active3);
      return 9;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L, active2, 0L, active3, 0L);
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L, active2, 0L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0L, active3, 0x1000000L);
      case 68:
         return jjMoveStringLiteralDfa10_0(active0, 0x7f000000L, active2, 0L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000100000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000000L, active2, 0L, active3, 0L);
      case 74:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000000L, active2, 0L, active3, 0L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L, active2, 0L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0xc3fffff8003c000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0x4000000L, active3, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x200L, active2, 0x2000L, active3, 0L);
      case 100:
         if ((active3 & 0x800L) != 0L)
            return jjStopAtPos(9, 203);
         break;
      case 101:
         if ((active2 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(9, 188);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0x8000000000000000L, active3, 0L);
      case 114:
         if ((active3 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 213, 214);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x100L, active2, 0x800000000000000L, active3, 0L);
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active2, 0L, active3, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(8, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L, active2, active3);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L, active2, 0L, active3, 0L);
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000000L, active2, 0L, active3, 0x1000000L);
      case 67:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000003c000L, active2, 0L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000400000L, active2, 0L, active3, 0L);
      case 70:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000000L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000000L, active2, 0L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa11_0(active0, 0x10ffff80000000L, active2, 0L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000000L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000L, active2, 0L, active3, 0L);
      case 87:
         return jjMoveStringLiteralDfa11_0(active0, 0xf000000000000L, active2, 0L, active3, 0L);
      case 88:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000L, active2, 0L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x7f800000L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x800000000000000L, active3, 0L);
      case 101:
         if ((active3 & 0x2000L) != 0L)
            return jjStopAtPos(10, 205);
         return jjMoveStringLiteralDfa11_0(active0, 0x300L, active2, 0L, active3, 0L);
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x2000L, active3, 0L);
      case 114:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(10, 154);
         break;
      case 122:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active2, 0x8000000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(9, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L, active2, active3);
      return 11;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x1010ffff80000000L, active2, 0L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0xf000000880000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x7f000000L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0L, active3, 0x1000000L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000000L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000400000L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000L, active2, 0L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000000L, active2, 0L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0x218000000003c100L, active2, 0L, active3, 0L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x2000L, active3, 0L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x8000000000000000L, active3, 0L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x200L, active2, 0L, active3, 0L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active2, 0x800000000000000L, active3, 0L);
      case 123:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(11, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(10, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L, active2, active3);
      return 12;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000000L, active2, 0L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa13_0(active0, 0x100f000000014000L, active2, 0L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa13_0(active0, 0x10ffff80000000L, active2, 0L, active3, 0L);
      case 68:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(12, 19, 213);
         break;
      case 69:
         return jjMoveStringLiteralDfa13_0(active0, 0x128000L, active2, 0L, active3, 0L);
      case 71:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000000L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0L, active3, 0x1000000L);
      case 77:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000000L, active2, 0L, active3, 0L);
      case 78:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(12, 22, 213);
         return jjMoveStringLiteralDfa13_0(active0, 0x48000007f000000L, active2, 0L, active3, 0L);
      case 88:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000L, active2, 0L, active3, 0L);
      case 95:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(12, 8, 213);
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000000L, active2, 0L, active3, 0L);
      case 100:
         if ((active2 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(12, 191);
         break;
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active2, 0x800000000000000L, active3, 0L);
      case 114:
         if ((active2 & 0x2000L) != 0L)
            return jjStopAtPos(12, 141);
         break;
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x200L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(11, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L, active2, active3);
      return 13;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0L, active3, 0x1000000L);
      case 67:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000000L, active2, 0L, active3, 0L);
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000014000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000000L, active2, 0L, active3, 0L);
      case 75:
         return jjMoveStringLiteralDfa14_0(active0, 0xf000000000000L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000000L, active2, 0L, active3, 0L);
      case 78:
         return jjMoveStringLiteralDfa14_0(active0, 0x28000L, active2, 0L, active3, 0L);
      case 80:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000L, active2, 0L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000000L, active2, 0L, active3, 0L);
      case 85:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000000L, active2, 0L, active3, 0L);
      case 87:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000000L, active2, 0L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa14_0(active0, 0x10ffffff000000L, active2, 0L, active3, 0L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x200L, active2, 0L, active3, 0L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active2, 0x800000000000000L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(12, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L, active2, active3);
      return 14;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active2, 0L, active3, 0x1000000L);
      case 68:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(14, 15, 215);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(14, 17, 213);
         break;
      case 69:
         return jjMoveStringLiteralDfa15_0(active0, 0x1020000000000000L, active2, 0L, active3, 0L);
      case 71:
         return jjMoveStringLiteralDfa15_0(active0, 0x14000L, active2, 0L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa15_0(active0, 0xf000000000000L, active2, 0L, active3, 0L);
      case 76:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000000L, active2, 0L, active3, 0L);
      case 77:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000007f000000L, active2, 0L, active3, 0L);
      case 78:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(14, 20, 213);
         break;
      case 79:
         return jjMoveStringLiteralDfa15_0(active0, 0x10ffff80800000L, active2, 0L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa15_0(active0, 0x2500000000000000L, active2, 0L, active3, 0L);
      case 110:
         if ((active2 & 0x800000000000000L) != 0L)
            return jjStopAtPos(14, 187);
         break;
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x200L, active2, 0L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L, active2, active3);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old2, long active2, long old3, long active3)
{
   if (((active0 &= old0) | (active2 &= old2) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(13, old0, 0L, old2, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L, 0L, active3);
      return 15;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa16_0(active0, 0x7f000000L, active3, 0L);
      case 66:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000000000L, active3, 0L);
      case 67:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active3, 0x1000000L);
      case 69:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000000000L, active3, 0L);
      case 72:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000000L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000014000L, active3, 0L);
      case 82:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000000800000L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa16_0(active0, 0x10ffff80000000L, active3, 0L);
      case 84:
         return jjMoveStringLiteralDfa16_0(active0, 0xf000000000000L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa16_0(active0, 0x1080000000000000L, active3, 0L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x200L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old3, long active3)
{
   if (((active0 &= old0) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(14, old0, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L, 0L, active3);
      return 16;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa17_0(active0, 0x7f000000L, active3, 0L);
      case 73:
         return jjMoveStringLiteralDfa17_0(active0, 0x100000000000000L, active3, 0L);
      case 75:
         if ((active3 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(16, 216, 213);
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000000000L, active3, 0L);
      case 78:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(16, 14, 215);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(16, 16, 213);
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000000L, active3, 0L);
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0x2400000000000000L, active3, 0L);
      case 83:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000000000L, active3, 0L);
      case 84:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(16, 23, 213);
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000000000L, active3, 0L);
      case 95:
         return jjMoveStringLiteralDfa17_0(active0, 0x1fffff80000200L, active3, 0L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L, 0L, active3);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old3, long active3)
{
   if (((active0 &= old0) | (active3 &= old3)) == 0L)
      return jjStartNfa_0(15, old0, 0L, 0L, old3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L, 0L, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa18_0(active0, 0x100000000000000L);
      case 68:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000000000L);
      case 69:
         return jjMoveStringLiteralDfa18_0(active0, 0x80000000000000L);
      case 73:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000000000000L);
      case 78:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 58, 214);
         break;
      case 84:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 59, 215);
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000000000L);
      case 86:
         return jjMoveStringLiteralDfa18_0(active0, 0xf000000000000L);
      case 88:
         return jjMoveStringLiteralDfa18_0(active0, 0x10ffff80000000L);
      case 95:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(17, 9, 213);
         return jjMoveStringLiteralDfa18_0(active0, 0x7f000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L, 0L, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000000000L);
      case 69:
         return jjMoveStringLiteralDfa19_0(active0, 0xf000000000000L);
      case 79:
         return jjMoveStringLiteralDfa19_0(active0, 0x7f000000L);
      case 82:
         return jjMoveStringLiteralDfa19_0(active0, 0x80000000000000L);
      case 84:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000000000000L);
      case 85:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000000000000L);
      case 95:
         return jjMoveStringLiteralDfa19_0(active0, 0x2010ffff80000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L, 0L, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa20_0(active0, 0x2000000000000000L);
      case 77:
         return jjMoveStringLiteralDfa20_0(active0, 0x80000000000000L);
      case 82:
         return jjMoveStringLiteralDfa20_0(active0, 0x100f000000000000L);
      case 83:
         return jjMoveStringLiteralDfa20_0(active0, 0x7f000000L);
      case 84:
         return jjMoveStringLiteralDfa20_0(active0, 0x100000000000000L);
      case 86:
         return jjMoveStringLiteralDfa20_0(active0, 0x10ffff80000000L);
      case 95:
         return jjMoveStringLiteralDfa20_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L, 0L, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 56, 213);
         return jjMoveStringLiteralDfa21_0(active0, 0x10ffff80000000L);
      case 73:
         return jjMoveStringLiteralDfa21_0(active0, 0x80000000000000L);
      case 78:
         return jjMoveStringLiteralDfa21_0(active0, 0x2000000000000000L);
      case 83:
         return jjMoveStringLiteralDfa21_0(active0, 0xf000000000000L);
      case 84:
         return jjMoveStringLiteralDfa21_0(active0, 0x1000000000000000L);
      case 86:
         return jjMoveStringLiteralDfa21_0(active0, 0x20000000000000L);
      case 95:
         return jjMoveStringLiteralDfa21_0(active0, 0x7f000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L, 0L, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa22_0(active0, 0x20000000000000L);
      case 73:
         return jjMoveStringLiteralDfa22_0(active0, 0x100f000000000000L);
      case 78:
         return jjMoveStringLiteralDfa22_0(active0, 0x2080000000000000L);
      case 82:
         return jjMoveStringLiteralDfa22_0(active0, 0x10ffff80000000L);
      case 88:
         return jjMoveStringLiteralDfa22_0(active0, 0x7f000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L, 0L, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa23_0(active0, 0x80000000000000L);
      case 78:
         return jjMoveStringLiteralDfa23_0(active0, 0x1000000000000000L);
      case 79:
         return jjMoveStringLiteralDfa23_0(active0, 0x200f000000000000L);
      case 82:
         return jjMoveStringLiteralDfa23_0(active0, 0x20000000000000L);
      case 83:
         return jjMoveStringLiteralDfa23_0(active0, 0x10ffff80000000L);
      case 95:
         return jjMoveStringLiteralDfa23_0(active0, 0x7f000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L, 0L, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 71:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 60, 213);
         break;
      case 73:
         return jjMoveStringLiteralDfa24_0(active0, 0x10ffff80000000L);
      case 78:
         return jjMoveStringLiteralDfa24_0(active0, 0xf000000000000L);
      case 83:
         return jjMoveStringLiteralDfa24_0(active0, 0x20000000000000L);
      case 84:
         return jjMoveStringLiteralDfa24_0(active0, 0x2080000000000000L);
      case 86:
         return jjMoveStringLiteralDfa24_0(active0, 0x7f000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L, 0L, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa25_0(active0, 0x2000000000000000L);
      case 69:
         return jjMoveStringLiteralDfa25_0(active0, 0x7f000000L);
      case 73:
         return jjMoveStringLiteralDfa25_0(active0, 0xa0000000000000L);
      case 79:
         return jjMoveStringLiteralDfa25_0(active0, 0x10ffff80000000L);
      case 95:
         return jjMoveStringLiteralDfa25_0(active0, 0xf000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L, 0L, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa26_0(active0, 0x3000000000000L);
      case 51:
         return jjMoveStringLiteralDfa26_0(active0, 0xc000000000000L);
      case 78:
         return jjMoveStringLiteralDfa26_0(active0, 0x10ffff80000000L);
      case 79:
         return jjMoveStringLiteralDfa26_0(active0, 0xa0000000000000L);
      case 82:
         return jjMoveStringLiteralDfa26_0(active0, 0x7f000000L);
      case 84:
         return jjMoveStringLiteralDfa26_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, 0L, 0L, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa27_0(active0, 0x2000000000000000L);
      case 78:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(26, 55, 214);
         return jjMoveStringLiteralDfa27_0(active0, 0x20000000000000L);
      case 83:
         return jjMoveStringLiteralDfa27_0(active0, 0x7f000000L);
      case 95:
         return jjMoveStringLiteralDfa27_0(active0, 0x1fffff80000000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, 0L, 0L, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa28_0(active0, 0xe000000000000L);
      case 49:
         return jjMoveStringLiteralDfa28_0(active0, 0x10ffff80000000L);
      case 51:
         return jjMoveStringLiteralDfa28_0(active0, 0x1000000000000L);
      case 73:
         return jjMoveStringLiteralDfa28_0(active0, 0x7f000000L);
      case 79:
         return jjMoveStringLiteralDfa28_0(active0, 0x2000000000000000L);
      case 95:
         return jjMoveStringLiteralDfa28_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0, 0L, 0L, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa29_0(active0, 0x10ffff80000000L);
      case 52:
         return jjMoveStringLiteralDfa29_0(active0, 0x20000000000000L);
      case 78:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(28, 61, 213);
         break;
      case 79:
         return jjMoveStringLiteralDfa29_0(active0, 0x7f000000L);
      case 95:
         return jjMoveStringLiteralDfa29_0(active0, 0xf000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0, 0L, 0L, 0L);
      return 29;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa30_0(active0, 0xf000000000000L);
      case 78:
         return jjMoveStringLiteralDfa30_0(active0, 0x7f000000L);
      case 95:
         return jjMoveStringLiteralDfa30_0(active0, 0x30ffff80000000L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0, 0L, 0L, 0L);
      return 30;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(30, 53, 213);
         return jjMoveStringLiteralDfa31_0(active0, 0x18080000000L);
      case 49:
         return jjMoveStringLiteralDfa31_0(active0, 0x60100000000L);
      case 50:
         return jjMoveStringLiteralDfa31_0(active0, 0x80200000000L);
      case 51:
         return jjMoveStringLiteralDfa31_0(active0, 0x300400000000L);
      case 52:
         return jjMoveStringLiteralDfa31_0(active0, 0xc00800000000L);
      case 53:
         return jjMoveStringLiteralDfa31_0(active0, 0x10001000000000L);
      case 54:
         return jjMoveStringLiteralDfa31_0(active0, 0x6000000000L);
      case 78:
         return jjMoveStringLiteralDfa31_0(active0, 0xf000000000000L);
      case 95:
         return jjMoveStringLiteralDfa31_0(active0, 0x7f000000L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0, 0L, 0L, 0L);
      return 31;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa32_0(active0, 0x7f000000L);
      case 68:
         return jjMoveStringLiteralDfa32_0(active0, 0xf000000000000L);
      case 95:
         return jjMoveStringLiteralDfa32_0(active0, 0x10ffff80000000L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0, 0L, 0L, 0L);
      return 32;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa33_0(active0, 0x7f000000L);
      case 65:
         return jjMoveStringLiteralDfa33_0(active0, 0x10ffff80000000L);
      case 95:
         return jjMoveStringLiteralDfa33_0(active0, 0xf000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(31, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0, 0L, 0L, 0L);
      return 33;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa34_0(active0, 0xf000000000000L);
      case 78:
         return jjMoveStringLiteralDfa34_0(active0, 0x10ffff80000000L);
      case 95:
         return jjMoveStringLiteralDfa34_0(active0, 0x7f000000L);
      default :
         break;
   }
   return jjStartNfa_0(32, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0, 0L, 0L, 0L);
      return 34;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa35_0(active0, 0x1000000L);
      case 49:
         return jjMoveStringLiteralDfa35_0(active0, 0x2000000L);
      case 50:
         return jjMoveStringLiteralDfa35_0(active0, 0x4000000L);
      case 51:
         return jjMoveStringLiteralDfa35_0(active0, 0x8000000L);
      case 52:
         return jjMoveStringLiteralDfa35_0(active0, 0x10000000L);
      case 53:
         return jjMoveStringLiteralDfa35_0(active0, 0x20000000L);
      case 54:
         return jjMoveStringLiteralDfa35_0(active0, 0x40000000L);
      case 65:
         return jjMoveStringLiteralDfa35_0(active0, 0xf000000000000L);
      case 68:
         return jjMoveStringLiteralDfa35_0(active0, 0x10ffff80000000L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0, 0L, 0L, 0L);
      return 35;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa36_0(active0, 0xf000000000000L);
      case 95:
         return jjMoveStringLiteralDfa36_0(active0, 0x10ffffff000000L);
      default :
         break;
   }
   return jjStartNfa_0(34, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa36_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(34, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, active0, 0L, 0L, 0L);
      return 36;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa37_0(active0, 0x7f000000L);
      case 69:
         return jjMoveStringLiteralDfa37_0(active0, 0xf000000000000L);
      case 76:
         return jjMoveStringLiteralDfa37_0(active0, 0x10ffff80000000L);
      default :
         break;
   }
   return jjStartNfa_0(35, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa37_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(35, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, active0, 0L, 0L, 0L);
      return 37;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa38_0(active0, 0x10ffff80000000L);
      case 78:
         return jjMoveStringLiteralDfa38_0(active0, 0x7f000000L);
      case 82:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 37;
         }
         return jjMoveStringLiteralDfa38_0(active0, 0xb000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(36, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa38_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(36, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, active0, 0L, 0L, 0L);
      return 38;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa39_0(active0, 0x7f000000L);
      case 84:
         return jjMoveStringLiteralDfa39_0(active0, 0x10ffff80000000L);
      case 95:
         return jjMoveStringLiteralDfa39_0(active0, 0xb000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(37, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa39_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(37, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, active0, 0L, 0L, 0L);
      return 39;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa40_0(active0, 0xb000000000000L);
      case 69:
         return jjMoveStringLiteralDfa40_0(active0, 0x10ffff80000000L);
      case 95:
         return jjMoveStringLiteralDfa40_0(active0, 0x7f000000L);
      default :
         break;
   }
   return jjStartNfa_0(38, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa40_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(38, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, active0, 0L, 0L, 0L);
      return 40;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa41_0(active0, 0x7f000000L);
      case 82:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 40;
         }
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 40;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 40;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 40;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 40;
         }
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 40;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 40;
         }
         return jjMoveStringLiteralDfa41_0(active0, 0x10ffc000000000L);
      case 85:
         return jjMoveStringLiteralDfa41_0(active0, 0xb000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(39, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa41_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(39, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, active0, 0L, 0L, 0L);
      return 41;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa42_0(active0, 0x7f000000L);
      case 84:
         return jjMoveStringLiteralDfa42_0(active0, 0xb000000000000L);
      case 95:
         return jjMoveStringLiteralDfa42_0(active0, 0x10ffc000000000L);
      default :
         break;
   }
   return jjStartNfa_0(40, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa42_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(40, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, active0, 0L, 0L, 0L);
      return 42;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa43_0(active0, 0x10ffc000000000L);
      case 84:
         return jjMoveStringLiteralDfa43_0(active0, 0x7f000000L);
      case 95:
         return jjMoveStringLiteralDfa43_0(active0, 0xb000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(41, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa43_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(41, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, active0, 0L, 0L, 0L);
      return 43;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa44_0(active0, 0xb000000000000L);
      case 69:
         return jjMoveStringLiteralDfa44_0(active0, 0x7f000000L);
      case 85:
         return jjMoveStringLiteralDfa44_0(active0, 0x10ffc000000000L);
      default :
         break;
   }
   return jjStartNfa_0(42, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa44_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(42, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(43, active0, 0L, 0L, 0L);
      return 44;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa45_0(active0, 0xb000000000000L);
      case 82:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(44, 24, 213);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(44, 25, 213);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(44, 26, 213);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(44, 27, 213);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(44, 28, 213);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(44, 29, 213);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(44, 30, 213);
         break;
      case 84:
         return jjMoveStringLiteralDfa45_0(active0, 0x10ffc000000000L);
      default :
         break;
   }
   return jjStartNfa_0(43, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa45_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(43, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(44, active0, 0L, 0L, 0L);
      return 45;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa46_0(active0, 0xb000000000000L);
      case 95:
         return jjMoveStringLiteralDfa46_0(active0, 0x10ffc000000000L);
      default :
         break;
   }
   return jjStartNfa_0(44, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa46_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(44, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(45, active0, 0L, 0L, 0L);
      return 46;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa47_0(active0, 0x10ffc000000000L);
      case 82:
         return jjMoveStringLiteralDfa47_0(active0, 0xb000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(45, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa47_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(45, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(46, active0, 0L, 0L, 0L);
      return 47;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa48_0(active0, 0x1bffc000000000L);
      default :
         break;
   }
   return jjStartNfa_0(46, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa48_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(46, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(47, active0, 0L, 0L, 0L);
      return 48;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa49_0(active0, 0xb000000000000L);
      case 80:
         return jjMoveStringLiteralDfa49_0(active0, 0x10ffc000000000L);
      default :
         break;
   }
   return jjStartNfa_0(47, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa49_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(47, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(48, active0, 0L, 0L, 0L);
      return 49;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa50_0(active0, 0xb000000000000L);
      case 82:
         return jjMoveStringLiteralDfa50_0(active0, 0x10ffc000000000L);
      default :
         break;
   }
   return jjStartNfa_0(48, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa50_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(48, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(49, active0, 0L, 0L, 0L);
      return 50;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa51_0(active0, 0x10ffc000000000L);
      case 84:
         return jjMoveStringLiteralDfa51_0(active0, 0xb000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(49, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa51_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(49, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(50, active0, 0L, 0L, 0L);
      return 51;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa52_0(active0, 0x10ffc000000000L);
      case 69:
         return jjMoveStringLiteralDfa52_0(active0, 0xb000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(50, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa52_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(50, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(51, active0, 0L, 0L, 0L);
      return 52;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa53_0(active0, 0x10ffc000000000L);
      case 68:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(52, 51, 213);
         return jjMoveStringLiteralDfa53_0(active0, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(51, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa53_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(51, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(52, active0, 0L, 0L, 0L);
      return 53;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa54_0(active0, 0x10ffc000000000L);
      case 95:
         return jjMoveStringLiteralDfa54_0(active0, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(52, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa54_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(52, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(53, active0, 0L, 0L, 0L);
      return 54;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa55_0(active0, 0x10ffc000000000L);
      case 73:
         return jjMoveStringLiteralDfa55_0(active0, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(53, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa55_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(53, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(54, active0, 0L, 0L, 0L);
      return 55;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(55, 38, 213);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(55, 52, 213);
         return jjMoveStringLiteralDfa56_0(active0, 0xff8000000000L);
      case 78:
         return jjMoveStringLiteralDfa56_0(active0, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(54, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa56_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(54, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(55, active0, 0L, 0L, 0L);
      return 56;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa57_0(active0, 0x3ff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(55, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa57_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(55, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(56, active0, 0L, 0L, 0L);
      return 57;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa58_0(active0, 0xff8000000000L);
      case 87:
         return jjMoveStringLiteralDfa58_0(active0, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(56, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa58_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(56, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(57, active0, 0L, 0L, 0L);
      return 58;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa59_0(active0, 0x3000000000000L);
      case 78:
         return jjMoveStringLiteralDfa59_0(active0, 0xff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(57, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa59_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(57, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(58, active0, 0L, 0L, 0L);
      return 59;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa60_0(active0, 0x3000000000000L);
      case 95:
         return jjMoveStringLiteralDfa60_0(active0, 0xff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(58, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa60_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(58, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(59, active0, 0L, 0L, 0L);
      return 60;
   }
   switch(curChar)
   {
      case 75:
         return jjMoveStringLiteralDfa61_0(active0, 0x3000000000000L);
      case 77:
         return jjMoveStringLiteralDfa61_0(active0, 0xff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(59, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa61_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(59, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(60, active0, 0L, 0L, 0L);
      return 61;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa62_0(active0, 0xff8000000000L);
      case 73:
         return jjMoveStringLiteralDfa62_0(active0, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(60, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa62_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(60, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(61, active0, 0L, 0L, 0L);
      return 62;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa63_0(active0, 0xff8000000000L);
      case 84:
         return jjMoveStringLiteralDfa63_0(active0, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(61, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa63_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(61, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(62, active0, 0L, 0L, 0L);
      return 63;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa64_0(active0, 0x3ff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(62, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa64_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(62, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(63, active0, 0L, 0L, 0L);
      return 64;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa65_0(active0, 0xff8000000000L);
      case 86:
         return jjMoveStringLiteralDfa65_0(active0, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(63, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa65_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(63, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(64, active0, 0L, 0L, 0L);
      return 65;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa66_0(active0, 0x3000000000000L);
      case 83:
         return jjMoveStringLiteralDfa66_0(active0, 0xff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(64, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa66_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(64, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(65, active0, 0L, 0L, 0L);
      return 66;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa67_0(active0, 0x3000000000000L);
      case 95:
         return jjMoveStringLiteralDfa67_0(active0, 0xff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(65, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa67_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(65, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(66, active0, 0L, 0L, 0L);
      return 67;
   }
   switch(curChar)
   {
      case 83:
         return jjMoveStringLiteralDfa68_0(active0, 0x3000000000000L);
      case 88:
         return jjMoveStringLiteralDfa68_0(active0, 0xff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(66, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa68_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(66, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(67, active0, 0L, 0L, 0L);
      return 68;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa69_0(active0, 0x3000000000000L);
      case 95:
         return jjMoveStringLiteralDfa69_0(active0, 0xff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(67, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa69_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(67, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(68, active0, 0L, 0L, 0L);
      return 69;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa70_0(active0, 0x3000000000000L);
      case 86:
         return jjMoveStringLiteralDfa70_0(active0, 0xff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(68, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa70_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(68, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(69, active0, 0L, 0L, 0L);
      return 70;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa71_0(active0, 0xff8000000000L);
      case 78:
         return jjMoveStringLiteralDfa71_0(active0, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(69, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa71_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(69, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(70, active0, 0L, 0L, 0L);
      return 71;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa72_0(active0, 0xff8000000000L);
      case 95:
         return jjMoveStringLiteralDfa72_0(active0, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(70, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa72_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(70, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(71, active0, 0L, 0L, 0L);
      return 72;
   }
   switch(curChar)
   {
      case 51:
         return jjMoveStringLiteralDfa73_0(active0, 0x1000000000000L);
      case 52:
         return jjMoveStringLiteralDfa73_0(active0, 0x2000000000000L);
      case 83:
         return jjMoveStringLiteralDfa73_0(active0, 0xff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(71, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa73_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(71, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(72, active0, 0L, 0L, 0L);
      return 73;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa74_0(active0, 0xff8000000000L);
      case 95:
         return jjMoveStringLiteralDfa74_0(active0, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(72, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa74_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(72, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(73, active0, 0L, 0L, 0L);
      return 74;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(74, 48, 213);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(74, 49, 213);
         break;
      case 79:
         return jjMoveStringLiteralDfa75_0(active0, 0xff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(73, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa75_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(73, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(74, active0, 0L, 0L, 0L);
      return 75;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa76_0(active0, 0xff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(74, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa76_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(74, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(75, active0, 0L, 0L, 0L);
      return 76;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa77_0(active0, 0xff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(75, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa77_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(75, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(76, active0, 0L, 0L, 0L);
      return 77;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa78_0(active0, 0xff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(76, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa78_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(76, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(77, active0, 0L, 0L, 0L);
      return 78;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa79_0(active0, 0xff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(77, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa79_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(77, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(78, active0, 0L, 0L, 0L);
      return 79;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa80_0(active0, 0xff8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(78, active0, 0L, 0L, 0L);
}
private int jjMoveStringLiteralDfa80_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(78, old0, 0L, 0L, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(79, active0, 0L, 0L, 0L);
      return 80;
   }
   switch(curChar)
   {
      case 52:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(80, 40, 213);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(80, 41, 213);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(80, 44, 213);
         break;
      case 53:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(80, 42, 213);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(80, 43, 213);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(80, 45, 213);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(80, 46, 213);
         break;
      case 54:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(80, 39, 213);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(80, 47, 213);
         break;
      default :
         break;
   }
   return jjStartNfa_0(79, active0, 0L, 0L, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 213;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 61:
               case 74:
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 217)
                     kind = 217;
                  jjCheckNAddTwoStates(74, 75);
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 217)
                     kind = 217;
                  jjCheckNAddTwoStates(74, 75);
                  break;
               case 214:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 217)
                        kind = 217;
                     jjCheckNAddTwoStates(74, 75);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 214)
                        kind = 214;
                     jjCheckNAdd(68);
                  }
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 217)
                     kind = 217;
                  jjCheckNAddTwoStates(74, 75);
                  break;
               case 213:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 217)
                     kind = 217;
                  jjCheckNAddTwoStates(74, 75);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 217)
                     kind = 217;
                  jjCheckNAddTwoStates(74, 75);
                  break;
               case 211:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 217)
                     kind = 217;
                  jjCheckNAddTwoStates(74, 75);
                  break;
               case 209:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 217)
                     kind = 217;
                  jjCheckNAddTwoStates(74, 75);
                  break;
               case 215:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 217)
                        kind = 217;
                     jjCheckNAddTwoStates(74, 75);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 215)
                        kind = 215;
                     jjCheckNAdd(71);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 39)
                     jjAddStates(7, 8);
                  else if (curChar == 46)
                     jjCheckNAdd(31);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 24;
                  else if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 23;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddStates(9, 20);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddStates(21, 30);
                  }
                  if ((0xff000000000000L & l) != 0L)
                  {
                     if (kind > 132)
                        kind = 132;
                     jjAddStates(31, 36);
                  }
                  if ((0xfe000000000000L & l) != 0L)
                  {
                     if (kind > 125)
                        kind = 125;
                  }
                  break;
               case 24:
                  if (curChar != 47)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddStates(37, 39);
                  break;
               case 25:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddStates(37, 39);
                  break;
               case 26:
                  if ((0x2400L & l) != 0L && kind > 75)
                     kind = 75;
                  break;
               case 27:
                  if (curChar == 10 && kind > 75)
                     kind = 75;
                  break;
               case 28:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 30:
                  if (curChar == 46)
                     jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddStates(40, 42);
                  break;
               case 33:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
                  if (curChar == 39)
                     jjAddStates(7, 8);
                  break;
               case 37:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if (curChar == 39 && kind > 121)
                     kind = 121;
                  break;
               case 40:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 41:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 38);
                  break;
               case 42:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 43:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 46:
                  if (curChar == 34)
                     jjCheckNAddStates(43, 45);
                  break;
               case 47:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 49:
                  if ((0x8400002400L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 50:
                  if (curChar == 34 && kind > 122)
                     kind = 122;
                  break;
               case 51:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(46, 49);
                  break;
               case 52:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 53:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 54:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 55:
                  if (curChar == 10)
                     jjCheckNAddStates(43, 45);
                  break;
               case 56:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0xfe000000000000L & l) != 0L && kind > 125)
                     kind = 125;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 214)
                     kind = 214;
                  jjCheckNAdd(68);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 215)
                     kind = 215;
                  jjCheckNAdd(71);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
               case 88:
               case 97:
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(80);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 120:
                  if ((0x8000008400000000L & l) != 0L && kind > 114)
                     kind = 114;
                  break;
               case 121:
                  if ((0xfe000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 122:
                  if ((0xfe000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 123:
                  if ((0xfe000000000000L & l) != 0L && kind > 114)
                     kind = 114;
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 126:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddStates(9, 20);
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddStates(50, 53);
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjCheckNAdd(133);
                  break;
               case 134:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(54, 60);
                  break;
               case 153:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddStates(0, 6);
                  break;
               case 154:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(154, 155);
                  break;
               case 155:
                  if (curChar != 46)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddStates(61, 63);
                  break;
               case 156:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddStates(61, 63);
                  break;
               case 158:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(159);
                  break;
               case 159:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddTwoStates(159, 35);
                  break;
               case 160:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(160, 161);
                  break;
               case 162:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(163);
                  break;
               case 163:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAddTwoStates(163, 35);
                  break;
               case 164:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(64, 66);
                  break;
               case 166:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(167);
                  break;
               case 167:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(167, 35);
                  break;
               case 168:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjAddStates(31, 36);
                  break;
               case 183:
                  if (curChar != 48)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddStates(21, 30);
                  break;
               case 184:
                  if (curChar != 48)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddStates(67, 70);
                  break;
               case 186:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjAddStates(71, 72);
                  break;
               case 188:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddTwoStates(188, 128);
                  break;
               case 191:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjAddStates(73, 79);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 61:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 217)
                        kind = 217;
                     jjCheckNAddTwoStates(74, 75);
                  }
                  else if (curChar == 92)
                     jjAddStates(80, 81);
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 114:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 217)
                        kind = 217;
                     jjCheckNAddTwoStates(74, 75);
                  }
                  else if (curChar == 92)
                     jjAddStates(80, 81);
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 117;
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 214:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 217)
                        kind = 217;
                     jjCheckNAddTwoStates(74, 75);
                  }
                  else if (curChar == 92)
                     jjAddStates(80, 81);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 214)
                        kind = 214;
                     jjCheckNAdd(68);
                  }
                  break;
               case 70:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 217)
                        kind = 217;
                     jjCheckNAddTwoStates(74, 75);
                  }
                  else if (curChar == 92)
                     jjAddStates(80, 81);
                  if (curChar == 70)
                  {
                     if (kind > 215)
                        kind = 215;
                     jjCheckNAdd(71);
                  }
                  break;
               case 213:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 217)
                        kind = 217;
                     jjCheckNAddTwoStates(74, 75);
                  }
                  else if (curChar == 92)
                     jjAddStates(80, 81);
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 217)
                        kind = 217;
                     jjCheckNAddTwoStates(74, 75);
                  }
                  else if (curChar == 92)
                     jjAddStates(80, 81);
                  if (curChar == 83)
                  {
                     if (kind > 214)
                        kind = 214;
                     jjCheckNAdd(68);
                  }
                  break;
               case 211:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 217)
                        kind = 217;
                     jjCheckNAddTwoStates(74, 75);
                  }
                  else if (curChar == 92)
                     jjAddStates(80, 81);
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 210;
                  else if (curChar == 116)
                  {
                     if (kind > 136)
                        kind = 136;
                  }
                  break;
               case 209:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 217)
                        kind = 217;
                     jjCheckNAddTwoStates(74, 75);
                  }
                  else if (curChar == 92)
                     jjAddStates(80, 81);
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 211;
                  if (curChar == 110)
                     jjCheckNAdd(58);
                  break;
               case 215:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 217)
                        kind = 217;
                     jjCheckNAddTwoStates(74, 75);
                  }
                  else if (curChar == 92)
                     jjAddStates(80, 81);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 215)
                        kind = 215;
                     jjCheckNAdd(71);
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 217)
                        kind = 217;
                     jjCheckNAddTwoStates(74, 75);
                  }
                  else if (curChar == 92)
                     jjAddStates(82, 84);
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 46;
                  if (curChar == 105)
                     jjAddStates(85, 86);
                  else if (curChar == 98)
                     jjAddStates(87, 88);
                  else if (curChar == 111)
                     jjAddStates(89, 90);
                  else if (curChar == 92)
                     jjAddStates(91, 92);
                  else if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 70;
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 67;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 65;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 1:
                  if (curChar == 89 && kind > 57)
                     kind = 57;
                  break;
               case 2:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 77)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if (kind > 75)
                     kind = 75;
                  jjAddStates(37, 39);
                  break;
               case 32:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(93, 94);
                  break;
               case 35:
                  if ((0x5000000050L & l) != 0L && kind > 119)
                     kind = 119;
                  break;
               case 37:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 39:
                  if (curChar == 92)
                     jjAddStates(95, 97);
                  break;
               case 40:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 45:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 48:
                  if (curChar == 92)
                     jjAddStates(98, 101);
                  break;
               case 49:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 58:
                  if (curChar == 116 && kind > 136)
                     kind = 136;
                  break;
               case 59:
                  if (curChar == 114)
                     jjCheckNAdd(58);
                  break;
               case 60:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 62:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar != 103)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 64:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 68:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 214)
                     kind = 214;
                  jjCheckNAdd(68);
                  break;
               case 69:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 71:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 215)
                     kind = 215;
                  jjCheckNAdd(71);
                  break;
               case 72:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 73:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 217)
                     kind = 217;
                  jjCheckNAddTwoStates(74, 75);
                  break;
               case 74:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 217)
                     kind = 217;
                  jjCheckNAddTwoStates(74, 75);
                  break;
               case 75:
                  if (curChar == 92)
                     jjAddStates(80, 81);
                  break;
               case 76:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 78:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
               case 88:
               case 97:
               case 101:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(80);
                  break;
               case 80:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 217)
                     kind = 217;
                  jjCheckNAddTwoStates(74, 75);
                  break;
               case 81:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 83:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 85:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 89:
                  if (curChar == 92)
                     jjAddStates(91, 92);
                  break;
               case 90:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 98:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 102:
                  if (curChar == 111)
                     jjAddStates(89, 90);
                  break;
               case 103:
                  if (curChar == 116 && kind > 179)
                     kind = 179;
                  break;
               case 104:
               case 210:
                  if (curChar == 117)
                     jjCheckNAdd(103);
                  break;
               case 105:
                  if (curChar == 121 && kind > 179)
                     kind = 179;
                  break;
               case 106:
                  if (curChar == 97)
                     jjCheckNAdd(105);
                  break;
               case 107:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (curChar == 98)
                     jjAddStates(87, 88);
                  break;
               case 111:
                  if (curChar == 112)
                     jjCheckNAdd(105);
                  break;
               case 112:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 115:
                  if (curChar == 102 && kind > 179)
                     kind = 179;
                  break;
               case 116:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 92)
                     jjAddStates(82, 84);
                  break;
               case 120:
                  if ((0x54404610000000L & l) != 0L && kind > 114)
                     kind = 114;
                  break;
               case 124:
                  if (curChar == 120)
                     jjCheckNAdd(125);
                  break;
               case 125:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 114)
                     kind = 114;
                  jjCheckNAdd(125);
                  break;
               case 128:
                  if ((0x100000001000L & l) != 0L && kind > 115)
                     kind = 115;
                  break;
               case 129:
                  if (curChar == 76 && kind > 115)
                     kind = 115;
                  break;
               case 130:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 108 && kind > 115)
                     kind = 115;
                  break;
               case 132:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 135:
                  if ((0x20000000200000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(102, 104);
                  break;
               case 136:
                  if ((0x100000001000L & l) != 0L && kind > 135)
                     kind = 135;
                  break;
               case 137:
                  if (curChar == 108 && kind > 135)
                     kind = 135;
                  break;
               case 138:
               case 170:
               case 195:
                  if (curChar == 108)
                     jjCheckNAdd(137);
                  break;
               case 139:
                  if (curChar == 76 && kind > 135)
                     kind = 135;
                  break;
               case 140:
               case 171:
               case 196:
                  if (curChar == 76)
                     jjCheckNAdd(139);
                  break;
               case 141:
                  if (curChar != 108)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(102, 104);
                  break;
               case 142:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar != 76)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(102, 104);
                  break;
               case 144:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if ((0x100000001000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(105, 107);
                  break;
               case 146:
                  if ((0x20000000200000L & l) != 0L && kind > 135)
                     kind = 135;
                  break;
               case 147:
               case 177:
               case 202:
                  if (curChar == 117)
                     jjCheckNAdd(137);
                  break;
               case 148:
               case 178:
               case 203:
                  if (curChar == 85)
                     jjCheckNAdd(139);
                  break;
               case 149:
                  if (curChar != 108)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(105, 107);
                  break;
               case 150:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 151:
                  if (curChar != 76)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(105, 107);
                  break;
               case 152:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 157:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(108, 109);
                  break;
               case 161:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(110, 111);
                  break;
               case 165:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(112, 113);
                  break;
               case 169:
                  if ((0x20000000200000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(114, 116);
                  break;
               case 172:
                  if (curChar != 108)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(114, 116);
                  break;
               case 173:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if (curChar != 76)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(114, 116);
                  break;
               case 175:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if ((0x100000001000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(117, 119);
                  break;
               case 179:
                  if (curChar != 108)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(117, 119);
                  break;
               case 180:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar != 76)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(117, 119);
                  break;
               case 182:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 185:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(186);
                  break;
               case 186:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddTwoStates(186, 187);
                  break;
               case 187:
                  if ((0x100000201000L & l) != 0L && kind > 115)
                     kind = 115;
                  break;
               case 189:
                  if ((0x100000001000000L & l) != 0L && kind > 133)
                     kind = 133;
                  break;
               case 190:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(191);
                  break;
               case 191:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAdd(191);
                  break;
               case 192:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(193);
                  break;
               case 193:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(73, 79);
                  break;
               case 194:
                  if ((0x20000000200000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(120, 122);
                  break;
               case 197:
                  if (curChar != 108)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(120, 122);
                  break;
               case 198:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if (curChar != 76)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(120, 122);
                  break;
               case 200:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if ((0x100000001000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(123, 125);
                  break;
               case 204:
                  if (curChar != 108)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(123, 125);
                  break;
               case 205:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if (curChar != 76)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(123, 125);
                  break;
               case 207:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if (curChar == 105)
                     jjAddStates(85, 86);
                  break;
               case 212:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 211;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjAddStates(37, 39);
                  break;
               case 37:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 47:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(43, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 213 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_5(0x1000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_5(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x180L) != 0L)
         {
            jjmatchedKind = 73;
            return -1;
         }
         return -1;
      case 1:
         if ((active1 & 0x180L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 73;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 41:
         return jjStopAtPos(0, 69);
      case 92:
         return jjMoveStringLiteralDfa1_3(0x180L);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 13:
         return jjMoveStringLiteralDfa2_3(active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_3(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_3(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_3(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(2, 72);
         break;
      default :
         break;
   }
   return jjStartNfa_3(1, 0L, active1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     kind = 73;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 73;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 73)
                     kind = 73;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(0, 0);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 41)
                     kind = 70;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  jjAddStates(126, 127);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(126, 127);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 65);
      case 92:
         return jjMoveStringLiteralDfa1_2(0xcL);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 13:
         return jjMoveStringLiteralDfa2_2(active1, 0x8L);
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa2_2(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(2, 67);
         break;
      default :
         return 3;
   }
   return 3;
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 41:
         return jjMoveStringLiteralDfa1_1(0x8000000000000000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, 0L);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     kind = 64;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 64;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 64)
                     kind = 64;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   154, 155, 160, 161, 164, 165, 35, 37, 39, 127, 128, 130, 132, 133, 134, 135, 
   142, 144, 145, 150, 152, 184, 128, 130, 132, 185, 188, 128, 189, 190, 192, 169, 
   173, 175, 176, 180, 182, 25, 26, 28, 31, 32, 35, 47, 48, 50, 47, 48, 
   52, 50, 127, 128, 130, 132, 134, 135, 142, 144, 145, 150, 152, 156, 157, 35, 
   164, 165, 35, 184, 128, 130, 132, 186, 187, 193, 194, 198, 200, 201, 205, 207, 
   76, 81, 120, 121, 124, 209, 212, 114, 118, 104, 109, 90, 98, 33, 34, 40, 
   41, 43, 49, 51, 53, 56, 136, 138, 140, 146, 147, 148, 158, 159, 162, 163, 
   166, 167, 136, 170, 171, 146, 177, 178, 136, 195, 196, 146, 202, 203, 1, 2, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\75", "\74", "\76", "\41", 
"\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", "\174\174", "\46\46", 
"\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", "\136", "\45", "\74\74", 
"\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", 
"\74\74\75", "\76\76\75", "\76\76\76\75", "\56\56\56", null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\143\157\156\164\151\156\165\145", 
"\166\157\154\141\164\151\154\145", "\162\145\147\151\163\164\145\162", "\165\156\163\151\147\156\145\144", 
"\165\156\163\151\147\156\145\144\40\143\150\141\162", "\164\171\160\145\144\145\146", "\144\145\146\141\165\154\164", 
"\144\157\165\142\154\145", "\102\117\117\114", "\102\157\157\154\145\141\156", 
"\163\151\172\145\157\146", "\163\167\151\164\143\150", "\162\145\164\165\162\156", 
"\145\170\164\145\162\156", "\163\164\162\165\143\164", "\163\164\141\164\151\143", 
"\163\151\147\156\145\144", "\163\151\147\156\145\144\40\143\150\141\162", "\123\111\156\164\63\62", 
"\151\156\164\63\62\137\164", "\167\150\151\154\145", "\142\162\145\141\153", "\165\156\151\157\156", 
"\143\157\156\163\164", "\146\154\157\141\164", "\145\154\163\145", "\143\141\163\145", 
"\145\156\165\155", "\141\165\164\157", "\166\157\151\144", "\143\150\141\162", 
"\147\157\164\157", "\146\157\162", "\151\146", "\144\157", "\111\102\101\143\164\151\157\156", 
"\111\102\117\165\164\154\145\164", "\151\144", "\123\105\114", "\111\115\120", "\103\154\141\163\163", 
"\156\151\154", null, "\50", "\51", "\133", "\135", "\173", "\175", "\73", 
"\100\151\155\160\154\145\155\145\156\164\141\164\151\157\156", "\100\151\156\164\145\162\146\141\143\145", 
"\100\160\162\157\164\157\143\157\154", "\100\145\156\143\157\144\145", 
"\100\163\171\156\143\150\162\157\156\151\172\145\144", "\100\163\145\154\145\143\164\157\162", "\100\145\156\144", 
"\100\144\145\146\163", "\100\143\154\141\163\163", "\100\164\162\171", "\100\164\150\162\157\167", 
"\100\143\141\164\143\150", "\100\146\151\156\141\154\154\171", "\100\160\162\151\166\141\164\145", 
"\100\160\141\143\153\141\147\145", "\100\160\165\142\154\151\143", "\100\160\162\157\164\145\143\164\145\144", 
"\100\160\162\157\160\145\162\164\171", "\100\163\171\156\164\150\145\163\151\172\145", 
"\100\144\171\156\141\155\151\143", "\100\157\160\164\151\157\156\141\154", 
"\100\162\145\161\165\151\162\145\144", "\103\107\106\154\157\141\164", "\116\123\111\156\164\145\147\145\162", 
"\116\123\122\145\143\164", "\116\123\123\151\172\145", "\116\123\125\111\156\164\145\147\145\162", null, 
null, "\105\130\120\117\122\124\105\104\137\103\101\114\114\102\101\103\113", null, 
null, null, null, "\50\136", "\54", "\54\56\56\56", "\76\76", "\56", "\55\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "VOID_BLOCK",
   "PREPROCESSOR_OUTPUT",
   "FORMAT_FUNC",
   "FOAMAT_FUNC",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, 1, 0, -1, 0, -1, -1, -1, 0, -1, -1, -1, -1, 5, 
   -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 
};
static final long[] jjtoToken = {
   0x1L, 0x3e8fffffffffc000L, 0xfffffffffffffff8L, 0x7e3ffffffL, 
};
static final long[] jjtoSkip = {
   0xfffffffffffffffeL, 0x1862L, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x1840L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x279dL, 0x0L, 0x0L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[213];
private final int[] jjstateSet = new int[426];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ObjCParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ObjCParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 213; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 68)
         {
            jjmatchedKind = 68;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 77)
         {
            jjmatchedKind = 77;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
